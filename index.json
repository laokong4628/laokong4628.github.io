[{"categories":null,"content":"Getting started ","date":"0001-01-01","objectID":"/posts/Vim.html/:1:0","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Exiting Shortcut Description :qa Close all files :qa! Close all files, abandon changes — — :w Save :wq / :x Save and close file — — :q Close file :q! Close file, abandon changes — — ZZ Save and quit ZQ Quit without checking changes ","date":"0001-01-01","objectID":"/posts/Vim.html/:1:1","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Navigating Shortcut Description h j k l Arrow keys \u003cC-U\u003e / \u003cC-D\u003e Page up/page down Words Shortcut Description b / w Previous/next word e / ge Previous/next end of word Line Shortcut Description 0 (zero) Start of line ^ Start of line (after whitespace) $ End of line Character Shortcut Description fc Go forward to character c Fc Go backward to character c Document Shortcut Description gg First line G Last line :n Go to line n nG Go to line n Window Shortcut Description zz Center this line H Move to top of screen M Move to middle of screen L Move to bottom of screen Tab pages Shortcut Description :tabedit [file] Edit file in a new tab :tabfind [file] Open file if exists in new tab :tabclose Close current tab :tabs List all tabs :tabfirst Go to first tab :tablast Go to last tab :tabn Go to next tab :tabp Go to previous tab ","date":"0001-01-01","objectID":"/posts/Vim.html/:1:2","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Editing Shortcut Description a Append i Insert o Next line O Previous line s Delete char and insert S Delete line and insert C Delete until end of line and insert r Replace one character R Enter Replace mode u Undo changes \u003cC-R\u003e Redo changes ","date":"0001-01-01","objectID":"/posts/Vim.html/:1:3","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Exiting insert mode Shortcut Description Esc / \u003cC-[\u003e Exit insert mode \u003cC-C\u003e Exit insert mode, and abort current command ","date":"0001-01-01","objectID":"/posts/Vim.html/:1:4","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Exiting insert mode Shortcut Description Esc / \u003cC-[\u003e Exit insert mode \u003cC-C\u003e Exit insert mode, and abort current command ","date":"0001-01-01","objectID":"/posts/Vim.html/:1:5","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Clipboard Shortcut Description x Delete character — — dd Delete line (Cut) yy Yank line (Copy) — — p Paste P Paste before ","date":"0001-01-01","objectID":"/posts/Vim.html/:1:6","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Visual mode Shortcut Description v Enter visual mode V Enter visual line mode \u003cC-V\u003e Enter visual block mode In visual mode Shortcut Description d / x Delete selection s Replace selection y Yank selection (Copy) See Operators for other things you can do. ","date":"0001-01-01","objectID":"/posts/Vim.html/:1:7","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Operators ","date":"0001-01-01","objectID":"/posts/Vim.html/:2:0","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Usage Operators let you operate in a range of text (defined by motion). These are preformed in normal mode. Shortcut Description d w Operator Motion ","date":"0001-01-01","objectID":"/posts/Vim.html/:2:1","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Operators list Shortcut Description d Delete y Yank (copy) c Change (delete then insert) — — \u003e Indent right \u003c Indent left — — g~ Swap case gU Uppercase gu Lowercase — — ! Filter through external program See :help operator ","date":"0001-01-01","objectID":"/posts/Vim.html/:2:2","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Examples Combine operators with motions to use them. Shortcut Description dd (repeat the letter) Delete current line dw Delete to next word db Delete to beginning of word 2dd Delete 2 lines dip Delete a text object (inside paragraph) (in visual mode) d Delete selection See: :help motion.txt ","date":"0001-01-01","objectID":"/posts/Vim.html/:2:3","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Text objects ","date":"0001-01-01","objectID":"/posts/Vim.html/:3:0","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Usage Text objects let you operate (with an operator) in or around text blocks (objects). Operator Inside Object v i p Operator [i]nside or [a]round Text object ","date":"0001-01-01","objectID":"/posts/Vim.html/:3:1","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Text objects Shortcut Description p Paragraph w Word s Sentence — — [ ( { \u003c A [], (), or {} block ' \" ` A quoted string — — b A block [( B A block in [{ t A XML tag block ","date":"0001-01-01","objectID":"/posts/Vim.html/:3:2","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Examples Shortcut Description vip Select paragraph vipipipip Select more — — yip Yank inner paragraph yap Yank paragraph (including newline) — — dip Delete inner paragraph cip Change inner paragraph See Operators for other things you can do. ","date":"0001-01-01","objectID":"/posts/Vim.html/:3:3","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Diff Shortcut Description gvimdiff file1 file2 [file3] See differencies between files, in HMI ","date":"0001-01-01","objectID":"/posts/Vim.html/:3:4","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Misc ","date":"0001-01-01","objectID":"/posts/Vim.html/:4:0","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Folds Shortcut Description zo / zO Open zc / zC Close za / zA Toggle — — zv Open folds for this line — — zM Close all zR Open all — — zm Fold more (foldlevel += 1) zr Fold less (foldlevel -= 1) — — zx Update folds Uppercase ones are recursive (eg, zO is open recursively). ","date":"0001-01-01","objectID":"/posts/Vim.html/:4:1","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Navigation Shortcut Description [( [{ [\u003c Nrevious ( or { or \u003c ]) Next — — [m Previous method start [M Previous method end ","date":"0001-01-01","objectID":"/posts/Vim.html/:4:2","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Jumping Shortcut Description \u003cC-O\u003e Go back to previous location \u003cC-I\u003e Go forward — — gf Go to file in cursor ","date":"0001-01-01","objectID":"/posts/Vim.html/:4:3","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Counters Shortcut Description \u003cC-A\u003e Increment number \u003cC-X\u003e Decrement ","date":"0001-01-01","objectID":"/posts/Vim.html/:4:4","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Windows Shortcut Description z{height}\u003cCr\u003e Resize pane to {height} lines tall ","date":"0001-01-01","objectID":"/posts/Vim.html/:4:5","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Tags Shortcut Description :tag Classname Jump to first definition of Classname — — \u003cC-]\u003e Jump to definition g] See all definitions \u003cC-T\u003e Go back to last tag \u003cC-O\u003e \u003cC-I\u003e Back/forward — — :tselect Classname Find definitions of Classname :tjump Classname Find definitions of Classname (auto-select 1st) ","date":"0001-01-01","objectID":"/posts/Vim.html/:4:6","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Case Shortcut Description ~ Toggle case (Case =\u003e cASE) gU Uppercase gu Lowercase — — gUU Uppercase current line (also gUgU) guu Lowercase current line (also gugu) Do these in visual or normal mode. ","date":"0001-01-01","objectID":"/posts/Vim.html/:4:7","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Marks Shortcut Description `^ Last position of cursor in insert mode `. Last change `` Last jump — — ma Mark this cursor position as a `a Jump to the cursor position a 'a Jump to the beginning of the line with position a ","date":"0001-01-01","objectID":"/posts/Vim.html/:4:8","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Misc Shortcut Description . Repeat last command ]p paste under the current indentation level ","date":"0001-01-01","objectID":"/posts/Vim.html/:4:9","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Command line Shortcut Description \u003cC-R\u003e\u003cC-W\u003e Insert current word into the command line \u003cC-R\u003e\" Paste from \" register \u003cC-X\u003e\u003cC-F\u003e Auto-completion of path in insert mode ","date":"0001-01-01","objectID":"/posts/Vim.html/:4:10","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Text alignment :center [width] :right [width] :left See :help formatting ","date":"0001-01-01","objectID":"/posts/Vim.html/:4:11","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Calculator Shortcut Description \u003cC-R\u003e=128/2 Shows the result of the division: ‘64’ Do this in insert mode. ","date":"0001-01-01","objectID":"/posts/Vim.html/:4:12","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Exiting with an error :cq :cquit Works like :qa, but throws an error. Great for aborting Git commands. ","date":"0001-01-01","objectID":"/posts/Vim.html/:4:13","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Spell checking Shortcut Description :set spell spelllang=en_us Turn on US English spell checking ]s Move to next misspelled word after the cursor [s Move to previous misspelled word before the cursor z= Suggest spellings for the word under/after the cursor zg Add word to spell list zw Mark word as bad/mispelling zu / C-X (Insert Mode) Suggest words for bad word under cursor from spellfile See :help spell ","date":"0001-01-01","objectID":"/posts/Vim.html/:4:14","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":null,"content":"Also see Vim cheatsheet (vim.rotrr.com) Vim documentation (vimdoc.sourceforge.net) Interactive Vim tutorial (openvim.com) ","date":"0001-01-01","objectID":"/posts/Vim.html/:5:0","tags":["Featured"],"title":"Vim","uri":"/posts/Vim.html/"},{"categories":["Markdown"],"content":"This article shows the basic Markdown syntax and format.","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files. Note This article is a shameful copy of the great Grav original page. If you want to know about the extented Markdown syntax of LoveIt theme, please read extended Markdown syntax page. Let’s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages. Markdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it. Some of the key benefits are: Markdown is simple to learn, with minimal extra characters, so it’s also quicker to write content. Less chance of errors when writing in Markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use! John Gruber, the author of Markdown, puts it like this: The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. – John Gruber Without further delay, let us go over the main elements of Markdown and what the resulting HTML looks like! Tip  Bookmark this page for easy future reference! ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:0:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"1 Headings Headings from h2 through h6 are constructed with a # for each level: ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading The HTML looks like this: \u003ch2\u003eh2 Heading\u003c/h2\u003e \u003ch3\u003eh3 Heading\u003c/h3\u003e \u003ch4\u003eh4 Heading\u003c/h4\u003e \u003ch5\u003eh5 Heading\u003c/h5\u003e \u003ch6\u003eh6 Heading\u003c/h6\u003e Heading IDs To add a custom heading ID, enclose the custom ID in curly braces on the same line as the heading: ### A Great Heading {#custom-id} The HTML looks like this: \u003ch3 id=\"custom-id\"\u003eA Great Heading\u003c/h3\u003e ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:1:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"2 Comments Comments should be HTML compatible. \u003c!-- This is a comment --\u003e Comment below should NOT be seen: ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:2:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"3 Horizontal Rules The HTML \u003chr\u003e element is for creating a “thematic break” between paragraph-level elements. In Markdown, you can create a \u003chr\u003e with any of the following: ___: three consecutive underscores ---: three consecutive dashes ***: three consecutive asterisks The rendered output looks like this: ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:3:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"4 Body Copy Body copy written as normal, plain text will be wrapped with \u003cp\u003e\u003c/p\u003e tags in the rendered HTML. So this body copy: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. The HTML looks like this: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e A line break can be done with one blank line. ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:4:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"5 Inline HTML If you need a certain HTML tag (with a class) you can simply use HTML: Paragraph in Markdown. \u003cdiv class=\"class\"\u003e This is \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Paragraph in Markdown. ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:5:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"6 Emphasis ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:6:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"Bold For emphasizing a snippet of text with a heavier font-weight. The following snippet of text is rendered as bold text. **rendered as bold text** __rendered as bold text__ The HTML looks like this: \u003cstrong\u003erendered as bold text\u003c/strong\u003e ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:6:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"Italics For emphasizing a snippet of text with italics. The following snippet of text is rendered as italicized text. *rendered as italicized text* _rendered as italicized text_ The HTML looks like this: \u003cem\u003erendered as italicized text\u003c/em\u003e ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:6:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"Strikethrough In GFMGitHub flavored Markdown you can do strikethroughs. ~~Strike through this text.~~ The rendered output looks like this: Strike through this text. The HTML looks like this: \u003cdel\u003eStrike through this text.\u003c/del\u003e ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:6:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"Combination Bold, italics, and strikethrough can be used in combination. ***bold and italics*** ~~**strikethrough and bold**~~ ~~*strikethrough and italics*~~ ~~***bold, italics and strikethrough***~~ The rendered output looks like this: bold and italics strikethrough and bold strikethrough and italics bold, italics and strikethrough The HTML looks like this: \u003cem\u003e\u003cstrong\u003ebold and italics\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003estrikethrough and bold\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003estrikethrough and italics\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003ebold, italics and strikethrough\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:6:4","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"7 Blockquotes For quoting blocks of content from another source within your document. Add \u003e before any text you want to quote: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The rendered output looks like this: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The HTML looks like this: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e Blockquotes can also be nested: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. The rendered output looks like this: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:7:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"8 Lists ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:8:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"Unordered A list of items in which the order of the items does not explicitly matter. You may use any of the following symbols to denote bullets for each list item: * valid bullet - valid bullet + valid bullet For example: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:8:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"Ordered A list of items in which the order of items does explicitly matter. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e Tip If you just use 1. for each number, Markdown will automatically number each item. For example: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:8:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"Task Lists Task lists allow you to create a list of items with checkboxes. To create a task list, add dashes (-) and brackets with a space ([ ]) before task list items. To select a checkbox, add an x in between the brackets ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media The rendered output looks like this: Write the press release Update the website Contact the media ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:8:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"9 Code ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:9:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"Inline Code Wrap inline snippets of code with `. In this example, `\u003csection\u003e\u003c/section\u003e` should be wrapped as **code**. The rendered output looks like this: In this example, \u003csection\u003e\u003c/section\u003e should be wrapped as code. The HTML looks like this: \u003cp\u003e In this example, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e should be wrapped with \u003cstrong\u003ecode\u003c/strong\u003e. \u003c/p\u003e ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:9:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"Indented Code Or indent several lines of code by at least four spaces, as in: // Some comments line 1 of code line 2 of code line 3 of code The rendered output looks like this: // Some comments line 1 of code line 2 of code line 3 of code The HTML looks like this: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:9:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"Block Fenced Code Use “fences” ```to block in multiple lines of code with a language attribute. ```markdown Sample text here... ``` The HTML looks like this: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:9:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"Syntax Highlighting GFMGitHub Flavored Markdown also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code “fence”, ```js, and syntax highlighting will automatically be applied in the rendered HTML. For example, to apply syntax highlighting to JavaScript code: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` The rendered output looks like this: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; Note Syntax highlighting page in Hugo Docs introduces more about syntax highlighting, including highlight shortcode. ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:9:4","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"10 Tables Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. The HTML looks like this: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e Right or center aligned text Adding a colon on the right side of the dashes below any heading will right align text for that column. Adding colons on both sides of the dashes below any heading will center align text for that column. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:10:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"11 Links ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:11:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"Basic Link \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) The rendered output looks like this (hover over the link, there is no tooltip): https://assemble.io contact@revolunet.com Assemble The HTML looks like this: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:11:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"Add a Title [Upstage](https://github.com/upstage/ \"Visit Upstage!\") The rendered output looks like this (hover over the link, there should be a tooltip): Upstage The HTML looks like this: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:11:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"Named Anchors Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) will jump to these sections: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. Note The specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works. ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:11:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"12 Footnotes Footnotes allow you to add notes and references without cluttering the body of the document. When you create a footnote, a superscript number with a link appears where you added the footnote reference. Readers can click the link to jump to the content of the footnote at the bottom of the page. To create a footnote reference, add a caret and an identifier inside brackets ([^1]). Identifiers can be numbers or words, but they can’t contain spaces or tabs. Identifiers only correlate the footnote reference with the footnote itself — in the output, footnotes are numbered sequentially. Add the footnote using another caret and number inside brackets with a colon and text ([^1]: My footnote.). You don’t have to put footnotes at the end of the document. You can put them anywhere except inside other elements like lists, block quotes, and tables. This is a digital footnote[^1]. This is a footnote with \"label\"[^label] [^1]: This is a digital footnote [^label]: This is a footnote with \"label\" This is a digital footnote1. This is a footnote with “label”2 ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:12:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"13 Images Images have a similar syntax to links but include a preceding exclamation point. ![Minion](https://octodex.github.com/images/minion.png) Minion \" Minion or: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") Alt textThe Stormtroopocat \" The Stormtroopocat Like links, images also have a footnote style syntax: ![Alt text][id] Alt textThe Dojocat \" The Dojocat With a reference later in the document defining the URL location: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" Tip LoveIt theme has special shortcode for image, which provides more features. ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:13:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"14 字体大小与颜色 图标 RED APPLE (\u0026#x1F34E;): 🍎 GREEN APPLE (\u0026#x1F34F;): 🍏 BLUE HEART (\u0026#x1F499;): 💙 GREEN HEART (\u0026#x1F49A;): 💚 YELLOW HEART (\u0026#x1F49B;): 💛 PURPLE HEART (\u0026#x1F49C;): 💜 GREEN BOOK (\u0026#x1F4D7;): 📗 BLUE BOOK (\u0026#x1F4D8;): 📘 ORANGE BOOK (\u0026#x1F4D9;): 📙 LARGE RED CIRCLE (\u0026#x1F534;): 🔴 LARGE BLUE CIRCLE (\u0026#x1F535;): 🔵 LARGE ORANGE DIAMOND (\u0026#x1F536;): 🔶 LARGE BLUE DIAMOND (\u0026#x1F537;): 🔷 SMALL ORANGE DIAMOND (\u0026#x1F538;): 🔸 SMALL BLUE DIAMOND (\u0026#x1F539;): 🔹 UP-POINTING RED TRIANGLE (\u0026#x1F53A;): 🔺 DOWN-POINTING RED TRIANGLE (\u0026#x1F53B;): 🔻 UP-POINTING SMALL RED TRIANGLE (\u0026#x1F53C;): 🔼 DOWN-POINTING SMALL RED TRIANGLE (\u0026#x1F53D;): 🔽 ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:14:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"15 单行换行 根据其他Markdown语法介绍，换行直接敲回车是不行的，在有些编译器里是不会换行的。解决办法是换行后敲至少两个空格，或敲两个空格后再回车换行。这个方法或许在其他编译器里可行（笔者没有在其他编译器里实验），但是在简书里却实现不了多行换行，无论敲多少回车都是空一行。 ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:15:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"16 文字间添加空格 添加\u0026#160;或者\u0026nbsp; **注意：**分号是英文状态下的！ This is a digital footnote ↩︎ This is a footnote with “label” ↩︎ ","date":"2019-12-01","objectID":"/posts/Basic-Markdown-Syntax.html/:16:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"/posts/Basic-Markdown-Syntax.html/"},{"categories":["Markdown"],"content":"Guide to emoji usage in Hugo and LoveIt.","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Emoji can be enabled in a Hugo project in a number of ways. The emojify function can be called directly in templates or Inline Shortcodes. To enable emoji globally, set enableEmoji to true in your site configuration and then you can type emoji shorthand codes directly in content files. These begin and end with a colon and include the code of an emoji: Gone camping! :tent: Be back soon. That is so funny! :joy: The rendered output looks like this: Gone camping! ⛺ Be back soon. That is so funny! 😂 The following cheat sheet is a useful reference for emoji shorthand codes. ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:0:0","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Smileys \u0026 Emotion ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:1:0","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Face Smiling icon code icon code 😀 grinning 😃 smiley 😄 smile 😁 grin 😆 laughing satisfied 😅 sweat_smile 🤣 rofl 😂 joy 🙂 slightly_smiling_face 🙃 upside_down_face 😉 wink 😊 blush 😇 innocent ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:1:1","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Face Affection icon code icon code 😍 heart_eyes 😘 kissing_heart 😗 kissing ☺️ relaxed 😚 kissing_closed_eyes 😙 kissing_smiling_eyes ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:1:2","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Face Tongue icon code icon code 😋 yum 😛 stuck_out_tongue 😜 stuck_out_tongue_winking_eye 😝 stuck_out_tongue_closed_eyes 🤑 money_mouth_face ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:1:3","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Face Hand icon code icon code 🤗 hugs 🤔 thinking ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:1:4","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Face Neutral Skeptical icon code icon code 🤐 zipper_mouth_face 😐 neutral_face 😑 expressionless 😶 no_mouth 😏 smirk 😒 unamused 🙄 roll_eyes 😬 grimacing 🤥 lying_face ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:1:5","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Face Sleepy icon code icon code 😌 relieved 😔 pensive 😪 sleepy 🤤 drooling_face 😴 sleeping ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:1:6","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Face Unwell icon code icon code 😷 mask 🤒 face_with_thermometer 🤕 face_with_head_bandage 🤢 nauseated_face 🤧 sneezing_face 😵 dizzy_face ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:1:7","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Face Hat icon code icon code 🤠 cowboy_hat_face ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:1:8","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Face Glasses icon code icon code 😎 sunglasses 🤓 nerd_face ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:1:9","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Face Concerned icon code icon code 😕 confused 😟 worried 🙁 slightly_frowning_face ☹ frowning_face 😮 open_mouth 😯 hushed 😲 astonished 😳 flushed 😦 frowning 😧 anguished 😨 fearful 😰 cold_sweat 😥 disappointed_relieved 😢 cry 😭 sob 😱 scream 😖 confounded 😣 persevere 😞 disappointed 😓 sweat 😩 weary 😫 tired_face ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:1:10","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Face Negative icon code icon code 😤 triumph 😡 pout rage 😠 angry 😈 smiling_imp 👿 imp 💀 skull ☠️ skull_and_crossbones ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:1:11","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Face Costume icon code icon code 💩 hankey poop shit 🤡 clown_face 👹 japanese_ogre 👺 japanese_goblin 👻 ghost 👽 alien 👾 space_invader 🤖 robot ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:1:12","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Cat Face icon code icon code 😺 smiley_cat 😸 smile_cat 😹 joy_cat 😻 heart_eyes_cat 😼 smirk_cat 😽 kissing_cat 🙀 scream_cat 😿 crying_cat_face 😾 pouting_cat ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:1:13","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Monkey Face icon code icon code 🙈 see_no_evil 🙉 hear_no_evil 🙊 speak_no_evil ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:1:14","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Emotion icon code icon code 💋 kiss 💌 love_letter 💘 cupid 💝 gift_heart 💖 sparkling_heart 💗 heartpulse 💓 heartbeat 💞 revolving_hearts 💕 two_hearts 💟 heart_decoration ❣️ heavy_heart_exclamation 💔 broken_heart ❤️ heart 💛 yellow_heart 💚 green_heart 💙 blue_heart 💜 purple_heart 🖤 black_heart 💯 100 💢 anger 💥 boom collision 💫 dizzy 💦 sweat_drops 💨 dash 🕳️ hole 💣 bomb 💬 speech_balloon 👁️‍🗨️ eye_speech_bubble 🗯️ right_anger_bubble 💭 thought_balloon 💤 zzz ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:1:15","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"People \u0026 Body ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:2:0","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Hand Fingers Open icon code icon code 👋 wave 🤚 raised_back_of_hand 🖐️ raised_hand_with_fingers_splayed ✋ hand raised_hand 🖖 vulcan_salute ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:2:1","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Hand Fingers Partial icon code icon code 👌 ok_hand ✌️ v 🤞 crossed_fingers 🤘 metal 🤙 call_me_hand ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:2:2","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Hand Single Finger icon code icon code 👈 point_left 👉 point_right 👆 point_up_2 🖕 fu middle_finger 👇 point_down ☝️ point_up ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:2:3","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Hand Fingers Closed icon code icon code 👍 +1 thumbsup 👎 -1 thumbsdown ✊ fist fist_raised 👊 facepunch fist_oncoming punch 🤛 fist_left 🤜 fist_right ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:2:4","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Hands icon code icon code 👏 clap 🙌 raised_hands 👐 open_hands 🤝 handshake 🙏 pray ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:2:5","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Hand Prop icon code icon code ✍️ writing_hand 💅 nail_care 🤳 selfie ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:2:6","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Body Parts icon code icon code 💪 muscle 👂 ear 👃 nose 👀 eyes 👁️ eye 👅 tongue 👄 lips ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:2:7","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Person icon code icon code 👶 baby 👦 boy 👧 girl :blonde_man: blonde_man person_with_blond_hair 👨 man 👩 woman 👱‍♀️ blonde_woman 👴 older_man 👵 older_woman ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:2:8","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Person Gesture icon code icon code 🙍‍♀️ frowning_woman person_frowning 🙍‍♂️ frowning_man 🙎‍♀️ person_with_pouting_face pouting_woman 🙎‍♂️ pouting_man 🙅‍♀️ ng_woman no_good no_good_woman 🙅‍♂️ ng_man no_good_man 🙆‍♀️ ok_woman 🙆‍♂️ ok_man 💁‍♀️ information_desk_person sassy_woman tipping_hand_woman 💁‍♂️ sassy_man tipping_hand_man 🙋‍♀️ raising_hand raising_hand_woman 🙋‍♂️ raising_hand_man 🙇‍♂️ bow bowing_man 🙇‍♀️ bowing_woman 🤦‍♂️ man_facepalming 🤦‍♀️ woman_facepalming 🤷‍♂️ man_shrugging 🤷‍♀️ woman_shrugging ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:2:9","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Person Role icon code icon code 👨‍⚕️ man_health_worker 👩‍⚕️ woman_health_worker 👨‍🎓 man_student 👩‍🎓 woman_student 👨‍🏫 man_teacher 👩‍🏫 woman_teacher 👨‍⚖️ man_judge 👩‍⚖️ woman_judge 👨‍🌾 man_farmer 👩‍🌾 woman_farmer 👨‍🍳 man_cook 👩‍🍳 woman_cook 👨‍🔧 man_mechanic 👩‍🔧 woman_mechanic 👨‍🏭 man_factory_worker 👩‍🏭 woman_factory_worker 👨‍💼 man_office_worker 👩‍💼 woman_office_worker 👨‍🔬 man_scientist 👩‍🔬 woman_scientist 👨‍💻 man_technologist 👩‍💻 woman_technologist 👨‍🎤 man_singer 👩‍🎤 woman_singer 👨‍🎨 man_artist 👩‍🎨 woman_artist 👨‍✈️ man_pilot 👩‍✈️ woman_pilot 👨‍🚀 man_astronaut 👩‍🚀 woman_astronaut 👨‍🚒 man_firefighter 👩‍🚒 woman_firefighter 👮‍♂️ cop policeman 👮‍♀️ policewoman 🕵 detective male_detective 🕵️‍♀️ female_detective 💂‍♂️ guardsman 💂‍♀️ guardswoman 👷‍♂️ construction_worker construction_worker_man 👷‍♀️ construction_worker_woman 🤴 prince 👸 princess 👳‍♂️ man_with_turban 👳‍♀️ woman_with_turban 👲 man_with_gua_pi_mao 🤵‍♂️ man_in_tuxedo 👰 bride_with_veil 🤰 pregnant_woman ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:2:10","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Person Fantasy icon code icon code 👼 angel 🎅 santa 🤶 mrs_claus ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:2:11","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Person Activity icon code icon code 💆‍♀️ massage massage_woman 💆‍♂️ massage_man 💇‍♀️ haircut haircut_woman 💇‍♂️ haircut_man 🚶‍♂️ walking walking_man 🚶‍♀️ walking_woman 🏃‍♂️ runner running running_man 🏃‍♀️ running_woman 💃 dancer 🕺 man_dancing 🕴️ business_suit_levitating 👯‍♀️ dancers dancing_women 👯‍♂️ dancing_men ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:2:12","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Person Sport icon code icon code 🤺 person_fencing 🏇 horse_racing ⛷️ skier 🏂 snowboarder 🏌️‍♂️ golfing_man 🏌️‍♀️ golfing_woman 🏄‍♂️ surfer surfing_man 🏄‍♀️ surfing_woman 🚣‍♂️ rowboat rowing_man 🚣‍♀️ rowing_woman 🏊‍♂️ swimmer swimming_man 🏊‍♀️ swimming_woman ⛹️‍♂️ basketball_man ⛹️‍♀️ basketball_woman 🏋️‍♂️ weight_lifting_man 🏋️‍♀️ weight_lifting_woman 🚴‍♂️ bicyclist biking_man 🚴‍♀️ biking_woman 🚵‍♂️ mountain_bicyclist mountain_biking_man 🚵‍♀️ mountain_biking_woman 🤸‍♂️ man_cartwheeling 🤸‍♀️ woman_cartwheeling 🤼‍♂️ men_wrestling 🤼‍♀️ women_wrestling 🤽‍♂️ man_playing_water_polo 🤽‍♀️ woman_playing_water_polo 🤾‍♂️ man_playing_handball 🤾‍♀️ woman_playing_handball 🤹‍♂️ man_juggling 🤹‍♀️ woman_juggling ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:2:13","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Person Resting icon code icon code 🛀 bath 🛌 sleeping_bed ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:2:14","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Family icon code icon code 👭 two_women_holding_hands 👫 couple 👬 two_men_holding_hands 👩‍❤️‍💋‍👨 couplekiss_man_woman 👨‍❤️‍💋‍👨 couplekiss_man_man 👩‍❤️‍💋‍👩 couplekiss_woman_woman 👩‍❤️‍👨 couple_with_heart couple_with_heart_woman_man 👨‍❤️‍👨 couple_with_heart_man_man 👩‍❤️‍👩 couple_with_heart_woman_woman 👨‍👩‍👦 family family_man_woman_boy 👨‍👩‍👧 family_man_woman_girl 👨‍👩‍👧‍👦 family_man_woman_girl_boy 👨‍👩‍👦‍👦 family_man_woman_boy_boy 👨‍👩‍👧‍👧 family_man_woman_girl_girl 👨‍👨‍👦 family_man_man_boy 👨‍👨‍👧 family_man_man_girl 👨‍👨‍👧‍👦 family_man_man_girl_boy 👨‍👨‍👦‍👦 family_man_man_boy_boy 👨‍👨‍👧‍👧 family_man_man_girl_girl 👩‍👩‍👦 family_woman_woman_boy 👩‍👩‍👧 family_woman_woman_girl 👩‍👩‍👧‍👦 family_woman_woman_girl_boy 👩‍👩‍👦‍👦 family_woman_woman_boy_boy 👩‍👩‍👧‍👧 family_woman_woman_girl_girl 👨‍👦 family_man_boy 👨‍👦‍👦 family_man_boy_boy 👨‍👧 family_man_girl 👨‍👧‍👦 family_man_girl_boy 👨‍👧‍👧 family_man_girl_girl 👩‍👦 family_woman_boy 👩‍👦‍👦 family_woman_boy_boy 👩‍👧 family_woman_girl 👩‍👧‍👦 family_woman_girl_boy 👩‍👧‍👧 family_woman_girl_girl ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:2:15","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Person Symbol icon code icon code 🗣 speaking_head 👤 bust_in_silhouette 👥 busts_in_silhouette 👣 footprints ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:2:16","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Animals \u0026 Nature ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:3:0","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Animal Mammal icon code icon code 🐵 monkey_face 🐒 monkey 🦍 gorilla 🐶 dog 🐕 dog2 🐩 poodle 🐺 wolf 🦊 fox_face 🐱 cat 🐈 cat2 🦁 lion 🐯 tiger 🐅 tiger2 🐆 leopard 🐴 horse 🐎 racehorse 🦄 unicorn 🦌 deer 🐮 cow 🐂 ox 🐃 water_buffalo 🐄 cow2 🐷 pig 🐖 pig2 🐗 boar 🐽 pig_nose 🐏 ram 🐑 sheep 🐐 goat 🐪 dromedary_camel 🐫 camel 🐘 elephant 🦏 rhinoceros 🐭 mouse 🐁 mouse2 🐀 rat 🐹 hamster 🐰 rabbit 🐇 rabbit2 🐿️ chipmunk 🦇 bat 🐻 bear 🐨 koala 🐼 panda_face 🐾 feet paw_prints ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:3:1","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Animal Bird icon code icon code 🦃 turkey 🐔 chicken 🐓 rooster 🐣 hatching_chick 🐤 baby_chick 🐥 hatched_chick 🐦 bird 🐧 penguin 🕊 dove 🦅 eagle 🦆 duck 🦉 owl ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:3:2","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Animal Amphibian icon code icon code 🐸 frog ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:3:3","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Animal Reptile icon code icon code 🐊 crocodile 🐢 turtle 🦎 lizard 🐍 snake 🐲 dragon_face 🐉 dragon ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:3:4","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Animal Marine icon code icon code 🐳 whale 🐋 whale2 🐬 dolphin flipper 🐟 fish 🐠 tropical_fish 🐡 blowfish 🦈 shark 🐙 octopus 🐚 shell ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:3:5","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Animal Bug icon code icon code 🐌 snail 🦋 butterfly 🐛 bug 🐜 ant 🐝 bee honeybee 🪲 beetle 🕷️ spider 🕸️ spider_web 🦂 scorpion ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:3:6","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Plant Flower icon code icon code 💐 bouquet 🌸 cherry_blossom 💮 white_flower 🏵️ rosette 🌹 rose 🥀 wilted_flower 🌺 hibiscus 🌻 sunflower 🌼 blossom 🌷 tulip ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:3:7","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Plant Other icon code icon code 🌱 seedling 🌲 evergreen_tree 🌳 deciduous_tree 🌴 palm_tree 🌵 cactus 🌾 ear_of_rice 🌿 herb ☘️ shamrock 🍀 four_leaf_clover 🍁 maple_leaf 🍂 fallen_leaf 🍃 leaves ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:3:8","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Food \u0026 Drink ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:4:0","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Food Fruit icon code icon code 🍇 grapes 🍈 melon 🍉 watermelon 🍊 mandarin orange tangerine 🍋 lemon 🍌 banana 🍍 pineapple 🍎 apple 🍏 green_apple 🍐 pear 🍑 peach 🍒 cherries 🍓 strawberry 🥝 kiwi_fruit 🍅 tomato ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:4:1","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Food Vegetable icon code icon code 🥑 avocado 🍆 eggplant 🥔 potato 🥕 carrot 🌽 corn 🌶️ hot_pepper 🥒 cucumber 🍄 mushroom 🥜 peanuts 🌰 chestnut ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:4:2","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Food Prepared icon code icon code 🍞 bread 🥐 croissant 🥖 baguette_bread 🥞 pancakes 🧀 cheese 🍖 meat_on_bone 🍗 poultry_leg 🥓 bacon 🍔 hamburger 🍟 fries 🍕 pizza 🌭 hotdog 🌮 taco 🌯 burrito 🥙 stuffed_flatbread 🥚 egg 🍳 fried_egg 🥘 shallow_pan_of_food 🍲 stew 🥗 green_salad 🍿 popcorn ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:4:3","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Food Asian icon code icon code 🍱 bento 🍘 rice_cracker 🍙 rice_ball 🍚 rice 🍛 curry 🍜 ramen 🍝 spaghetti 🍠 sweet_potato 🍢 oden 🍣 sushi 🍤 fried_shrimp 🍥 fish_cake 🍡 dango ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:4:4","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Food Marine icon code icon code 🦀 crab 🦐 shrimp 🦑 squid ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:4:5","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Food Sweet icon code icon code 🍦 icecream 🍧 shaved_ice 🍨 ice_cream 🍩 doughnut 🍪 cookie 🎂 birthday 🍰 cake 🍫 chocolate_bar 🍬 candy 🍭 lollipop 🍮 custard 🍯 honey_pot ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:4:6","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Drink icon code icon code 🍼 baby_bottle 🥛 milk_glass ☕ coffee 🍵 tea 🍶 sake 🍾 champagne 🍷 wine_glass 🍸 cocktail 🍹 tropical_drink 🍺 beer 🍻 beers 🥂 clinking_glasses 🥃 tumbler_glass ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:4:7","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Dishware icon code icon code 🍽️ plate_with_cutlery 🍴 fork_and_knife 🥄 spoon 🔪 hocho knife 🏺 amphora ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:4:8","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Travel \u0026 Places ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:5:0","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Place Map icon code icon code 🌍 earth_africa 🌎 earth_americas 🌏 earth_asia 🌐 globe_with_meridians 🗺️ world_map 🗾 japan ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:5:1","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Place Geographic icon code icon code 🏔 mountain_snow ⛰️ mountain 🌋 volcano 🗻 mount_fuji 🏕️ camping ⛱ beach_umbrella 🏜️ desert 🏝️ desert_island 🏞️ national_park ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:5:2","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Place Building icon code icon code 🏟️ stadium 🏛️ classical_building 🏗️ building_construction 🏘 houses 🏚 derelict_house 🏠 house 🏡 house_with_garden 🏢 office 🏣 post_office 🏤 european_post_office 🏥 hospital 🏦 bank 🏨 hotel 🏩 love_hotel 🏪 convenience_store 🏫 school 🏬 department_store 🏭 factory 🏯 japanese_castle 🏰 european_castle 💒 wedding 🗼 tokyo_tower 🗽 statue_of_liberty ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:5:3","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Place Religious icon code icon code ⛪ church 🕌 mosque 🕍 synagogue ⛩️ shinto_shrine 🕋 kaaba ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:5:4","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Place Other icon code icon code ⛲ fountain ⛺ tent 🌁 foggy 🌃 night_with_stars 🏙️ cityscape 🌄 sunrise_over_mountains 🌅 sunrise 🌆 city_sunset 🌇 city_sunrise 🌉 bridge_at_night ♨️ hotsprings 🎠 carousel_horse 🎡 ferris_wheel 🎢 roller_coaster 💈 barber 🎪 circus_tent ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:5:5","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Transport Ground icon code icon code 🚂 steam_locomotive 🚃 railway_car 🚄 bullettrain_side 🚅 bullettrain_front 🚆 train2 🚇 metro 🚈 light_rail 🚉 station 🚊 tram 🚝 monorail 🚞 mountain_railway 🚋 train 🚌 bus 🚍 oncoming_bus 🚎 trolleybus 🚐 minibus 🚑 ambulance 🚒 fire_engine 🚓 police_car 🚔 oncoming_police_car 🚕 taxi 🚖 oncoming_taxi 🚗 car red_car 🚘 oncoming_automobile 🚙 blue_car 🚚 truck 🚛 articulated_lorry 🚜 tractor 🏎️ racing_car 🏍 motorcycle 🛵 motor_scooter 🚲 bike 🛴 kick_scooter 🚏 busstop 🛣️ motorway 🛤️ railway_track 🛢️ oil_drum ⛽ fuelpump 🚨 rotating_light 🚥 traffic_light 🚦 vertical_traffic_light 🛑 stop_sign 🚧 construction ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:5:6","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Transport Water icon code icon code ⚓ anchor ⛵ boat sailboat 🛶 canoe 🚤 speedboat 🛳️ passenger_ship ⛴️ ferry 🛥️ motor_boat 🚢 ship ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:5:7","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Transport Air icon code icon code ✈️ airplane 🛩️ small_airplane 🛫 flight_departure 🛬 flight_arrival 💺 seat 🚁 helicopter 🚟 suspension_railway 🚠 mountain_cableway 🚡 aerial_tramway 🛰️ artificial_satellite 🚀 rocket ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:5:8","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Hotel icon code icon code 🛎️ bellhop_bell ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:5:9","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Time icon code icon code ⌛ hourglass ⏳ hourglass_flowing_sand ⌚ watch ⏰ alarm_clock ⏱️ stopwatch ⏲️ timer_clock 🕰️ mantelpiece_clock 🕛 clock12 🕧 clock1230 🕐 clock1 🕜 clock130 🕑 clock2 🕝 clock230 🕒 clock3 🕞 clock330 🕓 clock4 🕟 clock430 🕔 clock5 🕠 clock530 🕕 clock6 🕡 clock630 🕖 clock7 🕢 clock730 🕗 clock8 🕣 clock830 🕘 clock9 🕤 clock930 🕙 clock10 🕥 clock1030 🕚 clock11 🕦 clock1130 ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:5:10","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Sky \u0026 Weather icon code icon code 🌑 new_moon 🌒 waxing_crescent_moon 🌓 first_quarter_moon 🌔 moon waxing_gibbous_moon 🌕 full_moon 🌖 waning_gibbous_moon 🌗 last_quarter_moon 🌘 waning_crescent_moon 🌙 crescent_moon 🌚 new_moon_with_face 🌛 first_quarter_moon_with_face 🌜 last_quarter_moon_with_face 🌡️ thermometer ☀️ sunny 🌝 full_moon_with_face 🌞 sun_with_face ⭐ star 🌟 star2 🌠 stars 🌌 milky_way ☁️ cloud ⛅ partly_sunny ⛈ cloud_with_lightning_and_rain 🌤 sun_behind_small_cloud 🌥 sun_behind_large_cloud 🌦 sun_behind_rain_cloud 🌧 cloud_with_rain 🌨 cloud_with_snow 🌩 cloud_with_lightning 🌪️ tornado 🌫️ fog 🌬 wind_face 🌀 cyclone 🌈 rainbow 🌂 closed_umbrella ☂️ open_umbrella ☂️ umbrella ⛱️ parasol_on_ground ⚡ zap ❄️ snowflake ☃️ snowman_with_snow ☃️ snowman ☄️ comet 🔥 fire 💧 droplet 🌊 ocean ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:5:11","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Activities ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:6:0","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Event icon code icon code 🎃 jack_o_lantern 🎄 christmas_tree 🎆 fireworks 🎇 sparkler ✨ sparkles 🎈 balloon 🎉 tada 🎊 confetti_ball 🎋 tanabata_tree 🎍 bamboo 🎎 dolls 🎏 flags 🎐 wind_chime 🎑 rice_scene 🎀 ribbon 🎁 gift 🎗️ reminder_ribbon 🎟 tickets 🎫 ticket ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:6:1","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Award Medal icon code icon code 🎖️ medal_military 🏆 trophy 🏅 medal_sports 🥇 1st_place_medal 🥈 2nd_place_medal 🥉 3rd_place_medal ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:6:2","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Sport icon code icon code ⚽ soccer ⚾ baseball 🏀 basketball 🏐 volleyball 🏈 football 🏉 rugby_football 🎾 tennis 🎳 bowling 🦗 cricket 🏑 field_hockey 🏒 ice_hockey 🏓 ping_pong 🏸 badminton 🥊 boxing_glove 🥋 martial_arts_uniform 🥅 goal_net ⛳ golf ⛸️ ice_skate 🎣 fishing_pole_and_fish 🎽 running_shirt_with_sash 🎿 ski ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:6:3","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Game icon code icon code 🎯 dart 🎱 8ball 🔮 crystal_ball 🎮 video_game 🕹️ joystick 🎰 slot_machine 🎲 game_die ♠️ spades ♥️ hearts ♦️ diamonds ♣️ clubs 🃏 black_joker 🀄 mahjong 🎴 flower_playing_cards ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:6:4","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Arts \u0026 Crafts icon code icon code 🎭 performing_arts 🖼 framed_picture 🎨 art ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:6:5","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Objects ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:7:0","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Clothing icon code icon code 👓 eyeglasses 🕶️ dark_sunglasses 👔 necktie 👕 shirt tshirt 👖 jeans 👗 dress 👘 kimono 👙 bikini 👚 womans_clothes 👛 purse 👜 handbag 👝 pouch 🛍️ shopping 🎒 school_satchel 👞 mans_shoe shoe 👟 athletic_shoe 👠 high_heel 👡 sandal 👢 boot 👑 crown 👒 womans_hat 🎩 tophat 🎓 mortar_board ⛑️ rescue_worker_helmet 📿 prayer_beads 💄 lipstick 💍 ring 💎 gem ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:7:1","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Sound icon code icon code 🔇 mute 🔈 speaker 🔉 sound 🔊 loud_sound 📢 loudspeaker 📣 mega 📯 postal_horn 🔔 bell 🔕 no_bell ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:7:2","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Music icon code icon code 🎼 musical_score 🎵 musical_note 🎶 notes 🎙️ studio_microphone 🎚️ level_slider 🎛️ control_knobs 🎤 microphone 🎧 headphones 📻 radio ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:7:3","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Musical Instrument icon code icon code 🎷 saxophone 🎸 guitar 🎹 musical_keyboard 🎺 trumpet 🎻 violin 🥁 drum ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:7:4","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Phone icon code icon code 📱 iphone 📲 calling ☎️ phone telephone 📞 telephone_receiver 📟 pager 📠 fax ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:7:5","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Computer icon code icon code 🔋 battery 🔌 electric_plug 💻 computer 🖥️ desktop_computer 🖨️ printer ⌨️ keyboard 🖱 computer_mouse 🖲️ trackball 💽 minidisc 💾 floppy_disk 💿 cd 📀 dvd ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:7:6","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Light \u0026 Video icon code icon code 🎥 movie_camera 🎞️ film_strip 📽️ film_projector 🎬 clapper 📺 tv 📷 camera 📸 camera_flash 📹 video_camera 📼 vhs 🔍 mag 🔎 mag_right 🕯️ candle 💡 bulb 🔦 flashlight 🏮 izakaya_lantern lantern ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:7:7","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Book Paper icon code icon code 📔 notebook_with_decorative_cover 📕 closed_book 📖 book open_book 📗 green_book 📘 blue_book 📙 orange_book 📚 books 📓 notebook 📒 ledger 📃 page_with_curl 📜 scroll 📄 page_facing_up 📰 newspaper 🗞️ newspaper_roll 📑 bookmark_tabs 🔖 bookmark 🏷️ label ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:7:8","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Money icon code icon code 💰 moneybag 💴 yen 💵 dollar 💶 euro 💷 pound 💸 money_with_wings 💳 credit_card 💹 chart ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:7:9","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Mail icon code icon code ✉️ email envelope 📧 📧 📨 incoming_envelope 📩 envelope_with_arrow 📤 outbox_tray 📥 inbox_tray 📦 package 📫 mailbox 📪 mailbox_closed 📬 mailbox_with_mail 📭 mailbox_with_no_mail 📮 postbox 🗳 ballot_box ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:7:10","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Writing icon code icon code ✏️ pencil2 ✒️ black_nib 🖋 fountain_pen 🖊 pen 🖌 paintbrush 🖍 crayon 📝 memo pencil ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:7:11","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Office icon code icon code 💼 briefcase 📁 file_folder 📂 open_file_folder 🗂️ card_index_dividers 📅 date 📆 calendar 🗒 spiral_notepad 🗓 spiral_calendar 📇 card_index 📈 chart_with_upwards_trend 📉 chart_with_downwards_trend 📊 bar_chart 📋 clipboard 📌 pushpin 📍 round_pushpin 📎 paperclip 🖇 paperclips 📏 straight_ruler 📐 triangular_ruler ✂️ scissors 🗃️ card_file_box 🗄️ file_cabinet 🗑️ wastebasket ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:7:12","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Lock icon code icon code 🔒 lock 🔓 unlock 🔏 lock_with_ink_pen 🔐 closed_lock_with_key 🔑 key 🗝️ old_key ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:7:13","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Tool icon code icon code 🔨 hammer ⛏️ pick ⚒️ hammer_and_pick 🛠️ hammer_and_wrench 🗡 dagger ⚔️ crossed_swords 🔫 gun 🏹 bow_and_arrow 🛡️ shield 🔧 wrench 🔩 nut_and_bolt ⚙️ gear 🗜 clamp ⚖ balance_scale 🔗 link ⛓️ chains ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:7:14","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Science icon code icon code ⚗️ alembic 🔬 microscope 🔭 telescope 🛰️ satellite ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:7:15","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Medical icon code icon code 💉 syringe 💊 pill ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:7:16","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Household icon code icon code 🚪 door 🛏️ bed 🛋️ couch_and_lamp 🚽 toilet 🚿 shower 🛁 bathtub 🛒 shopping_cart ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:7:17","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Other Object icon code icon code 🚬 smoking ⚰️ coffin ⚱️ funeral_urn 🗿 moyai ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:7:18","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Symbols ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:8:0","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Transport Sign icon code icon code 🏧 atm 🚮 put_litter_in_its_place 🚰 potable_water ♿ wheelchair 🚹 mens 🚺 womens 🚻 restroom 🚼 baby_symbol 🚾 wc 🛂 passport_control 🛃 customs 🛄 baggage_claim 🛅 left_luggage ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:8:1","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Warning icon code icon code ⚠️ warning 🚸 children_crossing ⛔ no_entry 🚫 no_entry_sign 🚳 no_bicycles 🚭 no_smoking 🚯 do_not_litter 🚱 🚱 🚷 no_pedestrians 📵 no_mobile_phones 🔞 underage ☢ radioactive ☣ biohazard ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:8:2","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Arrow icon code icon code ⬆️ arrow_up ↗️ arrow_upper_right ➡️ arrow_right ↘️ arrow_lower_right ⬇️ arrow_down ↙️ arrow_lower_left ⬅️ arrow_left ↖️ arrow_upper_left ↕️ arrow_up_down ↔️ left_right_arrow ↩️ leftwards_arrow_with_hook ↪️ arrow_right_hook ⤴️ arrow_heading_up ⤵️ arrow_heading_down 🔃 arrows_clockwise 🔄 arrows_counterclockwise 🔙 back 🔚 end 🔛 on 🔜 soon 🔝 top ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:8:3","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Religion icon code icon code 🛐 place_of_worship ⚛️ atom_symbol 🕉 om ✡️ star_of_david ☸️ wheel_of_dharma ☯️ yin_yang ✝️ latin_cross ☦️ orthodox_cross ☪️ star_and_crescent ☮️ peace_symbol 🕎 menorah 🔯 six_pointed_star ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:8:4","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Zodiac icon code icon code ♈ aries ♉ taurus ♊ gemini ♋ cancer ♌ leo ♍ virgo ♎ libra ♏ scorpius ♐ sagittarius ♑ capricorn ♒ aquarius ♓ pisces ⛎ ophiuchus ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:8:5","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Av Symbol icon code icon code 🔀 twisted_rightwards_arrows 🔁 repeat 🔂 repeat_one ▶️ arrow_forward ⏩ fast_forward ⏭ next_track_button ⏯ play_or_pause_button ◀️ arrow_backward ⏪ rewind ⏮️ previous_track_button 🔼 arrow_up_small ⏫ arrow_double_up 🔽 arrow_down_small ⏬ arrow_double_down ⏸ pause_button ⏹ stop_button ⏺ record_button 🎦 cinema 🔅 low_brightness 🔆 high_brightness 📶 signal_strength 📳 vibration_mode 📴 mobile_phone_off ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:8:6","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Math icon code icon code ✖️ heavy_multiplication_x ➕ heavy_plus_sign ➖ heavy_minus_sign ➗ heavy_division_sign ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:8:7","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Punctuation icon code icon code ‼️ bangbang ⁉️ interrobang ❓ question ❔ grey_question ❕ grey_exclamation ❗ exclamation heavy_exclamation_mark 〰️ wavy_dash ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:8:8","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Currency icon code icon code 💱 currency_exchange 💲 heavy_dollar_sign ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:8:9","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Keycap icon code icon code #️⃣ hash *️⃣ asterisk 0️⃣ zero 1️⃣ one 2️⃣ two 3️⃣ three 4️⃣ four 5️⃣ five 6️⃣ six 7️⃣ seven 8️⃣ eight 9️⃣ nine 🔟 keycap_ten ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:8:10","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Alphabet icon code icon code 🔠 capital_abcd 🔡 abcd 🔢 1234 🔣 symbols 🔤 abc 🅰️ a 🆎 ab 🅱️ b 🆑 cl 🆒 cool 🆓 free ℹ️ information_source 🆔 id ⓜ️ m 🆕 new 🆖 ng 🅾️ o2 🆗 ok 🅿️ parking 🆘 sos 🆙 up 🆚 vs 🈁 koko 🈂️ sa 🈷️ u6708 🈶 u6709 🈯 u6307 🉐 ideograph_advantage 🈹 u5272 🈚 u7121 🈲 u7981 🉑 accept 🈸 u7533 🈴 u5408 🈳 u7a7a ㊗️ congratulations ㊙️ secret 🈺 u55b6 🈵 u6e80 ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:8:11","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Geometric icon code icon code 🔴 red_circle 🔵 large_blue_circle ⚫ black_circle ⚪ white_circle ⬛ black_large_square ⬜ white_large_square ◼️ black_medium_square ◻️ white_medium_square ◾ black_medium_small_square ◽ white_medium_small_square ▪️ black_small_square ▫️ white_small_square 🔶 large_orange_diamond 🔷 large_blue_diamond 🔸 small_orange_diamond 🔹 small_blue_diamond 🔺 small_red_triangle 🔻 small_red_triangle_down 💠 diamond_shape_with_a_dot_inside 🔘 radio_button 🔳 white_square_button 🔲 black_square_button ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:8:12","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Other Symbol icon code icon code ♻️ recycle ⚜️ fleur_de_lis 🔱 trident 📛 name_badge 🔰 beginner ⭕ o ✅ white_check_mark ☑️ ballot_box_with_check ✔️ heavy_check_mark ❌ x ❎ negative_squared_cross_mark ➰ curly_loop ➿ loop 〽️ part_alternation_mark ✳️ eight_spoked_asterisk ✴️ eight_pointed_black_star ❇️ sparkle ©️ copyright ®️ registered ™️ tm ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:8:13","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Flags ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:9:0","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Common Flags icon code icon code 🏁 checkered_flag 🚩 triangular_flag_on_post 🎌 crossed_flags 🏴 black_flag 🏳 white_flag 🏳️‍🌈 rainbow_flag ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:9:1","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["Markdown"],"content":"Country and Region Flags icon code icon code 🇦🇩 andorra 🇦🇪 united_arab_emirates 🇦🇫 afghanistan 🇦🇬 antigua_barbuda 🇦🇮 anguilla 🇦🇱 albania 🇦🇲 armenia 🇦🇴 angola 🇦🇶 antarctica 🇦🇷 argentina 🇦🇸 american_samoa 🇦🇹 austria 🇦🇺 australia 🇦🇼 aruba 🇦🇽 aland_islands 🇦🇿 azerbaijan 🇧🇦 bosnia_herzegovina 🇧🇧 barbados 🇧🇩 bangladesh 🇧🇪 belgium 🇧🇫 burkina_faso 🇧🇬 bulgaria 🇧🇭 bahrain 🇧🇮 burundi 🇧🇯 benin 🇧🇱 st_barthelemy 🇧🇲 bermuda 🇧🇳 brunei 🇧🇴 bolivia 🇧🇶 caribbean_netherlands 🇧🇷 brazil 🇧🇸 bahamas 🇧🇹 bhutan 🇧🇼 botswana 🇧🇾 belarus 🇧🇿 belize 🇨🇦 canada 🇨🇨 cocos_islands 🇨🇩 congo_kinshasa 🇨🇫 central_african_republic 🇨🇬 congo_brazzaville 🇨🇭 switzerland 🇨🇮 cote_divoire 🇨🇰 cook_islands 🇨🇱 chile 🇨🇲 cameroon 🇨🇳 cn 🇨🇴 colombia 🇨🇷 costa_rica 🇨🇺 cuba 🇨🇻 cape_verde 🇨🇼 curacao 🇨🇽 christmas_island 🇨🇾 cyprus 🇨🇿 czech_republic 🇩🇪 de 🇩🇯 djibouti 🇩🇰 denmark 🇩🇲 dominica 🇩🇴 dominican_republic 🇩🇿 algeria 🇪🇨 ecuador 🇪🇪 estonia 🇪🇬 egypt 🇪🇭 western_sahara 🇪🇷 eritrea 🇪🇸 es 🇪🇹 ethiopia 🇪🇺 eu european_union 🇫🇮 finland 🇫🇯 fiji 🇫🇰 falkland_islands 🇫🇲 micronesia 🇫🇴 faroe_islands 🇫🇷 fr 🇬🇦 gabon 🇬🇧 gb uk 🇬🇩 grenada 🇬🇪 georgia 🇬🇫 french_guiana 🇬🇬 guernsey 🇬🇭 ghana 🇬🇮 gibraltar 🇬🇱 greenland 🇬🇲 gambia 🇬🇳 guinea 🇬🇵 guadeloupe 🇬🇶 equatorial_guinea 🇬🇷 greece 🇬🇸 south_georgia_south_sandwich_islands 🇬🇹 guatemala 🇬🇺 guam 🇬🇼 guinea_bissau 🇬🇾 guyana 🇭🇰 hong_kong 🇭🇳 honduras 🇭🇷 croatia 🇭🇹 haiti 🇭🇺 hungary 🇮🇨 canary_islands 🇮🇩 indonesia 🇮🇪 ireland 🇮🇱 israel 🇮🇲 isle_of_man 🇮🇳 india 🇮🇴 british_indian_ocean_territory 🇮🇶 iraq 🇮🇷 iran 🇮🇸 iceland 🇮🇹 it 🇯🇪 jersey 🇯🇲 jamaica 🇯🇴 jordan 🇯🇵 jp 🇰🇪 kenya 🇰🇬 kyrgyzstan 🇰🇭 cambodia 🇰🇮 kiribati 🇰🇲 comoros 🇰🇳 st_kitts_nevis 🇰🇵 north_korea 🇰🇷 kr 🇰🇼 kuwait 🇰🇾 cayman_islands 🇰🇿 kazakhstan 🇱🇦 laos 🇱🇧 lebanon 🇱🇨 st_lucia 🇱🇮 liechtenstein 🇱🇰 sri_lanka 🇱🇷 liberia 🇱🇸 lesotho 🇱🇹 lithuania 🇱🇺 luxembourg 🇱🇻 latvia 🇱🇾 libya 🇲🇦 morocco 🇲🇨 monaco 🇲🇩 moldova 🇲🇪 montenegro 🇲🇬 madagascar 🇲🇭 marshall_islands 🇲🇰 macedonia 🇲🇱 mali 🇲🇲 myanmar 🇲🇳 mongolia 🇲🇴 macau 🇲🇵 northern_mariana_islands 🇲🇶 martinique 🇲🇷 mauritania 🇲🇸 montserrat 🇲🇹 malta 🇲🇺 mauritius 🇲🇻 maldives 🇲🇼 malawi 🇲🇽 mexico 🇲🇾 malaysia 🇲🇿 mozambique 🇳🇦 namibia 🇳🇨 new_caledonia 🇳🇪 niger 🇳🇫 norfolk_island 🇳🇬 nigeria 🇳🇮 nicaragua 🇳🇱 netherlands 🇳🇴 norway 🇳🇵 nepal 🇳🇷 nauru 🇳🇺 niue 🇳🇿 new_zealand 🇴🇲 oman 🇵🇦 panama 🇵🇪 peru 🇵🇫 french_polynesia 🇵🇬 papua_new_guinea 🇵🇭 philippines 🇵🇰 pakistan 🇵🇱 poland 🇵🇲 st_pierre_miquelon 🇵🇳 pitcairn_islands 🇵🇷 puerto_rico 🇵🇸 palestinian_territories 🇵🇹 portugal 🇵🇼 palau 🇵🇾 paraguay 🇶🇦 qatar 🇷🇪 reunion 🇷🇴 romania 🇷🇸 serbia 🇷🇺 ru 🇷🇼 rwanda 🇸🇦 saudi_arabia 🇸🇧 solomon_islands 🇸🇨 seychelles 🇸🇩 sudan 🇸🇪 sweden 🇸🇬 singapore 🇸🇭 st_helena 🇸🇮 slovenia 🇸🇰 slovakia 🇸🇱 sierra_leone 🇸🇲 san_marino 🇸🇳 senegal 🇸🇴 somalia 🇸🇷 suriname 🇸🇸 south_sudan 🇸🇹 sao_tome_principe 🇸🇻 el_salvador 🇸🇽 sint_maarten 🇸🇾 syria 🇸🇿 swaziland 🇹🇨 turks_caicos_islands 🇹🇩 chad 🇹🇫 french_southern_territories 🇹🇬 togo 🇹🇭 thailand 🇹🇯 tajikistan 🇹🇰 tokelau 🇹🇱 timor_leste 🇹🇲 turkmenistan 🇹🇳 tunisia 🇹🇴 tonga 🇹🇷 tr 🇹🇹 trinidad_tobago 🇹🇻 tuvalu 🇹🇼 taiwan 🇹🇿 tanzania 🇺🇦 ukraine 🇺🇬 uganda 🇺🇸 us 🇺🇾 uruguay 🇺🇿 uzbekistan 🇻🇦 vatican_city 🇻🇨 st_vincent_grenadines 🇻🇪 venezuela 🇻🇬 british_virgin_islands 🇻🇮 us_virgin_islands 🇻🇳 vietnam 🇻🇺 vanuatu 🇼🇫 wallis_futuna 🇼🇸 samoa 🇽🇰 kosovo 🇾🇪 yemen 🇾🇹 mayotte 🇿🇦 south_africa 🇿🇲 zambia 🇿🇼 zimbabwe ","date":"2019-10-01","objectID":"/posts/Emoji-Support.html/:9:2","tags":["emoji"],"title":"Emoji Support","uri":"/posts/Emoji-Support.html/"},{"categories":["ict"],"content":"Agilent3070","date":"2021-01-29","objectID":"/posts/agilent-ict.html/","tags":["ict","agilent"],"title":"agilent-ict","uri":"/posts/agilent-ict.html/"},{"categories":["ict"],"content":"Getting started ","date":"2021-01-29","objectID":"/posts/agilent-ict.html/:1:0","tags":["ict","agilent"],"title":"agilent-ict","uri":"/posts/agilent-ict.html/"},{"categories":["ict"],"content":"基本硬件构造 ","date":"2021-01-29","objectID":"/posts/agilent-ict.html/:2:0","tags":["ict","agilent"],"title":"agilent-ict","uri":"/posts/agilent-ict.html/"},{"categories":["ict"],"content":"一.概述  HP3070 主要用于在线测试，来测定 PCB 板上的模拟和数字元件的好坏，硬件方面主要包括 Testhead ,Controlleer, Support bay,Vacuum control 等等。 结构入下图：图，HP3070结构图 \" 图，HP3070结构图 一. 测 试 头(Test head): 完 成 模 拟 ,数 字 测 试  整 个 Test head 可 划 分 为 2 个 Bank,4 个 Module. 目前配置: 1 个 Bank,即 Bank2, Module2,3 二. 每 个 Module 满 配 置 有 11 块 板 卡 :SLOT1: ASRU card ; SLOT6: Control card ; Others: Pin card，如下图所示： 测 试 头(Test head)图，测 试 头(Test head) \" 图，测 试 头(Test head) 测 试 模 块(Test head module)图，测 试 模 块(Test head module) \" 图，测 试 模 块(Test head module) ASRU card(Analog Stimulate Response Unit): 模拟激励响应单元 提 供 模 拟 测 试 时 所 需的 激 励 源 ,向量检测器,运算放大器等 电 路 测 量 仪 表. ASRU 卡必须在每个 Moudule 的第一槽. Control card: 在测板时,程序和数据从系统控制器中下载到卡上,据 程 序 控 制继电器的正确闭合与释放。 Mother Card:是每个 M 的底板,提供直流源给各卡,在卡间传送信号和地址解码. Pin card : 提供测试时的复用系统， 每块双密度的 Pin card 提供用于测试的针数为 144。 一个 Module 的测试能力为 144*9=1296 点。2592 5184 Control 卡必须在每个 Moudule 的第六槽. 三 电 源 柜(Support Bay) 可 编 程 直 流 电 源(HP6624 或 其 它), 目 前 配 置 HP6624 两个. 每 个 HP6624 均 有 四 个 输 出, 因 此 目 前 可 提 供 8 组 电 源(PS1~PS8). 电 源 输 出 通 过 电 缆 连 至 Test head 中 的 ASRU 卡 上, ASRU 卡 上 有 针 通 过 夹 具 供 给 PCB 板. 四.真空箱(Vacumm Box) (SeriesⅢ 已 集 成 在 Test head 中) 提 供 两 组 独 立 控 制 的 真 空. 提 供 可 控 的 压 缩 空 气. 五.测试夹具(Fixture); 包括两种夹具技术:长线夹具和短线夹具. 1.5.1 长线夹具是一种真空夹具,它使用双绞线,一根是测针间相连的信号线,另一根是接电源 地的屏蔽线,用以防止信号间干扰.目前我们 GenRad 上都使用该夹具.如下图所示 1.5.2 短线夹具有两种类型:真空夹具和弹夹夹具,它的夹具内信号连线非常短,使得线路损耗 和信号干扰更小,提高了测试精度.目前我们 HP3070 上都使用该夹具.如下图所示 六.其他 Keysight Medalist i3070 Series 5 Testing An Electrolytic Capacitor Using Keysight i3070 In-Circuit System Polarity Test Solution 七.详细注意内容 ","date":"2021-01-29","objectID":"/posts/agilent-ict.html/:2:1","tags":["ict","agilent"],"title":"agilent-ict","uri":"/posts/agilent-ict.html/"},{"categories":["ict"],"content":"Power Requirements  • 1.Medalist i3070 Series 5i Main Power • 2.Medalist i3070 Series 5i PDU • 3.Mains Disconnect • 4.Power Cord The system power and PDU must be factory configured to match the power at the customer site. This is done prior to delivery and installation at the customer site. The power cannot be reconfigured on- site. The power configuration for the system is shown on a label at the rear of the system (bottom right). The voltage of the PDU is indicated on the front panel of the PDU.This is the main 3- phase AC power input connected from the customer site. CAUTION : After connecting power to the system, do not power up the system. An Agilent service representative will verify the power and complete the system installation and verification. ","date":"2021-01-29","objectID":"/posts/agilent-ict.html/:2:2","tags":["ict","agilent"],"title":"agilent-ict","uri":"/posts/agilent-ict.html/"},{"categories":["ict"],"content":"1.Medalist i3070 Series 5i Main Power: This is the main 3- phase AC power input connected from the customer site. Table 4 Main Power Options Power Option Frequency Voltage line-to-neutral/line-to-line 200–240V 3-Phase Delta(3PD) 50/60 Hz 200,220,230,240 208–220V 3-Phase Wye(3PY) 50/60 Hz 208,220 200–240V 3-Phase Delta(3PD) 50/60 Hz 200,220,230,240 200–240V 3-Phase Delta(3PN) 50/60 Hz 220 / 380,230 / 400,240 / 415 ","date":"2021-01-29","objectID":"/posts/agilent-ict.html/:2:3","tags":["ict","agilent"],"title":"agilent-ict","uri":"/posts/agilent-ict.html/"},{"categories":["ict"],"content":"2.Medalist i3070 Series 5i PDU:  The PDU (Power Distribution Unit) is the device in the system to which AC power is connected. The PDU is wired differently for different power configurations and will be configured to match the system power configuration. The voltage of the PDU is marked on the front panel of the PDU. The E1135 PDU is connected via a 3- phase AC terminal block wired out from the system main power. PDU图，PDU结构图 \" 图，PDU结构图 ","date":"2021-01-29","objectID":"/posts/agilent-ict.html/:2:4","tags":["ict","agilent"],"title":"agilent-ict","uri":"/posts/agilent-ict.html/"},{"categories":["ict"],"content":"3.Mains Disconnect:  The system must be equipped with a mains disconnect that provides over- current and short- circuit protection. It may be a fused disconnect or a circuit breaker. If a fused disconnect is used, it must: • Be rated for 30 amps in each phase. • Open all line conductors and neutral conductors where local code applies, but not the protective earth conductor. • Be marked “System Mains Disconnect” or the equivalent in your local language. • Be marked with a “ON” for the On position or “OFF” for the Off position. • Be capable of being locked in the Off position, but not in the On position. • Be installed within 3 m (10 ft) of the system, where it can be easily reached by the system operator without requiring the system to be moved to access the disconnect. If a circuit breaker is used, it must meet all of the above requirements plus: • Be rated for a minimum of 10,000 Amperes Interrupting Capacity (AIC) if used on a 200–240 volt circuit, or 14,000 AIC if used on a higher voltage circuit. ","date":"2021-01-29","objectID":"/posts/agilent-ict.html/:2:5","tags":["ict","agilent"],"title":"agilent-ict","uri":"/posts/agilent-ict.html/"},{"categories":["ict"],"content":"Compressed Air Requirements ","date":"2021-01-29","objectID":"/posts/agilent-ict.html/:2:6","tags":["ict","agilent"],"title":"agilent-ict","uri":"/posts/agilent-ict.html/"},{"categories":["ict"],"content":"1.Compressed Air Supply: Compressed Air Supply图，Compressed Air Supply位置图 \" 图，Compressed Air Supply位置图 ","date":"2021-01-29","objectID":"/posts/agilent-ict.html/:2:7","tags":["ict","agilent"],"title":"agilent-ict","uri":"/posts/agilent-ict.html/"},{"categories":["ict"],"content":"其他内部图： main disconnect switch图，main disconnect switch位置图 \" 图，main disconnect switch位置图 PDU on/off switch图，PDU on/off switch位置图 \" 图，PDU on/off switch位置图 Connect the LAN cable from the RJ45 coupler at the rear of the controller pod to the site network. RJ45 coupler图，RJ45 coupler位置图 \" 图，RJ45 coupler位置图 ","date":"2021-01-29","objectID":"/posts/agilent-ict.html/:2:8","tags":["ict","agilent"],"title":"agilent-ict","uri":"/posts/agilent-ict.html/"},{"categories":["ict"],"content":"Boot the Testhead 1 Turn the Main Power Switch to ON. 2 Turn ON the PDU on/off switch that enables power to the testhead. 3 Turn on the controller and monitor. 4 Log on as calibrate (the default password is Agilent1). 5 Start DGN (Diagnostics) if it does not start automatically. a Select Start \u003e All Programs \u003e Agilent ICT \u003e `KornShell`. b At the KornShell prompt, type `dgn`. 6 In the DGN window, boot the testhead using the `Testhead Functs` and `Testhead Power On` function keys. ","date":"2021-01-29","objectID":"/posts/agilent-ict.html/:2:9","tags":["ict","agilent"],"title":"agilent-ict","uri":"/posts/agilent-ict.html/"},{"categories":["ict"],"content":"Run AutoAdjust All 1 Select AutoAdjust on the Service Package - Level 1 menu, and click f1, Enter. 2 On the AutoAdjust - Level 2 menu, click f6, AutoAdj All. 3 Verify that there are no errors. If there are errors, isolate the cause by running Full Diagnostics. ","date":"2021-01-29","objectID":"/posts/agilent-ict.html/:2:10","tags":["ict","agilent"],"title":"agilent-ict","uri":"/posts/agilent-ict.html/"},{"categories":["ict"],"content":"Run Full Diagnostics NOTE:Compressed air must be attached to the system to run full Diagnostics. 1 Place a pin verification fixture on the testhead and lock it down. 2 Change Manual Intervention to Yes (press Next Value). Do not press Save Config as that will make the Manual Intervention selection permanent. 3 Run Full Diagnostics. 4 Verify that there are no errors. 点击产品登录查看详细配置文件 点击产品登录查看详细说明文件 点击DUT Power Supply Installation Manual(重点电源安装设置指导) 点击PDF文件档案 点击PCB Manufacture and PCB Assembly inside PCB Factory China ","date":"2021-01-29","objectID":"/posts/agilent-ict.html/:2:11","tags":["ict","agilent"],"title":"agilent-ict","uri":"/posts/agilent-ict.html/"},{"categories":["android","studio"],"content":"android-studio","date":"2021-01-29","objectID":"/posts/android-studio.html/","tags":["android","studio"],"title":"android-studio","uri":"/posts/android-studio.html/"},{"categories":["android","studio"],"content":"Getting started ","date":"2021-01-29","objectID":"/posts/android-studio.html/:1:0","tags":["android","studio"],"title":"android-studio","uri":"/posts/android-studio.html/"},{"categories":["android","studio"],"content":"Android Studio 使用过程的问题和注意点 ","date":"2021-01-29","objectID":"/posts/android-studio.html/:1:1","tags":["android","studio"],"title":"android-studio","uri":"/posts/android-studio.html/"},{"categories":["android","studio"],"content":"问题点 Failed to find Build Tools revision 23.0. 解决方案 Open anroid/app/build.gradle and change buildToolsVersion “23.0.3 or other available SDK revision” Failed to find gradle Tools revision 2.3.0. 解决方案 buildscript { repositories { jcenter() } dependencies { classpath 'com.android.tools.build:gradle:2.3.0' //注意：更换成自己的AS的版本 } } allprojects { repositories { jcenter() } } \u003e ","date":"2021-01-29","objectID":"/posts/android-studio.html/:1:2","tags":["android","studio"],"title":"android-studio","uri":"/posts/android-studio.html/"},{"categories":["google"],"content":"google","date":"2021-01-29","objectID":"/posts/google.html/","tags":["google"],"title":"google","uri":"/posts/google.html/"},{"categories":["google"],"content":"Getting started Modify and Notes 方法 具体使用(实例) site content site:stackoverflow.com 必须包括 “content” “ERROR -” No valid license found IntelliJ IDEA ","date":"2021-01-29","objectID":"/posts/google.html/:1:0","tags":["google"],"title":"google","uri":"/posts/google.html/"},{"categories":["hosts"],"content":"主机hosts文件。","date":"2021-01-29","objectID":"/posts/hosts.html/","tags":["hosts"],"title":"hosts","uri":"/posts/hosts.html/"},{"categories":["hosts"],"content":"Getting started ","date":"2021-01-29","objectID":"/posts/hosts.html/:1:0","tags":["hosts"],"title":"hosts","uri":"/posts/hosts.html/"},{"categories":["hosts"],"content":"Introduce Introduce on the wikipedia: The computer file hosts is an operating system file that maps hostnames to IP addresses. It is a plain text file. Originally a file named HOSTS.TXT was manually maintained and made available via file sharing by Stanford Research Institute for the ARPANET membership, containing the hostnames and address of hosts as contributed for inclusion by member organizations. The Domain Name System, first described in 1983 and implemented in 1984, automated the publication process and provided instantaneous and dynamic hostname resolution in the rapidly growing network. In modern operating systems, the hosts file remains an alternative name resolution mechanism, configurable often as part of facilities such as the Name Service Switch as either the primary method or as a fallback method. Location in the file system: Operating System Location Unix, Unix-like, POSIX /etc/hosts Microsoft Windows %SystemRoot%\\System32\\drivers\\etc\\hosts C:\\Windows\\System32\\Drivers\\etc Android /etc/hosts Modify and Notes ","date":"2021-01-29","objectID":"/posts/hosts.html/:1:1","tags":["hosts"],"title":"hosts","uri":"/posts/hosts.html/"},{"categories":["hosts"],"content":"1.修改hosts文件 查询域名对应的ip地址 hosts域名解析 IP 域名 104.31.74.55 youneed.win 104.31.74.55 www.youneed.win 104.18.36.36 free-ss.site 104.18.36.36 free-ss.site 104.18.36.36 free-ss.site 199.232.96.133 raw.githubusercontent.com 192.30.255.112 github.com 183.146.20.81 51y5.net 183.146.20.81 wifiapi02.51y5.net 58.215.105.20 51y5.net 58.215.105.20 ap.51y5.net sublimetext激活: IP 域名 127.0.0.1 www.sublimetext.com 127.0.0.1 sublimetext.com 127.0.0.1 sublimehq.com 127.0.0.1 telemetry.sublimehq.com 127.0.0.1 license.sublimehq.com 127.0.0.1 45.55.255.55 127.0.0.1 45.55.41.223 0.0.0.0 license.sublimehq.com 0.0.0.0 45.55.255.55 0.0.0.0 45.55.41.223 linux 安装包镜像 IP 域名 2001:da8:d800:95::110 mirrors.ustc.edu.cn 202.141.160.110 mirrors.ustc.edu.cn 61.128.148.70 mirrors.aliyun.com 176.31.253.211 blackarch.org ","date":"2021-01-29","objectID":"/posts/hosts.html/:2:0","tags":["hosts"],"title":"hosts","uri":"/posts/hosts.html/"},{"categories":["kodi"],"content":"kodi","date":"2021-01-29","objectID":"/posts/kodi.html/","tags":["kodi"],"title":"kodi","uri":"/posts/kodi.html/"},{"categories":["kodi"],"content":"Getting started ","date":"2021-01-29","objectID":"/posts/kodi.html/:1:0","tags":["kodi"],"title":"kodi","uri":"/posts/kodi.html/"},{"categories":["kodi"],"content":"kodi 使用过程的问题和注意点 ","date":"2021-01-29","objectID":"/posts/kodi.html/:1:1","tags":["kodi"],"title":"kodi","uri":"/posts/kodi.html/"},{"categories":["kodi"],"content":"问题点 Youtube 直播插件API， id， secret key. 解决方案 https://www.youtube.com/watch?v=y6qnV4UFaDkn https://console.developers.google.com/apis/dashboard Go to `developers.google.com` \u0026 login to your Google account (you probably already will be but this step is added just to ensure you are) Now go to `console.developers.google.com` Click on `Create Project` in the top left You will now see a box labelled `Project name`. Give it a simple name you can easily recognise and then click `Create` Wait for the notification (top right) saying the project has been created Now click on the `Google APIs logo` in the top left Select `Library` from the left hand menu Scroll down and select `YouTube Data API vX` Select Enable on the next screen Select `Create Credentials` on the right hand side of the screen Click on the `Dropdown Box` Select `YouTube Data API vX` Now click on the `Where will you be calling the API` from `dropdown box` In the `What data will you be accessing box` check `Public Data` Now click on `What credentials do I need`? You will now see your API key. `Click on Copy` on the right hand side and then click `done` Now you have it copied `save it to a text file` as we need to now get the ID \u0026 secret After clicking done you will be back at the screen where we clicked on `Library`. Look on the left hand side again and click on `OAuth consent screen` Click `External` and then `Create` Enter a `name` (just use the same name as you did at the beginning) Scroll to the bottom and click `Save` Now click on `Credentials` in the left hand menu Now click Create `Credentials` in the top left Select `OAuth Client ID` Click on `Application Type` and select `TVS and Limited Input Devices` You now need to give it a name. I just left it as TV Client 1 Select Create You will now see a box with your Client ID and Secret. Copy both and add to the text file where we saved the API key before Now open YouTube on `Kodi` Scroll down to `Settings` Highlight `API` in the left hand menu Now paste your `API, Client ID and Secret` in the corresponding boxes on the right and then click `OK` YouTube should now no longer give you API errors Failed to find gradle Tools revision 2.3.0. 解决方案 buildscript { repositories { jcenter() } dependencies { classpath 'com.android.tools.build:gradle:2.3.0' //注意：更换成自己的AS的版本 } } allprojects { repositories { jcenter() } } \u003e kodi 开发插件实例代码：点击地址 ","date":"2021-01-29","objectID":"/posts/kodi.html/:1:2","tags":["kodi"],"title":"kodi","uri":"/posts/kodi.html/"},{"categories":["language"],"content":"外语单词短语记录复习.","date":"2021-01-29","objectID":"/posts/languages-words-phrases.html/","tags":["language"],"title":"languages-words-phrases","uri":"/posts/languages-words-phrases.html/"},{"categories":["language"],"content":"所有经过外语单词短语记录复习 ","date":"2021-01-29","objectID":"/posts/languages-words-phrases.html/:1:0","tags":["language"],"title":"languages-words-phrases","uri":"/posts/languages-words-phrases.html/"},{"categories":["language"],"content":"英语 robust: 强健的(49%)，粗野的(21%)，耐用的(17%)，浓的(9%)，稳固的(4%) ship with: 附带 sketch： 素描, 草图, 小品 advocacy: 拥护, 支持, 鼓吹, 辩护, 辩护术 permalink: 永久链接；永久连结；固定链接 cryptographic: 密码的(100%),关于暗号的，用密码写的(adj) terse: 简洁的(77%)，简明的(23%)(adj.)简洁的，精练的，扼要的 Flickr: 网络相簿(n.) finnicky: (=finicky)吹毛求疵的, 难以讨好的(adj.) travis: 特拉维斯(姓氏(50%)，男子名)(50%), (n.)特拉维斯（男子名）；崔维斯合唱团 Scottish: 苏格兰的(59%)，苏格兰人(32%)，苏格兰语(9%), (n.)苏格兰人；苏格兰语, (adj.)苏格兰的；苏格兰人的；苏格兰语的 fanart: [网络]爱好者；手绘；献礼 joypad: 游戏手柄(100%), (n.)控制器设置；手柄 microcosm: (n.) 小宇宙, 小世界, 人类, 缩影(71%)，微观世界(15%)，小宇宙(14%), microcosmos eroded: (a.) 被侵蚀的, 损坏了 Manchu: 满族的(40%)，满族人(40%)，满族语(20%), (n.)满语；满族人, (adj.)满族的；满语的 mundane: 世俗的(43%)，平凡的(42%)，世界的(15%), adj.世俗的，平凡的；世界的，宇宙的 trove:贵重发现物(50%)，珍藏品(50%), n.被发现的东西；收藏的东西, n.(Trove)人名；(德)特罗韦 garotte: (n.)西班牙的绞刑具，上述绞刑 dishevelled: 散乱的(49%)，蓬乱的(29%)，=disheveled.(11%)，动词dishevel的过去式和过去分词形式.(11%) coquettish: 卖弄风情的(58%)，妖艳的(28%)，婀娜多姿的(14%), (adj.)妖艳的；卖弄风情的；迷人的 crept：匍匐爬行（creep的过去式） vigilance: 警惕(75%)，警戒(25%) laity:外行人(53%)，普通信徒(47%) denunciation: 谴责(100%), (n.)谴责，斥责；告发 energetic: 精力旺盛的(42%)，能量的(31%)，有力的(27%), (adj.)精力充沛的；积极的；有力的 ignominiously: 可耻地(100%), (adv.)可耻地 pyjamas: 睡衣裤(100%), (n.)睡衣；宽长裤 proletarian: (a.) 无产阶级的, (n.) 无产者 saturation： 饱和(70%)，饱和度(29%)，浸透(1%)， (n.)饱和；色饱和度；浸透；磁化饱和 tractability: 驯良(38%)，温顺(31%)，易处理(31%), (n.)温顺；驯良；易处理 actuator: 执行机构(76%)，制动器(14%)，传动装置(10%), (n.)[自] 执行机构；激励者；促动器 refinery: (n.) 精炼厂, [化] 精炼厂 interpersonal: 人与人之间的(60%)，人际关系的(40%), (adj.)人际的；人与人之间的 invoice: (n.) 发票, 发货单, (v.) 开发票, 记清单 variance: 变化(81%)，不一致(19%), (n.)变异；变化；不一致；分歧；[数] 方差 voucher: 凭证(72%)，代金券(28%), (n.)收据；证人；保证人；证明者；代金, (vt.)证实...的可靠性 apprehensibility: (n.)能理解 opto-electronic: [计][修]光电 symbol: 象征(47%)，符号(37%)，标志(16%)， （n.）象征；符号；标志 cactus: 仙人掌(100%) spinach: 菠菜 water spinach: 空心菜 collar: 衣领(63%)，抓住(19%)，项圈(17%)，为 ... 戴上项圈(1%) fig tree: 无花果树 snap pea: 豌豆 wye[wai]: n.Y字形物,[电] Y形接头，柔性 neutral： ['nju:trәl] - ★★，(n.) 中立者, 中立国, 非彩色, 空档， `中性` (a.) 中立的, `中性的`, 无色的 power cord: 接头，(n.)电源线 [网络]电线；带线插头；电源软线 ","date":"2021-01-29","objectID":"/posts/languages-words-phrases.html/:2:0","tags":["language"],"title":"languages-words-phrases","uri":"/posts/languages-words-phrases.html/"},{"categories":["language"],"content":"粤语 ","date":"2021-01-29","objectID":"/posts/languages-words-phrases.html/:3:0","tags":["language"],"title":"languages-words-phrases","uri":"/posts/languages-words-phrases.html/"},{"categories":["language"],"content":"老挝语/泰语 ","date":"2021-01-29","objectID":"/posts/languages-words-phrases.html/:4:0","tags":["language"],"title":"languages-words-phrases","uri":"/posts/languages-words-phrases.html/"},{"categories":["language"],"content":"其他语种 ","date":"2021-01-29","objectID":"/posts/languages-words-phrases.html/:5:0","tags":["language"],"title":"languages-words-phrases","uri":"/posts/languages-words-phrases.html/"},{"categories":["Linux"],"content":"这篇文章展示了Linux相关信息。","date":"2021-01-29","objectID":"/posts/linux.html/","tags":["Linux"],"title":"linux","uri":"/posts/linux.html/"},{"categories":["Linux"],"content":"Linux相关 查看硬件时间可以是用hwclock或者clock命令，hwclock –show 或者hwclock -r //查看硬件时间 [root@localhost ~]# hwclock --show 2008年12月12日星期五 06时52分07秒 -0.376932 seconds //设置硬件时间 [root@localhost ~]# hwclock --set --date=\"1/25/09 00:00\" \u003c== 月/日/年时:分:秒 [root@localhost ~]# hwclock 2009年01月25日星期日 00时00分06秒 -0.870868 seconds [root@localhost ~]# hwclock -w 根据系统时间设置硬件时间 //以系统时间为基准，修改硬件时间 [root@localhost ~]# hwclock --systohc\u003c== sys（系统时间）to（写到）hc（Hard Clock） [root@localhost ~]# hwclock -w //以硬件时间为基准，修改系统时间 [root@localhost ~]# hwclock --hctosys [root@localhost ~]# hwclock -s Linux系统时间的设置 在Linux中设置系统时间，可以用`date命令`： //查看时间 [root@localhost ~]# date 2008年 12月 12日星期五 14:44:12 CST //修改时间 [root@localhost ~]# date -set \"2013-12-24 00:01\" \u003c== （年/月/日 时:分【:秒】） 2009年 01月 01日星期四 00:01:00 CST //date 有几种时间格式可接受，这样也可以设置时间： [root@localhost ~]# date 012501012009.30 \u003c== 月日时分年.秒 2009年 01月 25日星期日 01:01:30 CST //修正时区 mv /etc/localtime /etc/localtime.bak #备份原文件 ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime #修改为Shanghai Linux系统时间与网络同步的问题 通过ntpdate命令从时钟服务器同步,选用中国ntp服务器cn.pool.ntp.org来作为时钟同步的来源。 终端输入指令：ntpdate cn.pool.ntp.org 配置crontab自动执行同步： crontab -e #每10分钟执行一次 */10 * * * * /usr/sbin/ntpdate cn.pool.ntp.org 或者 #每一个小时执行一次 0 * * * * /usr/sbin/ntpdate cn.pool.ntp.org 同一网络中搭建时钟服务器(NTP Server) //配置NTP服务 ntp配置文件的路径是/etc/ntp.conf，修改改配置文件时先进行备份。 cp /etc/ntp.conf /etc/ntp.conf.bak #备份 vim /etc/ntp.conf #vim编辑文件 配置文件中，增加如下内容： # Hosts on local network are less restricted. restrict 192.168.1.0 mask 255.255.255.0 nomodify notrap #这个是用来允许192.168.1.*这个网段的服务器都可以使用该ntp服务器同步时间。这里可以根据你实际情况来设定网段。 server 192.168.1.2 #同时添加指定一台内网服务器作为本地时钟服务器用于无法链接外网时，其它服务器同步时间是以该服务器为准。 整体配置后的文件，主要内容如下： # Permit all access over the loopback interface. This could # be tightened as well, but to do so would effect some of # the administrative functions. restrict 127.0.0.1 restrict -6 ::1 # Hosts on local network are less restricted. restrict 192.168.1.0 mask 255.255.255.0 nomodify notrap # Use public servers from the pool.ntp.org project. # Please consider joining the pool (http://www.pool.ntp.org/join.html). #定义上游使用的ntp服务器 server cn.pool.ntp.org prefer #server 0.centos.pool.ntp.org iburst #server 1.centos.pool.ntp.org iburst #server 2.centos.pool.ntp.org iburst #server 3.centos.pool.ntp.org iburst #外部时间服务不可用时，以本地时间作为服务 server 192.168.1.2 fudge 192.168.1.2 stratum 10 #broadcast 192.168.1.255 autokey # broadcast server #broadcastclient # broadcast client #broadcast 224.0.1.1 autokey # multicast server #multicastclient 224.0.1.1 # multicast client #manycastserver 239.255.254.254 # manycast server #manycastclient 239.255.254.254 autokey # manycast client # Enable public key cryptography. #crypto includefile /etc/ntp/crypto/pw ... 启动NTP服务 systemctl start ntpd，配置文件配置好保存后，我们可以通过systemctl命令来启动ntp服务。 服务启动后可以通过ntpstat命令来验证服务是否正常: [root@localhost ~]# ntpstat synchronised to NTP server (162.159.200.123) at stratum 4 time correct to within 227 ms polling server every 1024 s 客户端同步时间 ntpdate 192.168.1.2，可以将该命令作为crontab任务进行定时运行即可完成客户端机器的时间同步。 ","date":"2021-01-29","objectID":"/posts/linux.html/:1:0","tags":["Linux"],"title":"linux","uri":"/posts/linux.html/"},{"categories":["Linux"],"content":"这篇文章展示了Linux命令英文全称.","date":"2021-01-29","objectID":"/posts/Linux-Command-Fullname.html/","tags":["Linux"],"title":"Linux Command Fullname","uri":"/posts/Linux-Command-Fullname.html/"},{"categories":["Linux"],"content":"Linux命令英文全称 Note 这篇文章转载自(https://blog.csdn.net/alex_sym/article/details/7409566). su：Swith user 切换用户，切换到root用户 cat: Concatenate 串联 uname: Unix name 系统名称 df: Disk free 空余硬盘 du: Disk usage 硬盘使用率 chown: Change owner 改变所有者 chgrp: Change group 改变用户组 ps：Process Status 进程状态 tar：Tape archive 解压文件 chmod: Change mode 改变模式 umount: Unmount 卸载 ldd：List dynamic dependencies 列出动态相依 insmod：Install module 安装模块 rmmod：Remove module 删除模块 lsmod：List module 列表模块 alias :Create your own name for a command bash :GNU Bourne-Again Shell linux内核 grep:global regular expression print httpd :Start Apache ipcalc :Calculate IP information for a host ping :Send ICMP ECHO_Request to network hosts reboot: Restart your computer sudo:Superuser do /bin = BINaries /dev = DEVices /etc = ETCetera /lib = LIBrary /proc = PROCesses /sbin = Superuser BINaries /tmp = TeMPorary /usr = Unix Shared Resources /var = VARiable ? FIFO = First In, First Out GRUB = GRand Unified Bootloader IFS = Internal Field Seperators LILO = LInux LOader MySQL = My最初作者的名字SQL = Structured Query Language PHP = Personal Home Page Tools = PHP Hypertext Preprocessor PS = Prompt String Perl = \"Pratical Extraction and Report Language\" = \"Pathologically Eclectic Rubbish Lister\" Python Monty Python's Flying Circus Tcl = Tool Command Language Tk = ToolKit VT = Video Terminal YaST = Yet Another Setup Tool apache = \"a patchy\" server apt = Advanced Packaging Tool ar = archiver as = assembler bash = Bourne Again SHell bc = Basic (Better) Calculator bg = BackGround cal = CALendar cat = CATenate cd = Change Directory chgrp = CHange GRouP chmod = CHange MODe chown = CHange OWNer chsh = CHange SHell cmp = compare cobra = Common Object Request Broker Architecture comm = common cp = CoPy cpio = CoPy In and Out cpp = C Pre Processor cups = Common Unix Printing System cvs = Current Version System daemon = Disk And Execution MONitor dc = Desk Calculator dd = Disk Dump df = Disk Free diff = DIFFerence dmesg = diagnostic message du = Disk Usage ed = editor egrep = Extended GREP elf = Extensible Linking Format elm = ELectronic Mail emacs = Editor MACroS eval = EVALuate ex = EXtended exec = EXECute fd = file descriptors fg = ForeGround fgrep = Fixed GREP fmt = format fsck = File System ChecK fstab = FileSystem TABle fvwm = F*** Virtual Window Manager gawk = GNU AWK gpg = GNU Privacy Guard groff = GNU troff hal = Hardware Abstraction Layer joe = Joe's Own Editor ksh = Korn SHell lame = Lame Ain't an MP3 Encoder lex = LEXical analyser lisp = LISt Processing = Lots of Irritating Superfluous Parentheses ln = LiNk lpr = Line PRint ls = list lsof = LiSt Open Files m4 = Macro processor Version 4 man = MANual pages mawk = Mike Brennan's AWK mc = Midnight Commander mkfs = MaKe FileSystem mknod = MaKe NODe motd = Message of The Day mozilla = MOsaic GodZILLa mtab = Mount TABle mv = MoVe nano = Nano's ANOther editor nawk = New AWK nl = Number of Lines nm = names nohup = No HangUP nroff = New ROFF od = Octal Dump passwd = PASSWorD pg = pager pico = PIne's message COmposition editor pine = \"Program for Internet News \u0026 Email\" = \"Pine is not Elm\" ping = Packet InterNet Grouper pirntcap = PRINTer CAPability popd = POP Directory pr = pre printf = PRINT Formatted ps = Processes Status pty = pseudo tty pushd = PUSH Directory pwd = Print Working Directory rc = runcom = run command, shell rev = REVerse rm = ReMove rn = Read News roff = RunOFF rpm = RPM Package Manager = RedHat Package Manager rsh, rlogin, = Remote rxvt = ouR XVT sed = Stream EDitor seq = SEQuence shar = SHell ARchive slrn = S-Lang rn ssh = Secure SHell ssl = Secure Sockets Layer stty = Set TTY su = Substitute User svn = SubVersioN tar = Tape ARchive tcsh = TENEX C shell telnet = TEminaL over Network termcap = terminal capability terminfo = terminal information tr = traslate troff = Typesetter new ROFF tsort = Topological SORT tty = TeleTypewriter twm = Tom's Window Manager tz = TimeZone udev = Userspace DEV ulimit = User's LIMIT umask = User's MASK uniq = UNIQue vi = VIsual = ","date":"2021-01-29","objectID":"/posts/Linux-Command-Fullname.html/:1:0","tags":["Linux"],"title":"Linux Command Fullname","uri":"/posts/Linux-Command-Fullname.html/"},{"categories":["linux","find","grep"],"content":"linux-find-grep","date":"2021-01-29","objectID":"/posts/linux-find-grep.html/","tags":["linux","find","grep"],"title":"linux-find-grep","uri":"/posts/linux-find-grep.html/"},{"categories":["linux","find","grep"],"content":"Getting started ","date":"2021-01-29","objectID":"/posts/linux-find-grep.html/:1:0","tags":["linux","find","grep"],"title":"linux-find-grep","uri":"/posts/linux-find-grep.html/"},{"categories":["linux","find","grep"],"content":"linux 使用过程中收集的要点和助手 描述 指令 查找当前目录下面需要的文件和文件夹（包括子目录） ls -lR |grep -v '^d' | awk '{print $9}' |tr -s '\\n' 查看当前目录下面的文件个数（包括子目录） ls -lR | grep \"^-\" | wc -l 查看当前目录下面的文件个数（包括子目录） ls -lR |grep -v '^d' | wc -l 查看当前目录下面的文件和文件夹个数 ls -l | grep \"^-\" | wc -l 显示当前目录下面全部文件（包括子目录） ls -lR |grep -v '^d'|awk '{print $9}' |tr -s '\\n' 查找当前目录下的所有目录 ls -lR |grep -v '^d'|awk '{print $9}' |tr -s '\\n' 只显示文件 grep '^d' 只显示文件夹 grep '^-' 只删除当前目录下的文件不删除文件夹 grep '^-' 查看文件的前10行 head -n 10 file或者awk 'NR\u003c6' file 查看文件的最后10行 tail -n 10 file 显示文件某一行(line0)到另外一行(line1)的内容 cat file | tail -n +line0 | head -n (line1-line0)或者sed -n '5,10p' file 显示文件某一行(line0)到另外一行(line1)的内容 cat file | head -n line1 | tail -n +line0 ","date":"2021-01-29","objectID":"/posts/linux-find-grep.html/:2:0","tags":["linux","find","grep"],"title":"linux-find-grep","uri":"/posts/linux-find-grep.html/"},{"categories":["mariaDB","Mysql"],"content":"mariaDB-Mysql","date":"2021-01-29","objectID":"/posts/mariaDB-Mysql.html/","tags":["mariaDB","Mysql"],"title":"mariaDB-Mysql","uri":"/posts/mariaDB-Mysql.html/"},{"categories":["mariaDB","Mysql"],"content":"Getting started ","date":"2021-01-29","objectID":"/posts/mariaDB-Mysql.html/:1:0","tags":["mariaDB","Mysql"],"title":"mariaDB-Mysql","uri":"/posts/mariaDB-Mysql.html/"},{"categories":["mariaDB","Mysql"],"content":"mariaDB-Mysql数据库相关 SQL 必会： SQL必会 \" SQL必会 常用指令 方法 具体使用(实例) 本地登录MySQL mysql -u root -p //root是用户名，输入这条命令按回车键后系统会提示你输入密码 指定端口号登录MySQL数据库 mysql -u root -p -P 3306，注意指定端口的字母P为大写，而标识密码的p为小写。MySQL默认端口号为3306 指定IP地址和端口号登录MySQL数据库 mysql -h ip -u root -p -P 3306例如：mysql -h 127.0.0.1 -u root -p -P 3306 查看多少个数据库 show databases; 使用该数据库 use database; 查看当前库下有哪些表 show tables; 查看表下面那些列 show columns from city; 查看表下面对应列的数据 SELECT NAME FROM AV_PICTURE; 添加主键 Alter table tabname add primary key(col) 删除主键 Alter table tabname drop primary key 创建索引 create [unique] index idxname on tabname(col….) 删除索引 drop index idxname(注：索引是不可更改的，想更改必须删除重新建。) 创建视图 create view viewname as select statement; 删除视图 drop view viewname ","date":"2021-01-29","objectID":"/posts/mariaDB-Mysql.html/:1:1","tags":["mariaDB","Mysql"],"title":"mariaDB-Mysql","uri":"/posts/mariaDB-Mysql.html/"},{"categories":["mariaDB","Mysql"],"content":"问题点 [ERROR] /usr/bin/mariadbd: unknown option ‘–auto-rehash’ 解决方案 nano /etc/my.cnf 注销auto-rehash ","date":"2021-01-29","objectID":"/posts/mariaDB-Mysql.html/:1:2","tags":["mariaDB","Mysql"],"title":"mariaDB-Mysql","uri":"/posts/mariaDB-Mysql.html/"},{"categories":["mariaDB","Mysql"],"content":"SQL面试常用的语句 使用 语句 创建数据库 CREATE DATABASE database-name; 删除数据库 DROP DATABASE database-name; 根据已有的表创建新表 create table A like B (使用旧表B创建新表A，此种方式在将表B复制到A时候会将表B完整的字段结构和索引复制到表A中来) 创建新表 CREATE TABLE IF NOT EXISTS runoob_tbl(runoob_id INT UNSIGNED AUTO_INCREMENT,runoob_title VARCHAR(100) NOT NULL,runoob_author VARCHAR(40) NOT NULL,submission_date DATE,PRIMARY KEY ( runoob_id ))ENGINE=InnoDB DEFAULT CHARSET=utf8;(在 RUNOOB 数据库中创建数据表runoob_tbl) 删除新表 drop table tabname； 增加一个列 alter table tabname add column column_name type; 查询内容 select * from table1 where 范围 插入(增) insert into table1(field1,field2) values(value1,value2) 删除 delete from table1 where 范围 更新 update table1 set field1=value1 where 范围 查找值 select * from table1 where field1 like ’%value1%’ —like的语法很精妙，查资料! 排序 select * from table1 order by field1,field2 [desc]（desc：降序，asc：升序） 总数 select count as totalcount from table1 求和 select sum(field1) as sumvalue from table1 平均 select avg(field1) as avgvalue from table1 最大 select max(field1) as maxvalue from table1 最小 select min(field1) as minvalue from table1 删除新表 drop table tabname； 删除新表 drop table tabname； 注意：create table tab_new as select col1,col2… from tab_old definition only 备注：此种方式只会将表B的字段结构复制到表A中来，但不会复制表B中的索引到表A中来。这种方式比较灵活可以在复制原表表结构的同时指定要复制哪些字段，并且自身复制表也可以根据需要增加字段结构。 create table as select 会将原表中的数据完整复制一份，但表结构中的索引会丢失。 create table like 只会完整复制原表的建表语句，但不会复制数据。 ","date":"2021-01-29","objectID":"/posts/mariaDB-Mysql.html/:1:3","tags":["mariaDB","Mysql"],"title":"mariaDB-Mysql","uri":"/posts/mariaDB-Mysql.html/"},{"categories":["python"],"content":"python","date":"2021-01-29","objectID":"/posts/python.html/","tags":["python"],"title":"python","uri":"/posts/python.html/"},{"categories":["python"],"content":"Getting started ","date":"2021-01-29","objectID":"/posts/python.html/:1:0","tags":["python"],"title":"python","uri":"/posts/python.html/"},{"categories":["python"],"content":"python基本用法 ","date":"2021-01-29","objectID":"/posts/python.html/:2:0","tags":["python"],"title":"python","uri":"/posts/python.html/"},{"categories":["python"],"content":"python问题点 issues: If this fails your Python may not be configured for Tk resolution: ","date":"2021-01-29","objectID":"/posts/python.html/:3:0","tags":["python"],"title":"python","uri":"/posts/python.html/"},{"categories":["python"],"content":"conda问题点 描述 指令 查看安装了哪些包 conda list 查看当前存在哪些虚拟环境 conda env list或者conda info -e 检查更新当前conda conda update conda Python创建虚拟环境 conda create -n your_env_name python=x.x或者conda create -n virtualenv python=3.9 激活或者切换虚拟环境 source activate your_env_nam(Linux)和activate your_env_name(Windows) 对虚拟环境中安装额外的包 conda install -n your_env_name [package] 关闭虚拟环境(即从当前环境退出返回使用PATH环境中的默认python版本) deactivate env_name(Windows) 或者 activate root切回root环境 和 source deactivate(Linux) 删除虚拟环境 conda remove -n your_env_name –all 删除环境钟的某个包 conda remove –name your_env_name package_name 设置国内镜像 conda config –add channels https://mirrors.tuna.tsinghua.edu.cn 设置搜索时显示通道地址 conda config –set show_channel_urls yes 恢复默认镜像 conda config –remove-key channels 更新包 conda update package_name 一次性更新所有包 conda update –all 查找包 conda search keyword 删除包 conda remove package_name 生成.condarc（windows：C:\\\\users\\\\username\\\\，linux：/home/username/）文件 conda config –set show_channel_urls yes To get all keys and their values: conda config –get To get the value of a specific key, such as channels: conda config –get channels 设置国内镜像 conda config –add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main To remove an existing value, such as http://conda.anaconda.org/mutirri from a specific key, such as channels: conda config –remove channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main To remove a key, such as channels, and all of its values: conda config –remove-key channels Display all identified configuration sources: conda config –show-sources Describe all available configuration options: conda config –describe Set the output verbosity to level 3 (highest) for the current activate environment: conda config –set verbosity 3 –env 查看conda版本 conda –version Install an earlier version of Python in Anaconda conda install -c anaconda python=3.7 关闭虚拟环境 conda deactivate 删除虚拟环境 conda remove –name virtualenv –all 激活conda source /opt/anaconda/bin/activate root ","date":"2021-01-29","objectID":"/posts/python.html/:4:0","tags":["python"],"title":"python","uri":"/posts/python.html/"},{"categories":["python"],"content":"共享虚拟环境 conda env export –file python36_env.yml conda env create -f /home/chb/code/python36_env.yml conda remove -n python36 –all或者conda env remove -n python36 ","date":"2021-01-29","objectID":"/posts/python.html/:5:0","tags":["python"],"title":"python","uri":"/posts/python.html/"},{"categories":["python"],"content":"清华大学开源软件镜像站（推荐） channels: - defaults show_channel_urls: true channel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda default_channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2 custom_channels: conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud ","date":"2021-01-29","objectID":"/posts/python.html/:6:0","tags":["python"],"title":"python","uri":"/posts/python.html/"},{"categories":["python"],"content":"上海交通大学开源镜像站 default_channels: - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/r - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/main custom_channels: conda-forge: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/ pytorch: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/ channels: - defaults ","date":"2021-01-29","objectID":"/posts/python.html/:7:0","tags":["python"],"title":"python","uri":"/posts/python.html/"},{"categories":["python"],"content":"中国科学技术大学 USTC Mirror --add channels 'https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/' # lowest priority --add channels 'https://mirrors.ustc.edu.cn/anaconda/pkgs/free/' --add channels 'https://mirrors.ustc.edu.cn/anaconda/pkgs/main/' --add channels 'https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/' --add channels 'https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/' --add channels 'https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/' # highest priority --set show_channel_urls True --set ssl_verify True ","date":"2021-01-29","objectID":"/posts/python.html/:8:0","tags":["python"],"title":"python","uri":"/posts/python.html/"},{"categories":["python"],"content":"问题与解决方案 scrapy module install UnsatisfiableError: The following specifications were found to be incompatible with the existing python installation in your environment: Specifications:- scrapy conda create -n virtualenv3.6 python=3.6 conda activate virtualenv3.6 conda install -n virtualenv3.6 -c conda-forge scrapy pil module install conda install -n virtualenv PIL UnsatisfiableError: The following specifications were found to be incompatible with the existing python installation in your environment: Specifications:- pil conda install -n virtualenv pillow crypto.cipher module install conda install -n virtualenv crypto.cipher PackagesNotFoundError: The following packages are not available from current channels: conda install -n virtualenv pillow mysql.connector module install conda install -n virtualenv crypto.cipher PackagesNotFoundError: The following packages are not available from current channels: conda install -n virtualenv3.6 mysql-connector ","date":"2021-01-29","objectID":"/posts/python.html/:9:0","tags":["python"],"title":"python","uri":"/posts/python.html/"},{"categories":["python"],"content":"python代码相关 ","date":"2021-01-29","objectID":"/posts/python.html/:10:0","tags":["python"],"title":"python","uri":"/posts/python.html/"},{"categories":["python"],"content":"方法的使用 描述 指令 划分字符串为数组 split('\\n') \\n可以为任何其中字符 字符串的截取 str[0:1] 输出str位置0开始到位置1以前的字符, str为任意字符串 字符串的截取 str[1:6] 输出str位置1开始到位置6以前的字符, str为任意字符串 字符串的截取 str[-5:] 输出字符串右5位, str为任意字符串 字符串的合并 str = ‘0000’ + str(num) 字符串的替换 str = str.replace(‘k’,' 8') 将字符串里的k全部替换为8 字符串的查找 变量.find(“要查找的内容”[，开始位置，结束位置])，开始位置和结束位置，表示要查找的范围，为空则表示查找所有。查找到后会返回位置，位置从0开始算，如果没找到则返回-1。 字符串的分割 Python 分割字符串使用 变量.split(“分割标示符号”[分割次数])，分割次数表示分割最大次数，为空则分割所有。 Python 字典(Dictionary) keys() 函数以列表返回一个字典所有的键。 dict.keys() Python判断列表中是否存在某元素 in 如果在指定的序列中找到值返回 True，否则返回 False//not in 如果在指定的序列中没有找到值返回 True，否则返回 False Python判断列表中是否存在某元素 in 如果在指定的序列中找到值返回 True，否则返回 False//not in 如果在指定的序列中没有找到值返回 True，否则返回 False ","date":"2021-01-29","objectID":"/posts/python.html/:10:1","tags":["python"],"title":"python","uri":"/posts/python.html/"},{"categories":["python"],"content":"代码问题 TypeError: ‘str’ object does not support item assignment 解决方案 将其他类型转换成字串形式 多个循环嵌套不支持 解决方案 自定义方法解决，再调用方法 TypeError: ‘Response’ object has no attribute ‘getitem' 解决方案 自定义方法解决，再调用方法 在循环Python中将字典追加到列表出现卡死 解决方案 yourlist.append(yourdict.copy()) ","date":"2021-01-29","objectID":"/posts/python.html/:11:0","tags":["python"],"title":"python","uri":"/posts/python.html/"},{"categories":["react"],"content":"react","date":"2021-01-29","objectID":"/posts/react.html/","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"Getting started ","date":"2021-01-29","objectID":"/posts/react.html/:1:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"1. React开发环境准备 1.安装node.js,查看node -v，npm -V验证安装。 2.方案一(推荐)： 3.npx create-react-app my-app 4.cd my-app 5.npm start 6.方案二： 7.npm install -g create-react-app 8.cd dir(你项目的目录) 9.create-react-app my-app 10.cd my-app 11.yarn start 安装完成后，执行参考以下指令: Inside that directory, you can run several commands: yarn start Starts the development server. yarn build Bundles the app into static files for production. yarn test Starts the test runner. yarn eject Removes this tool and copies build dependencies, configuration files and scripts into the app directory. If you do this, you can’t go back! We suggest that you begin by typing: cd jianshu yarn start Happy hacking! ","date":"2021-01-29","objectID":"/posts/react.html/:2:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"2. React工程目录文件结构介绍 1.cd my-app。 2.npm run start 。 3.文件介绍： 4.readme.md 项目介绍。 5.package.json node包文件，脚手架自动生成文件。 6.node_modules 第三方模块包。 7.mainfest.json app的快捷方式。 8.src 项目所有源代码文件夹，index.js整个程序运行的入口引用文件，app.test.js自动化测试文件。 ","date":"2021-01-29","objectID":"/posts/react.html/:3:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"3. React中的组件 1.导入组件 import React, { Component } form 'react';。 2.导出组件 export default App; App子类继承组件（Component）。 3.挂载App组件到父节点下，ReactDOM.render(\u003cApp /\u003e, document.getElementById('root'));。 ","date":"2021-01-29","objectID":"/posts/react.html/:4:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"4. React中最基础的JSX语法 1.标签变成组件，渲染。 2.自定义组件（组件自定义名称大写字母开头），渲染。 3.JSX语法注释 ,{/\\*content\\*/}。 4.引用CSS文件，import './style.css',\u003cinput className = \"input\" /\u003e。 5.标签转义，dangerouslySetInnerHTML={{__html: item}}。 6.\u003clable htmlFor=\"insertArea\"\u003e输入内容\u003c/lable\u003e, **\u003cinput id = \"insertArea\" /\u003e**。 ","date":"2021-01-29","objectID":"/posts/react.html/:5:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"5. React编写TodoList功能 1.TodoList替代App组件。 2.创建TodoList组件。 3.render return 返回元素必须包含在一个标签中。通过Fragment组件，Fragment占位符隐藏标签，内容放在之间。 ","date":"2021-01-29","objectID":"/posts/react.html/:6:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"5. React中的响应式设计思想和事件绑定 1.首先定义数据函数:（constructor(props){super(props);this.state={inputvalue:'可以设置预定值',list:[]}}）。 2.数据与对应的组件标签``响应，\u003cinput value={this.state.inputvalue}/\u003e。 3.事件绑定。 \u003cinput value={this.state.inputvalue} onChange={this.handleInputChange.`bind`(this)}/\u003e, `控制台console`显示事件`变化`：handleInputChange(e){ this.`setState`({inputvalue:e.target.value}) console.log(e.`target`.value) } ","date":"2021-01-29","objectID":"/posts/react.html/:7:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"6. React实现TodoList列表新增删除功能 1.首先定义提交按钮:\u003cbutton onClick={this.handleBtnClick.bind(this)}\u003e提交\u003c/button\u003e。 2.定义handleBtnClick函数，handleBtnClick(){}。 3.定义列表和对应的组件标签，list:[] 和 \u003cul\u003e。 \u003cul\u003e{ this.state.list.map( (item, index) =\u003e {return \u003cli key={index}`(忽略警告)`\u003e{item}\u003c/li\u003e} ) } \u003c/ul\u003e 4.事件绑定，点击提交，数据追加到list数组列表。 handleBtnClick(){ this.setState(){ list:[...this.state.list, this.state.inputvalue], inputvalue:''(`清空输入框`) } } 5.事件绑定，点击数据，数据从list数组列表中删除。 \u003cul\u003e{this.state.list.map( (item, index) =\u003e {return \u003cli key={index} onClick={this.handleItemDelete.bind(this, index)}\u003e{item}\u003c/li\u003e})}\u003c/ul\u003e， handleItemDelete(index){ const list = [...`展开运算符`this.state.list]; list.splice(index, 1); this.setState({ list:list }) } ","date":"2021-01-29","objectID":"/posts/react.html/:8:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"7. React组件与组件之间的传值，组件拆分 1.创建拆分组件，组件引用拆分组件，return (\u003c拆分组件 /\u003e),组件为树形结构。 2.组件间参数传值。 `父组件`：return (\u003c拆分组件 content={value}/\u003e), `子组件`：return (\u003cdiv\u003e{this.props.content}\u003c/div\u003e) 3.子组件事件绑定，点击标签，对应相应事件处理。 return ( \u003cdiv onClick={this.handleClick}\u003e{this.props.content}\u003c/div\u003e ), handleClick(){ alert(1); } 4.子组件事件绑定，点击标签，对应相应事件处理，删除item。 return ( \u003cdiv onClick={this.handleClick}\u003e{this.props.content}\u003c/div\u003e ), `父组件`：return (\u003c拆分组件 content={value} index={index} deleteItem={this.handleItemDelete.bind(this)}/\u003e)， return (\u003cdiv onClick={this.handleClick}\u003e{this.props.content}\u003c/div\u003e),handleClick(){ alert(this.props.index); }, constructor(props){ super(props); this.handleClick=this.handleClick.bind(this) }, handleClick(){ this.props.deleteItem(this.props.index) } ","date":"2021-01-29","objectID":"/posts/react.html/:9:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"8. React的特点 1.声明式开发。 2.可以和其他框架并存。 3.组件化。 4.单向数据流。 5.视图层框架。 6.函数式开发。 ","date":"2021-01-29","objectID":"/posts/react.html/:10:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"10. React Developer Tools的安装及使用 1.chrome Extensions： React Developer Tools ","date":"2021-01-29","objectID":"/posts/react.html/:11:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"9. PropTypes与DefaultProps的应用 1.导入PropTypes包。 2.组件.propTypes={test: PropTypes.string.isRequired必须值, var: PropTypes.string, method: PropTypes.func, index: PropTypes.number}，定义组件值的属性（类型）。 3.DefaultProps默认值，.组件.DefaultProps={test: ‘hello world’}。 ","date":"2021-01-29","objectID":"/posts/react.html/:12:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"11. React中的虚拟DOM 1.定义state数据。 2.JSX模板。 3.数据 + 模板 结合生成真实的DOM， 来显示。 4.state 发生变化。 5.数据 + 模板 结合生成真实的DOM， 替换原始的DOM。 缺陷 生成两次DOM片段，替换过程非常耗性能。 优化。 1.定义state数据。 2.JSX模板。 3.数据 + 模板 结合生成真实的DOM， 来显示。 4.state 发生变化。 5.数据 + 模板 结合生成真实的DOM， 并不直接替换原始的DOM。 6.新的DOM（DocumentFragment）和原始的DOM作对比，找出差异。 7.找出发生变化的组件元素。 8.只用新的DOM中的组件元素替换老的DOM中的input元素。 缺陷 性能提升并不明显 优化 1.定义state数据。 2.JSX模板。 3.数据 + 模板 结合生成真实的DOM， 来显示。 4.生成虚拟DOM(虚拟DOM就是一个JS对象，用来描述真正的DOM)（创建对象有性能损耗），用虚拟DOM的结构生成真实的DOM,来显示。 5.state 发生变化。 6.生成新的虚拟DOM。 7.比较虚拟BOM与新的虚拟DOM的区别。 8.直接操作DOM改变其中内容。 ","date":"2021-01-29","objectID":"/posts/react.html/:13:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"12. React中ref的使用 1.setState是异步函数，处理时最好将语句放在回调函数后面。 2.ref 即reference，引用指向当前标签。 3.\u003cinput ref={ (input) =\u003e {this.input = input}}/\u003e。 4.函数调用时，直接var value = this.input.value。 ","date":"2021-01-29","objectID":"/posts/react.html/:14:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"13. React的生命周期函数 1.生命周期函数是指在某一时刻组件会自动调用执行的函数。 2.constructor函数在组件创建的时候调用，render在数据发生变化的时候调用，都是生命周期函数。componentWillMount在组件即将被挂载到页面上的时刻被自动调用,componentDidMount在组件被挂载到页面之后被自动调用,shouldComponentUpdate在组件被更新之前自动执行，返回布尔值（bool），。true执行，false不执行。componentWillUpdate在shouldComponentUpdate之后执行，shouldComponentUpdate返回true才执行，组件被更新之前自动执行。componentDidUpdate组件更新完成后自动执行。componentWillRecieveprops存在子组件中，当一个组件从父组件接受参数，只要父组件的render函数被重新执行了，子组件的这个生命周期函数就会被执行，第一次存在于父组件中不会执行，已经存在父组件中才会执行。componentWillUnmount这个组件即将从页面中剔除时，才会执行。 3.使用场景 4.render生命周期函数必须存在，其他生命周期函数可有可无。 5.shouldComponentUpdate接受两个参数:nextProps,nextState。 6.componentDidMount处理AJAX异步请求，安装AJAX模块，yarn add axios.导入AJAX模块，import axios from 'axios',调用axios，axios.get('/api/组件')。 ","date":"2021-01-29","objectID":"/posts/react.html/:15:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"14. React使用Charles实现本地数据mock 安装Charlse中间件 ","date":"2021-01-29","objectID":"/posts/react.html/:16:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"15. React中实现CSS过渡动画 toggle, 1.先定义constructor方法，设置state的初始化值，以及初始化点击事件，例子： constructor(props){ super(props); this.state = { show: true } this.handleToggle = this.handleToggle.bind(this); } 2.再调用渲染方法render()，渲染定义的标签组件，例： \u003cdiv classNames = {this.state.show ? 'show' : 'hide'}\u003ehello world!\u003c/div\u003e 3.再调用点击事件函数handleToggle()，实现toggle，例： handleToggle(){ this.state = ({ show: this.state.show ? false : true }) } 4.定义切换样式（动画）css文件，导入css文件 import './style.css'; style.css: .show{ opacity: 1; transition: all 1s ease-in; } .hide{ opacity: 0; transition: all 1s ease-in; } 动画效果： @keyframes show-item { 0% { opacity: 1; color: red; } 50% { opacity: 1; color: green; } 100% { opacity: 1; color: blue; } } @keyframes hide-item { 0% { opacity: 1; color: red; } 50% { opacity: 1; color: green; } 100% { opacity: 1; color: blue; } } 修改show类样式： .show{ opacity: 0; transition: all 1s ease-in;变为 transition: show-item 2s ease-in forwards; } 修改hide类样式： .hide{ opacity: 0; transition: all 1s ease-in;变为 transition: hide-item 2s ease-in forwards; } ","date":"2021-01-29","objectID":"/posts/react.html/:17:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"16. 使用react transition group实现动画 安装和使用： 安装react transition group，终端输入命令：yarn add react-transition-group 导入CSStransition模块到自定义组件（例子中APP.js），import { CSSTransition } from 'react-transition-group'; 加入CSStransition标签组件，包裹需要该组件的内容. \u003cCSStransition in={this.state.show} timeout={1000}\u003e \u003cdiv\u003ehello world\u003c/div\u003e \u003c/CSStransition\u003e 注意:修改动画效果的标签，其他内容不变。 修改style.css,加入组件react-transition-group规定的样式. 有如下样式： 进场/出厂第一帧, 进场/出厂第二帧, 进场/出厂第三帧 fade-appear, fade-appear-active, fade-appear-done fade-enter, fade-enter-active, fade-enter-done fade-exit, fade-exit-active, fade-exit-done 有如下组件属性： timeout classNames unmountOnExit onEnter进场/出厂第一帧 A \u003cTransition\u003e callback fired immediately after the 'enter' or 'appear' class is applied. Note: when nodeRef prop is passed, node is not passed. type: Function(node: HtmlElement, isAppearing: bool) onEntering, 进场/出厂第二帧 A \u003cTransition\u003e callback fired immediately after the 'enter-active' or 'appear-active' class is applied. Note: when nodeRef prop is passed, node is not passed. type: Function(node: HtmlElement, isAppearing: bool) onEntered, 进场/出厂第三帧 A \u003cTransition\u003e callback fired immediately after the 'enter' or 'appear' classes are removed and the done class is added to the DOM node. Note: when nodeRef prop is passed, node is not passed. type: Function(node: HtmlElement, isAppearing: bool) onExit，同上 A \u003cTransition\u003e callback fired immediately after the 'exit' class is applied. Note: when nodeRef prop is passed, node is not passed type: Function(node: HtmlElement) onExiting A \u003cTransition\u003e callback fired immediately after the 'exit-active' is applied. Note: when nodeRef prop is passed, node is not passed type: Function(node: HtmlElement) onExited A \u003cTransition\u003e callback fired immediately after the 'exit' classes are removed and the exit-done class is added to the DOM node. Note: when nodeRef prop is passed, node is not passed type: Function(node: HtmlElement) .fade-enter{ opacity: 0; } .fade-enter-active{ opacity: 1; transition: opacity 1s ease-in; } .fade-enter-done{ opacity: 1; \u003c!-- color：red； --\u003e } .fade-exit{ opacity: 1; } .fade-exit-active{ opacity: 0; transition: opacity 1s ease-in; } .fade-exit-done{ opacity: 0; } 再修改标签组件CSStransition，classname类名 \u003cCSStransition in={this.state.show} timeout={1000} classNames='fade' unmountOnExit`移除标签` `修改过度显示颜色`相当于前面注释掉的样式颜色修改， onEntered={(el) =\u003e {el.style.color='blue'}} `增加显示时，第一帧`,appear对应相应的css类 appear={true}\u003e .fade-enter .fade-appear{ opacity: 0; } .fade-enter-active `.fade-appear-active`{ opacity: 1; transition: opacity 1s ease-in; } .fade-enter-done{ opacity: 1; \u003c!-- color：red； --\u003e } .fade-exit{ opacity: 1; } .fade-exit-active{ opacity: 0; transition: opacity 1s ease-in; } .fade-exit-done{ opacity: 0; } 重新启动项目，npm run start。 ","date":"2021-01-29","objectID":"/posts/react.html/:18:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"17. React中Redux概念简述 Redux = Reducer + Flux Redux就是React版的全局变量 Redux流程图： Redux流程图 \" Redux流程图 注：Action Creaters相当于请求动作，Reducers相当于处理接收到的数据,Store相当于接收请求数据，React Components相当于接收/发送处理完成的数据 创建redux中的store 首先安装Redux，yarn add Redux。 index.js import { createStore } from 'redux'； import reducer from './stroe/reducer' const store = createStore( reducer， window.__REDUX_DEVTOOLS_EXTENSION__ \u0026\u0026 window.__REDUX_DEVTOOLS_EXTENSION() `chrome redux 拓展支持` ); export store; reducer.js, 相当于笔记本。 const defaultState = { inputValue: '', list: [] } \u003c!-- reducer 可以接收state， 但是决不能修改state。 --\u003e export default (state, action) =\u003e { if(action.type === 'change_input_value'){ const newState = JSON.parse(JSON.stringify(state)); newState.inputValue = action.value; return newState; } if(action.type === 'add_todo_item'){ const newState = JSON.parse(JSON.stringify(state)); newState.list.push(newState.inputValue); newState.inputValue = ''; return newState; } if(action.type === 'del_todo_item'){ const newState = JSON.parse(JSON.stringify(state)); newState.list.splice(action.index, 1); return newState; } console.log(state, action); return state; }; 其他组件导入store import store from './store'; console.log(store.getState()); ","date":"2021-01-29","objectID":"/posts/react.html/:19:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"17. 使用Antd实现TodoList页面布局 TodoList.js import React, { Component } from 'react'; class TodoList extends Component { render(){ return \u003cdiv\u003ehello world\u003c/div\u003e } } export default TodoList; 安装Antd模块，yarn add antd。 程式中使用Antd模块： import React, { Component } from 'react'; `import 'antd/dist/antd.css';` import store from './store'; class TodoList extends Component { constructor(props){ super(props); this.state = store.getState(); this.handleInputChange = this.handleInputChange.bind(this); this.handleStoreChange = this.handleStoreChange.bind(this); store.subscribe(this.handleStoreChange); } render(){ return ( \u003cdiv style={{marginTop: '10px', marginLeft: '10px'}}\u003e \u003cdiv\u003e \u003cinput value={this.state.value} placeholder='todo info' style={{width: '300px'}} onChange={this.handleInputChange}\u003e \u003cButton type=\"primary\" onClick={this.handleBtnClick}\u003e提交\u003c/Button\u003e \u003c/div\u003e \u003cList style={{marginTop: '10px', marginLeft: '10px'}} bordered dataSource={this.state.list} renderItem={Item =\u003e (\u003cList.Item\u003e{item}\u003c/List.Item\u003e)} onClick={this.handleItemDelete.bind(this, index)}/\u003e \u003c/div\u003e ) } handleInputChange(e){ const action = { type: 'change_input_value', value: e.target.value } store.dispatch(action); } handleStoreChange(){ console.log('store changed'); this.setState(store.getState()); } handleBtnClick(){ const action = { type: 'add_todo_item' }； store.dispatch(action); } handleItemDelete(){ const action = { type: 'del_todo_item', index } store.dispatch(action); } } export default TodoList; 问题: 1.Can't call setState on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. 把 store.subscribe(this.handleStoreChange); 放到componentDidMount() 里面。这个错误是因为这个方法this.handleStoreChange在还没有建立时候就被使用了 ActionTypes的拆分 1.actionTypes.js export const CHANGE_IPUT_VALUE = 'change_input_value'; export const ADD_TODO_ITEM = 'add_todo_item'; export const DEL_TODO_ITEM = 'del_todo_item'; 2.组件TodoList.js导入actionTypes： import { CHANGE_IPUT_VALUE, ADD_TODO_ITEM, DEL_TODO_ITEM } from './store/actionTypes'; 3.TodoList.js中CHANGE_IPUT_VALUE等值直接替换’change_input_value'，type=CHANGE_IPUT_VALUE; 使用actionCreator.js统一创建action 1.actionCreator.js import { CHANGE_IPUT_VALUE, ADD_TODO_ITEM } from './stroe/actionTypes'; export const getInputChangeAction = (value) =\u003e ({ type: CHANGE_IPUT_VALUE, value }); export const getAddItemAction = () =\u003e ({ type: ADD_TODO_ITEM, }); export const getAddItemAction = (index) =\u003e ({ type: DEL_TODO_ITEM, }); 2.修改TodoList.js中，handleInputChange方法。 import { getAddItemAction, getInputChangeAction } from './store/actionCreator'; handleInputChange(e){ const action = { type: 'change_input_value', value: e.target.value } store.dispatch(action); } 变为 handleInputChange(e){ const action = getInputChangeAction(e.target.value); store.dispatch(action); } store 公共（public）储存空间。 ","date":"2021-01-29","objectID":"/posts/react.html/:20:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"18. UI组件和容器组件 ToollistUI.jsUI组件（傻瓜组件） import React, { Component } from 'react'; import { Input, Button, List } from 'antd'; class ToollistUI extends Component { render(){ return ( \u003cdiv style={{marginTop: '10px', marginLeft: '10px'}}\u003e \u003cdiv\u003e \u003cinput value={this.props.inputValue} placeholder='todo info' style={{width: '300px'}} onChange={this.props.handleInputChange}\u003e \u003cButton type=\"primary\" onClick={this.props.handleBtnClick}\u003e提交\u003c/Button\u003e \u003c/div\u003e \u003cList style={{marginTop: '10px', marginLeft: '10px'}} bordered dataSource={this.props.list} renderItem={Item =\u003e (\u003cList.Item\u003e{item}\u003c/List.Item\u003e)} onClick={ (index) =\u003e {this.props.handleItemDelete}(index) }/\u003e \u003c/div\u003e ) } } TodoList.js 容器组件(聪明组件)修改成如下内容 import React, { Component } from 'react'; `import 'antd/dist/antd.css';` import store from './store'; import { CHANGE_IPUT_VALUE, ADD_TODO_ITEM, DEL_TODO_ITEM } from './store/actionTypes'; import ToollistUI from './ToollistUI'; class TodoList extends Component { constructor(props){ super(props); this.state = store.getState(); this.handleInputChange = this.handleInputChange.bind(this); this.handleStoreChange = this.handleStoreChange.bind(this); this.handleBtnClick = this.handleBtnClick.bind(this); this.handleItemDelete = this.handleItemDelete.bind(this); store.subscribe(this.handleStoreChange); } render(){ return ( \u003cToollistUI inputValue={this.state.inputValue} handleInputChange={this.handleInputChange} handleBtnClick={this.handleBtnClick} andleItemDelete={this.handleItemDelete} /\u003e ) } handleInputChange(e){ const action = { type: 'change_input_value', value: e.target.value } store.dispatch(action); } handleStoreChange(){ console.log('store changed'); this.setState(store.getState()); } handleBtnClick(){ const action = { type: 'add_todo_item' }； store.dispatch(action); } handleItemDelete(){ const action = { type: 'del_todo_item', index } store.dispatch(action); } } export default TodoList; ","date":"2021-01-29","objectID":"/posts/react.html/:21:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"19. 无状态组件，只有一个render函数，替换UI组件中的类TodolistUI为函数。 import React, { Component } from 'react'; `import React from 'react';` 解决警告问题。 import { Input, Button, List } from 'antd'; const TodolistUI = (props) =\u003e { render( \u003cdiv style={{marginTop: '10px', marginLeft: '10px'}}\u003e \u003cdiv\u003e \u003cinput value={props.inputValue} placeholder='todo info' style={{width: '300px'}} onChange={props.handleInputChange}\u003e \u003cButton type=\"primary\" onClick={props.handleBtnClick}\u003e提交\u003c/Button\u003e \u003c/div\u003e \u003cList style={{marginTop: '10px', marginLeft: '10px'}} bordered dataSource={props.list} renderItem={Item =\u003e (\u003cList.Item\u003e{item}\u003c/List.Item\u003e)} onClick={ (index) =\u003e {props.handleItemDelete}(index) }/\u003e \u003c/div\u003e ) } ","date":"2021-01-29","objectID":"/posts/react.html/:22:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"20. Redux中发送异步请求获取数据 参照之前的axios模块和charlse应用以及Redux各个数据处理。 ","date":"2021-01-29","objectID":"/posts/react.html/:23:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"21. 使用Redux-thunk中间件实现ajax数据请求 Redux-thunk中间件，统一数据处理。 安装Redux-thunk，指令：npm install redux-thunk 使用Redux-thunk模块，index.js导入Redux-thunk模块 import { createStore, applyMiddleware } from 'redux'； import reducer from './stroe/reducer' import thunk from 'redux-thunk'; const store = createStore( reducer， applyMiddleware([thunk, window.__REDUX_DEVTOOLS_EXTENSION__ \u0026\u0026 window.__REDUX_DEVTOOLS_EXTENSION()]) ); export store; 使用redux devtools的compose模块 import { createStore, applyMiddleware， `compose` } from 'redux'； import reducer from './stroe/reducer' import thunk from 'redux-thunk'; const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION__ \u0026\u0026 window.__REDUX_DEVTOOLS_EXTENSION(); const enhancer = composeEnhancers( applyMiddleware(thunk) ); const store = createStore(reducer，enhancer); export store; ","date":"2021-01-29","objectID":"/posts/react.html/:24:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"20. Redux的中间件指的是什么？ ","date":"2021-01-29","objectID":"/posts/react.html/:25:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"21. Redux-saga中间件使用 在Redux-thunk中间件中，将AJAX异步请求放在actionCreator里面进行处理。 用Redux-saga替代Redux-thunk处理异步请求。 安装Redux-saga，yarn add redux-saga。 使用Redux-saga，导入Redux-saga包。index.js: import { createStore, applyMiddleware， `compose` } from 'redux'； import reducer from './stroe/reducer' import createSagaMiddleware from 'redux-saga' // create the saga middleware const sagaMiddleware = createSagaMiddleware() const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION__ \u0026\u0026 window.__REDUX_DEVTOOLS_EXTENSION(); const enhancer = composeEnhancers( applyMiddleware(thunk) ); const store = createStore(reducer，enhancer); export store; 创建sagas.js,并导入到index.js。 `sagas.js`: function* mySaga() { yield takeLatest(\"USER_FETCH_REQUESTED\", fetchUser); } export default mySaga; `index.js`: import { createStore, applyMiddleware， `compose` } from 'redux'； import reducer from './stroe/reducer' import createSagaMiddleware from 'redux-saga' import todoSagas from './sagas' // create the saga middleware const sagaMiddleware = createSagaMiddleware() const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION__ \u0026\u0026 window.__REDUX_DEVTOOLS_EXTENSION(); const enhancer = composeEnhancers( applyMiddleware(thunk) ); const store = createStore(reducer，enhancer); sagaMiddleware.run(todoSagas) export store; ","date":"2021-01-29","objectID":"/posts/react.html/:26:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"22. Styled-Components模块安装 yarn add styled-components Styled-Components使每个css样式独立，不做任何耦合。 修改style.css改为style.js: injectGlobal` body { margin: 0; padding: 0; font-family: sans-serif; } `; `注意：` styled-components废弃injectGlobal这个API，更改为createGlobalStyle。 ","date":"2021-01-29","objectID":"/posts/react.html/:27:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["react"],"content":"23. Reset.css使用 /* http://meyerweb.com/eric/tools/css/reset/ v2.0 | 20110126 License: none (public domain) */ html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video { margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: baseline; } /* HTML5 display-role reset for older browsers */ article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section { display: block; } body { line-height: 1; } ol, ul { list-style: none; } blockquote, q { quotes: none; } blockquote:before, blockquote:after, q:before, q:after { content: ''; content: none; } table { border-collapse: collapse; border-spacing: 0; } 将以上代码放在Styled-Components模块，style.js中的createGlobalStyle内容的内容中。 24.React使用iconfont嵌入头部图标 从iconfont-阿里巴巴矢量图标库下载图标文件。 将iconfont文件夹放到statics文件夹下面。 重命令iconfont.css为iconfont.js，修改内容并导入。 使用看说明文档 demo_index.html，标签引用标签。 @font-face { font-family: 'iconfont'; src: url('**./**iconfont.eot'); src: url('**./**iconfont.eot?#iefix') format('embedded-opentype'), url('**./**iconfont.woff2') format('woff2'), url('**./**iconfont.woff') format('woff'), url('**./**iconfont.ttf') format('truetype'), url('**./**iconfont.svg#iconfont') format('svg'); } .iconfont { font-family: \"iconfont\" !important; font-size: 16px; font-style: normal; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } 其他类可以删除。 \u003cspan class=\"iconfont\"\u003e\u0026#x33;\u003c/span\u003e 25.搜索框动画效果实现 见项目源码。 26.使用Immutable.js来管理store中的数据 安装Immutable.js，yarn add immutable 使用Immutable.js,首先导入immutable模块。 import { fromJS } from 'immutable'; 在将defaultState对象转化成fromJS对象： `reducer.js`修改后： const defaultState = fromJS({ focused: false, }); `reducer.js`原代码： // const defaultState = { // focused: false, // }; `index.js`原代码： const mapStateToProps = (state) =\u003e { return { // focused: state.header.focused, focused: state.focused, }; }; `index.js`修改后： const mapStateToProps = (state) =\u003e { return { // focused: state.header.focused, focused: state.header.get('focused'), }; }; `reducer.js`原代码： export default (state = defaultState, action) =\u003e { if (action.type === \"search_focus\") { return { focused: true, }; } if (action.type === \"search_blur\") { return { focused: false, }; } return state; }; `reducer.js`修改后： export default (state = defaultState, action) =\u003e { if (action.type === \"search_focus\") { // immutable对象的set方法，会接合之前的immutable对象的值和设置的值，返回一个全新的对象。 return state.set('focused', true); } if (action.type === \"search_blur\") { return state.set('focused', false); } return state; }; 27.使用redux-immutable统一数据格式 安装和使用redux-immutable组件。 安装：yarn add redux-immutable 导入：import { combineReducers } from \"redux-immutable\"; 使用(将js对象转变为immutable对象)： `index.js`修改前： const mapStateToProps = (state) =\u003e { return { // focused: state.header.focused, focused: state.header.get('focused'), }; }; `index.js`修改后： const mapStateToProps = (state) =\u003e { return { // focused: state.header.focused, focused: state.get('header').get('focused'), 等价于下面的写法，两种写法互换： focused: state.getIn(['header', 'focused']) }; }; 27.热门搜索样式布局 见代码详情页面。 28.在React中使用路由功能 安装第三方模块，yarn add react-router-dom 导入第三方模块到index.js中,import { BrowserRouter, Route } from \"react-router-dom\";。 使用第三方模块，加入如下代码到index.js中： \u003cProvider store={store}\u003e \u003cdiv\u003e \u003cHeader /\u003e \u003cBrowserRouter\u003e \u003cdiv\u003e \u003cRoute path=\"/\" exact render={() =\u003e \u003cdiv\u003ehome\u003c/div\u003e}\u003e\u003c/Route\u003e \u003cRoute path=\"/detail\" exact render={() =\u003e \u003cdiv\u003edetail\u003c/div\u003e}\u003e\u003c/Route\u003e \u003c/div\u003e \u003c/BrowserRouter\u003e \u003c/div\u003e \u003c/Provider\u003e 请对照前面的index.js文件。 在SRC文件夹下面创建对应的pages文件夹，包括home,detail等文件夹。 29.在React中使用页面跳转 导入Link模块，import { Link } from \"react-router-dom\"; Link替代a标签，不会加载html页面，直接跳转。 \u003cLink key={ind","date":"2021-01-29","objectID":"/posts/react.html/:28:0","tags":["react"],"title":"react","uri":"/posts/react.html/"},{"categories":["rsync"],"content":"rsync","date":"2021-01-29","objectID":"/posts/rsync.html/","tags":["rsync"],"title":"rsync","uri":"/posts/rsync.html/"},{"categories":["rsync"],"content":"Getting started ","date":"2021-01-29","objectID":"/posts/rsync.html/:1:0","tags":["rsync"],"title":"rsync","uri":"/posts/rsync.html/"},{"categories":["rsync"],"content":"rsync介绍 rsync 是 Linux 系統上最常被用來複製與備份檔案的工具，它可以處理本機或遠端的檔案同步工作，藉由 rsync 指令可以讓管理者很方便的將兩地的資料同步，不管是同一台電腦或是透過網際網路連線的兩台伺服器，使用方式都類似，以下是 rsync 的使用教學以及常用的指令範例。 ","date":"2021-01-29","objectID":"/posts/rsync.html/:2:0","tags":["rsync"],"title":"rsync","uri":"/posts/rsync.html/"},{"categories":["rsync"],"content":"基本用法 ","date":"2021-01-29","objectID":"/posts/rsync.html/:3:0","tags":["rsync"],"title":"rsync","uri":"/posts/rsync.html/"},{"categories":["rsync"],"content":"1.参数 -r rsync -r source destination 使用 rsync 命令时，可以作为cp和mv命令的替代方法，将源目录同步到目标目录。-r表示递归，即包含子目录。注意，-r是必须的，否则 rsync 运行不会成功。source目录表示源目录，destination表示目标目录。 rsync -r source1 source2 destination 多个文件或目录需要同步，source1、source2都会被同步到destination目录。 ","date":"2021-01-29","objectID":"/posts/rsync.html/:3:1","tags":["rsync"],"title":"rsync","uri":"/posts/rsync.html/"},{"categories":["rsync"],"content":"2.参数 -a rsync -a source destination -a参数可以替代-r，除了可以递归同步以外，还可以同步元信息（比如修改时间、权限等）。由于 rsync 默认使用文件大小和修改时间决定文件是否需要更新，所以-a比-r更有用。目标目录destination如果不存在，rsync 会自动创建。执行上面的命令后，源目录source被完整地复制到了目标目录destination下面，即形成了destination/source的目录结构。 rsync -a source/ destination 只想同步源目录source里面的内容到目标目录destination，则需要在源目录后面加上斜杠。上面命令执行后，source目录里面的内容，就都被复制到了destination目录里面，并不会在destination下面创建一个source子目录。 ","date":"2021-01-29","objectID":"/posts/rsync.html/:3:2","tags":["rsync"],"title":"rsync","uri":"/posts/rsync.html/"},{"categories":["rsync"],"content":"3.参数 -n rsync -anv source/ destination 上面命令中，-n参数模拟命令执行的结果，并不真的执行命令。-v参数则是将结果输出到终端，这样就可以看到哪些内容会被同步。如果不确定 rsync 执行后会产生什么结果，可以先用-n或--dry-run参数模拟执行的结果。 ","date":"2021-01-29","objectID":"/posts/rsync.html/:3:3","tags":["rsync"],"title":"rsync","uri":"/posts/rsync.html/"},{"categories":["rsync"],"content":"4.参数 –delete rsync -av –delete source/ destination 上面命令中，–delete参数会使得destination成为source的一个镜像。默认情况下，rsync 只确保源目录的所有内容（明确排除的文件除外）都复制到目标目录。它不会使两个目录保持相同，并且不会删除文件。如果要使得目标目录成为源目录的镜像副本，则必须使用–delete参数，这将删除只存在于目标目录、不存在于源目录的文件。 ","date":"2021-01-29","objectID":"/posts/rsync.html/:3:4","tags":["rsync"],"title":"rsync","uri":"/posts/rsync.html/"},{"categories":["rsync"],"content":"5.参数 –exclude rsync -av –exclude='*.txt' source/ destination 或者 rsync -av –exclude ‘*.txt’ source/ destination 上面命令排除了所有 TXT 文件。注意，rsync 会同步以\"点\"开头的隐藏文件，如果要排除隐藏文件，可以这样写–exclude=\".*\"。我们希望同步时排除某些文件或目录，这时可以用--exclude参数指定排除模式。 rsync -av –exclude ‘dir1/*’ source/ destination 如果要排除某个目录里面的所有文件，但不希望排除目录本身，可以写成上面命令。 rsync -av –exclude ‘file1.txt’ –exclude ‘dir1/*’ source/ destination 多个排除模式，可以用多个–exclude参数。 rsync -av –exclude={‘file1.txt’,‘dir1/*'} source/ destination 多个排除模式也可以利用 Bash 的大扩号的扩展功能，只用一个–exclude参数。 rsync -av –exclude-from=‘exclude-file.txt’ source/ destination 如果排除模式很多，可以将它们写入一个文件，每个模式一行，然后用–exclude-from参数指定这个文件。 ","date":"2021-01-29","objectID":"/posts/rsync.html/:3:5","tags":["rsync"],"title":"rsync","uri":"/posts/rsync.html/"},{"categories":["rsync"],"content":"6.参数 –include rsync -av –include=\".txt\" –exclude='’ source/ destination 上面命令指定同步时，排除所有文件，但是会包括 TXT 文件。 ","date":"2021-01-29","objectID":"/posts/rsync.html/:3:6","tags":["rsync"],"title":"rsync","uri":"/posts/rsync.html/"},{"categories":["rsync"],"content":"7.参数 SSH 协议远程同步 rsync -av source/ username@remote_host:destination 早期 rsync： rsync -av -e ssh source/ user@remote_host:/destination rsync 除了支持本地两个目录之间的同步，也支持远程同步。它可以将本地内容，同步到远程服务器。由于早期 rsync 不使用 SSH 协议，需要用-e参数指定协议，后来才改的。 rsync -av username@remote_host:source/ destination 也可以将远程内容同步到本地。 rsync -av -e ‘ssh -p 2234’ source/ user@remote_host:/destination 上面命令中，-e参数指定 SSH 使用2234端口。 ","date":"2021-01-29","objectID":"/posts/rsync.html/:3:7","tags":["rsync"],"title":"rsync","uri":"/posts/rsync.html/"},{"categories":["rsync"],"content":"8.参数 rsync 协议远程同步 rsync -av source/ 192.168.122.32::module/destination 除了使用 SSH，如果另一台服务器安装并运行了 rsync 守护程序，则也可以用rsync://协议（默认端口873）进行传输。具体写法是服务器与目标目录之间使用双冒号分隔::。注意，上面地址中的module并不是实际路径名，而是 rsync 守护程序指定的一个资源名，由管理员分配。 rsync rsync://192.168.122.32 如果想知道 rsync 守护程序分配的所有 module 列表。 rsync -av source/ rsync://192.168.122.32/module/destination rsync 协议除了使用双冒号，也可以直接用rsync://协议指定地址。 ","date":"2021-01-29","objectID":"/posts/rsync.html/:3:8","tags":["rsync"],"title":"rsync","uri":"/posts/rsync.html/"},{"categories":["rsync"],"content":"9.常用参数 -v :展示详细的同步信息 -a :归档模式，相当于 -rlptgoD -r :递归目录 -l :同步软连接文件 -p :保留权限 -t :将源文件的\"modify time\"同步到目标机器 -g :保持文件属组 -o :保持文件属主 -D :和--devices --specials一样，保持设备文件和特殊文件 -z :发送数据前，先压缩再传输 -H :保持硬链接 -n :进行试运行，不作任何更改 -P same as --partial --progress --partial :支持断点续传 --progress :展示传输的进度 --delete :如果源文件消失，目标文件也会被删除 --delete-excluded :指定要在目的端删除的文件 --delete-after :默认情况下，rsync是先清理目的端的文件再开始数据同步；如果使用此选项，则rsync会先进行数据同步，都完成后再删除那些需要清理的文件。 --exclude=PATTERN :排除匹配PATTERN的文件 --exclude-from=FILE :如果要排除的文件很多，可以统一写在某一文件中 -e ssh :使用SSH加密隧道传输 ","date":"2021-01-29","objectID":"/posts/rsync.html/:3:9","tags":["rsync"],"title":"rsync","uri":"/posts/rsync.html/"},{"categories":["TypeScript"],"content":"TypeScript","date":"2021-01-29","objectID":"/posts/TypeScript.html/","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"Getting started ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:1:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"1. TypeScript简介 TypeScript 是微软开发的 JavaScript 的超集（superset），TypeScript 兼容 JavaScript，可以载入 JavaScript 代码然后运行。TypeScript 与JavaScript 相比进步的地方 包括：加入注释，让编译器理解所支持的对象和函数，编译器会移除注释，不会增加开销；增加一个完整的类结构，使之更新是传统的面向对象语言。 `为什么会有 TypeScript?` JavaScript 只是一个脚本语言，并非设计用于开发大型 Web 应用，JavaScript 没有提供类和模块的概念，而 TypeScript 扩展了 JavaScript 实现了这些特性。TypeScript 主要特点包括： TypeScript 是微软推出的开源语言，使用 Apache 授权协议 TypeScript 是 JavaScript 的超集. TypeScript 增加了可选类型、类和模块 TypeScript 可编译成可读的、标准的 JavaScript TypeScript 支持开发大规模 JavaScript 应用 TypeScript 设计用于开发大型应用，并保证编译后的 JavaScript 代码兼容性 TypeScript 扩展了 JavaScript 的语法，因此已有的 JavaScript 代码可直接与 TypeScript 一起运行无需更改 TypeScript 文件扩展名是 ts，而 TypeScript 编译器会编译成 js 文件 TypeScript 语法与 JScript .NET 相同 TypeScript 易学易于理解 `语法特性:` 类 Classes 接口 Interfaces 模块 Modules 类型注解 Type annotations 编译时类型检查 Compile time type checking Arrow 函数 (类似 C# 的 Lambda 表达式) `JavaScript 和 TypeScript 的区别` TypeScript 是 JavaScript 的超集，扩展了 JavaScript 的语法，因此现有的 JavaScript 代码可与 TypeScript 一起工作无需任何修改，TypeScript 通过类型注解提供编译时的静态类型检查。TypeScript 可处理已有的 JavaScript 代码，并只对其中的 TypeScript 代码进行编译 ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:2:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"2. TypeScript与VsCode 编辑器 安装Visual Studio的TypeScript插件 Prettier-Code formatter代码格式化插件 VsCode TypeScript ts代码编写需要的设置，打开setting，查找tab-size，修改为2。查找quote，修改TypeScript quote为single。查找save，选中Format On Save选项框。 ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:3:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"3. 什么是TypeScript, 与javascript的区别？ TypeScript is a typed superset of JavaScript that compiles to plain JavaScipt. 一.typed: TypeScript ts 静态类型。 let b: number = 123; 类型不变，不可修改类型，可修改值。b= 456。 javascript js 动态类型。 let a = 123; 类型可以修改，可修改类型，可修改值。a = ‘abc’。 二.compiles示例： 以下为ts代码： interface Person { name: String } const teather: Person = { name: 'Dell Lee' } ts代码无法在浏览器中直接运行，需要编译成js代码才能在浏览器中运行。 以下为编译后的js代码： \"use strict\"; const teather = { name: 'Dell Lee' }; js代码可以在浏览器中直接运行。 ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:4:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"4. TypeScript带来了什么优势 1.ts代码可以直接发现错误在哪（有提示），js没有提示，需要在浏览器（控制台）中运行才能发现错误。开发过程中发现潜在的问题。ts的静态类型，可以快速发现错误。 示例： js代码参数data未定义时，没有任何提示，需要在浏览器（控制台）中运行才能发现错误： function jsDemo(data) { return Math.sqrt(data.x ** 2 + data.y ** 2); } jsDemo(); ts代码参数data未定义时，有错误提示，tsDemo()调用时报错： function tsDemo(data: { x: number, y: number }) { return Math.sqrt(data.x ** 2 + data.y ** 2); } tsDemo(); //报错 发现错误修改为 tsDemo({ x: 1, y: 123 }); 2.ts代码，编辑器（VS code）的编写代码时提示（自动完成）更加友好。 3.ts代码，代码语义更加清晰易懂，便于阅读，例子中,data: { x: number, y: number }。 优化后代码： type Point = { x: number, y: number } function tsDemo(data: Point) { return Math.sqrt(data.x ** 2 + data.y ** 2); } tsDemo({ x: 1, y: 123 }); ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:5:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"5. TypeScript基础环境搭建 1.安装node.js。 2.验证已经安装node.js,npm。指令：node -v , npm -v查看安装的版本号。 3.验证已经安装node.js,npm。指令：node -v , npm -v。 4.打开VS code终端，输入以下指令：npm install typescript -g。 5.调试运行代码，终端输入以下指令：tsc demo.tsTypeScript compile编译ts文件，会生成一个js文件demo.js，指令：node demo.js运行程序。 6.简化以上流程，安装ts-node，输入以下指令：npm install -g ts-node或者npm install -g ts-node@加想安装的对应版本号。 7.安装ts-node后，调试运行代码，只需要输入ts-node demo.ts。 ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:6:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"5. 静态类型的深度理解 1.const count: number = 2019，这种类型为TS静态类型中的基本类型。 2.编辑器count.会提示所有number类型可以调用的方法。 3.TS静态类型中的自定义类型： 自定义Point类型： interface Point { x: number, y: number } const point: Point = { x: 3, y: 4 } //point变量上具备Point类型的所有属性和方法。使用point.x。 4.静态类型的属性和方法不可以更改。 ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:7:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"5. 基础类型和对象类型 1.基础类型（null, undefined, symbol, boolean, void, string, number）: const count: number = 123; const teatherName: string = `dell`; 2.对象类型（对象{}, 数组[], 类Class, 函数function, Date， 自定义对象{}）: const teather: { name: string, age: number, } = { name: 'dell', age: 18 }; const numbers: number[] = [1, 2, 3]; class Person {} const dell: Person = new Person(); const getTotal: () =\u003e number = () =\u003e { return 123; } const date = new Date(); interface Person { name: string, } const rawData = '{\"name\": \"dell\"}'; const newData: Person = JSON.parse(rawData); ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:8:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"6. 类型注解和类型推断 类型注解 //type annotation 类型注解，我们来告诉变量是什么类型。 语句 const count: number = 123; 中的 : number即为类型注解。 类型推断 //type inference 类型推断，TS会自动的去尝试分析变量的类型。 语句 const countInfere = 123; 中的 变量即TS会自动的去尝试分析该变量的类型。 注意：如果 TS 能够自动分析变量的类型，我们就什么也不需要做了。 注意：如果 TS 无法分析变量的类型的话，我们需要使用类型注解。 在VS code中如果提示类型为any就需要加类型注解，如果提示类型为当前需要的类型就不需要加类型注解了。 例子： // 不需要类型注解 const firstNumber = 1; const secondNumber = 2; const total = firstNumber + secondNumber; const teather: { name: 'dell', age: 18 } // 需要类型注解 function getTotal(firstNumber: number, secondNumber: number) { return firstNumber + secondNumber; } const total = getTotal(1, 2); ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:9:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"7. 函数相关类型 TS中和JS中函数定义完全一致，大致方法如下： 1.function() {} 2.const hello1 = function() {} 3.const hello2 = () =\u003e {} 如下代码中函数类型的注解方法： add(): number {} //返回值为数字类型。 add(): void {} //空值，函数没有返回值。 add(): never {} //函数无法全部执行里面的代码块。 function add(first: number, second: number): number { return first + second; } const total = add(1, 2); add(): number{} function sayHello(): void { console.log('hello'); } add(): void {}，没得 return值 function errorEmitter(): never { while(true) { } console.log(123); //wile循环的语句将无法结束，后面的语句无法执行 或者 throw new Error(); console.log(123); //这段语句将不会执行 } add(): never {} function add({ first, second }: { first: number, second: number }): number { return first + second; } const total = add({ first: 1, second: 2 }); 多个参数值解构 ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:10:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"7. 数组和元组 数组的对象类型的写法实例： const arr: (number | string)[] = [1, 2, 3, 'a']; // 数组中的元素既可以是数字也可是字符 const stringArr: string[] = ['a', 'b', 'c']; const undefinedArr: undefined[] = [undefined]; const objectArr: {name: string, age: number}[] = [{ name: 'dell', age: 18 }]; // 通过 type alias 类型别名转化后的写法 type User = { name: string, age: number }; const objectArr: User[] = [{ name: 'dell', age: 18 }]; class Teather { name: string, age: number } const objectArr: Teather[] = [{ new Teather(), name: 'dell', age: 18 }]; 元组(tuple)的对象类型的写法实例： const teatherInfo: (number, string)[] = ['1', 2, 3]; //只有满足数组的形式就行数字和字符的顺序随意，只要满足要求就行，`位置，个数,类型，长度不固定`。 const teatherInfo: [string, string, number] = ['1', '2', 3]; //元组的写法，对应的数字和字符的`位置，个数,类型，长度固定`。 //处理CSV等文件(格式固定)时使用元组： const teatherList: [string, string, number][] = [ ['dell', 'male', 19], ['sun', 'female', 30], ['jeny', 'female', 26] ] ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:11:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"8. Interface接口 const getPersonName = (person: { name: string}) =\u003e { console.log(person.name); } const setPersonName = (person: { name: string}, name: string) =\u003e { person.name = name; } 将具有通用性的类型集合修改为通用的类型（interface） interface Person { name: string; // 如果name变量只能读取，不能写值的时候，可以写为： readonly name: string; age: number; // 如果age变量可有可无的话，可以写为： age?: number; [propName: string]: any; // 这种写法，可以增加任意的自定义变量类型，变量名称为任意字符串。 say(): string; //接口里面还可以定义方法。 } // interface和type的区别：最好用interface，不行的话用type（替代方案），type还可以代表类型。 type Person1 { name: string; } const getPersonName = (person: Person) =\u003e { console.log(person.name); } const setPersonName = (person: Person, name: string) =\u003e { person.name = name; } const person = { name = 'dell', age = 18， sex = 'male' //未定义的自变量这种写法不会报错，以下写法就会报错，通过函数的方式传值。 say() { return 'say hello'; // 方法必须有返回值，否则会报错。 } }; getPersonName(person); getPersonName({ name = 'dell', age = 18， sex = 'male' //这种写法就会报错，可以修改interface，增加一个其他任意类型的自定义变量，就不会报错。[propName: string]: any;。 }); setPersonName(person, 'lee'); // 类通过implements可以实现接口 class User implements Person { name = 'dell', say() { return 'say hello'; // 方法必须有返回值，否则会报错。 } } // 可以继承接口，继承其属性和方法，还可以自定义方法。 interface Teather extends Person { teach(): string; // P } // interface 还可以定义函数 interface sayHi { (word: string): string; } ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:12:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"9. 类的定义与继承 super子类调用父类的方法。 ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:13:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"10. 类中的访问类型和构造器 三个访问类型：private, protected, public 实例： class Person { name: string; private name1: string; protected name2: string; sayHi() { this.name1; this.name2; console.log('hi'); } } class Teather extends Person { public sayBye() { this.name2; } } const person = new Person(); person.name = 'dell'; console.log(person.name); person.sayHi(); // 默认为public访问类型，name: string; （public name: string;） public被隐藏了。 // public 允许在类内外被调用。 // private 允许在类内被使用。 // protected 允许在类内及继承的子类中使用。 构造器是新建一个类实例的时候调用。 // constructor class Person { public name: string; constructor(name: string) { this.name = name; } //简化 constructor(public name: string) {} } const person = new Person(); console.log(person.name) class Teather extends Person { constructor(public age: number) super('dell'); // 注意子类有构造器时，父类的属性和方法为空时，子类继承父类也需要调用super()。 } const teather = new Teather(28); console.log(teather.name) console.log(teather.age) ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:14:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"11. 静态属性static，Setter和Getter class Person { constructor(private _name: string) {} get getName() { return this._name; } set setName() { name = this._name; } } const person = new Person('dell'); person.getName; // 通过getter，就可以使用私有类的属性。 ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:15:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"12. 抽象类 抽象类定义其他类都具备的方法，其他类可以调用。 关键字abstract， abstract class name { 相同method(){} }，如果方法没有具体实现，可以定义抽象的方法为：abstract class name { abstract 相同method() }。 抽象类只能继承，不能实例化。 其他类继承抽象类，调用抽象类调用的方法和属性。 ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:16:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"13. 使用 TypeScript 编写爬虫工具 需要secretKey。 先爬取整个html页面。 需要配置爬虫项目，在项目文件夹下面输入指令：npm init -y，会在当前目录下面生成一个package.json文件。输入指令：tsc --init，会在当前目录下面生成一个tsconfig.json文件。 卸载全局安装包：ts-node，npm uninstall ts-node -g。 安装环境包：ts-node/typescript/superagent到package.json工程当中，npm install -D ts-node,npm install typescript -D，npm install superagent --save。 修改package.json： \"scripts\": { \"dev\": \"ts-node ./src/crawler.ts\" } npm run dev，运行当前项目。 npm run dev，运行当前项目。 使用cheerio进行数据提取，安装cheerio：npm install cheerio --save。 查看superagent包的js内容，打开网站输入对应包名，输入格式：@types/superagent，编写爬虫类，修改crawler.ts文件： crawler.ts // superagent库是js编写的文件，ts代码无法识别，只有通过翻译文件去帮助ts识别js文件。 // ts -\u003e .d.ts 翻译文件 @types/package -\u003e js，安装superagent对应的js翻译文件：`npm install @types/superagent -D` import superagent from 'superagent'; // `npm install @types/superagent -D` import cheerio from 'cheerio'; // `npm install @types/cheerio -D` import fs from 'fs'; import path from 'path'; interface Course { title: string; count: number; } interface CourseResult { title: string; data: Course[]; } interface Content { [propName: number]: Course[]; } class Crawler { private secretKey = 'secretKey'; private url = 'http://www.dell-lee.com/typescript/demo.html?secret=${this.secretKey}'; // private rawHtml = ''; private filePath = path.resolve(__dirname, '../data/course.json'); const courseInfos: Course[] = []; getJasonInfo(html: string) { const $ = cheerio.load(html); const courseItems = $('.course-item'); courseItems.map((index, element) =\u003e { const descs = $(element).find('.course-desc'); const title = descs.eq(0).text; const count = parseInt(descs.eq(1).text.split(': ')[1], 10); courseInfos.push({ title, count }); }); const result = { time: (new Date()).getTime(), data: courseInfos }; return result; } async getRawHtml() { const result = await superagent.get(this.url); return result.text; // console.log(result.text); 得到整个html页面文件内容。 // this.rawHtml = result.text; // this.getJasonInfo(result.text); } generateJsonContent(courseInfo: CourseResult) { // const filePath = path.resolve(__dirname, '../data/course.json'); let fileContent: Content = {}; if (fs.existsSync(this.filePath)) { fileContent = JSON.parse(fs.readFileSync(this.filePath, 'utf-8')); } fileContent[courseInfo.time] = courseInfo.data; return fileContent; } writeFile(content: string) { fs.writeFileSync(this.filePath, content); } async initSpiderProcess() { // const filePath = path.resolve(__dirname, '../data/course.json'); const html = await this.getRawHtml(); courseInfo = this.getJasonInfo(html); fileContent = this.generateJsonContent(courseInfo); this.writeFile(JSON.stringify(fileContent)); // fs.writeFileSync(this.filePath, JSON.stringify(fileContent)); } constructor() { // this.getRawHtml(); this.initSpiderProcess(); } } const crawler = new Crawler(); 使用组合设计模式优化代码，拆分以上代码为两个部分，一个需要设置爬取的网址，一个获取爬取的内容，新建一个名为dellAnalyzer.ts文件，剪切crawler.ts中的部分内容到dellAnalyzer.ts中，包括getJasonInfo方法，generateJsonContent方法，以及其方法调用的代码也要剪切到自定义的方法中。 dellAnalyzer.ts文件内容如下: import cheerio from 'cheerio'; // `npm install @types/cheerio -D` import fs from 'fs'; import { Analyzer } from './crawler'; interface Course { title: string; count: number; } interface CourseResult { title: string; data: Course[]; } interface Content { [propName: number]: Course[]; } export default class DellAnalyzer implements Analyzer { private getJasonInfo(html: string) { const $ = cheerio.load(html); const courseItems = $('.course-item'); const courseInfos: Course[] = []; courseItems.map((index, element) =\u003e { const descs = $(element).find('.course-desc'); const title = descs.eq(0).text; const count = parseInt(descs.eq(1).text.split(': ')[1], 10); courseInfos.push({ title, count }); }); const result = { time: (new Date()).getTime(), data: courseInfos }; return result; } private generateJsonContent(courseInfo: CourseResult, filePath: string) { let fileContent: Content = {}; if (fs.existsSync(filePath)) { fileContent = JSON.parse(fs.readFileSync(filePath, 'utf-8')); } fileContent[courseInfo.time] = courseInfo.data; retu","date":"2021-01-29","objectID":"/posts/TypeScript.html/:17:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"14. TypeScript的编译 通过npm配置文件package.json生成编译后的文件，提供给前端使用。 注意：nodemon第三方库: package.json: // 运行`npm run build`生成编译后的js文件位于/src文件夹下面。 \"scripts\": { \"dev\": \"ts-node ./src/crawler.ts\", \"build\": \"tsc\" } // 自定义需要编译ts文件，只编译crawler.ts文件。 \"scripts\": { \"dev\": \"ts-node ./src/crawler.ts\", \"build\": \"tsc crawler.ts\" } // 通过tsconfig.json文件自定义编译生成js文件的存放位置。取消注释和修改outDir这一行。 \"outDir\": \"./build\" // build文件夹下面生成的文件就可以提供给他人直接使用了。 // 修改代码后自动编译ts文件。 \"scripts\": { \"build\": \"tsc -w\" } // 安装监控文件变化的第三方库，npm install nodemon -D。 使用： \"scripts\": { \"build\": \"tsc -w\", \"start\": \"nodemon node ./build/crawler.js\" } // 控制台输入 npm run start即可。 // nodemon的配置 \"scripts\": { \"build\": \"tsc -w\", \"start\": \"nodemon node ./build/crawler.js\" }, \"nodemonConfig\": { \"ignore\": [\"data/*\"], // 忽略data文件夹下面的文件发生改变 } // 安装的第三方库，npm install concurrently -D。 // 在开发的环境中，编译和执行代码。控制台就输入：npm run dev:start等指令。 \"scripts\": { \"dev:build\": \"tsc -w\", \"dev:start\": \"nodemon node ./build/crawler.js\"， \"dev\": \"concurrently npm run dev:build \u0026 npm run dev:start\"，// 或者 \"dev\": \"concurrently npm:dev:*\"， } // 在控制台输入npm run dev就会并发执行指令。 ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:18:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"15. TypeScript的配置文件 控制台输入：tsc –init， 生成 ts 的配置文件tsconfig.json。 修改tsconfig.json，运行 tsc demo.ts， 生成的 demo.js 的文件，并不会按照配置文件修改的内容发生变化。 只有运行控制台输入 tsc 指令， 自动编译生成的 demo.js 的文件，才会按照配置文件修改的内容发生变化。 { \"include\": [\"./demo.ts\"], // 只编译指定的文件，这里是demo.ts。 \"exclude\": [\"./demo.ts\"], // 不编译指定的文件，编译其他文件，这里是demo.ts。 \"files\": [\"./demo.ts\"], // 指定编译文件,这里是demo.ts，还可以是其他，追加到后面即可。 \"compileOptions\": { \"removeComments\": true, // 编译时移除注释 \"strict\": true, // 表示strict区间内的选项都为true \"noImplicitAny\": true, // ts代码中的类型必须为显式(指定类型)，不能为隐式，反过来false即可。 \"strictNullChecks\": true, // 强制null类型检测。变量的值为null，undefined时，就会报错。 \"rootDir\": \"./src\", // 指定ts文件所在的目录 \"outDir\": \"./build\", // 指定js文件所在的目录 \"incremental\": true, // 渐进式编译项，编译过的内容不会再编译，只编译添加的代码。 \"allowJs\": true, // 将js文件的代码编译为\"target\": es5或者6...的语言格式。 \"checkJs\": true, // 检查js文件中代码的语法错误。 \"noUnusedLocals\": true, // 检查是否存在未被使用的变量。 }, } 注意使用ts-node demo.ts会使用tsconfig.json配置文件生成js文件并运行。 ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:19:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"16. 联合类型和类型保护 联合类型，两个类型都可以拥有，写法：类型3: 类型1 | 类型2。 类型保护，类型3的属性不能确定时属于 类型1和类型2 中的哪一个？所以需要使用类型断言：类型3 as 类型1或者类型2， 来确定类型3的属性在哪个类型之中。 interface Dog { fly: boolean; bark: () =\u003e {}; } interface Bird { fly: boolean; sing: () =\u003e {}; } // 方法一：类型断言的方式进行类型保护 function trainAnial(animal: Bird | Dog) { if (animal.fly) { (animal as Bird).sing(); }else{ (animal as Dog).bark(); } } // 方法二：in语法来做类型保护 function trainAnial(animal: Bird | Dog) { if ('sing' in animal) { animal.sing(); }else{ animal.bark(); } } // 方法三：if 判断变量类型（typeof语法）是否等于定义的类型来做类型保护 function add(first: number | string, second: number | string) { if (typeof first === 'string' || typeof second === 'string') { return `${first}${second}`; //字符串的拼接 } return first + second; } // 方法四：if 判断变量类型（instanceof语法）是否在定义的类型对象中来做类型保护 class NumberObject { // 注意：只能使用class, 不能使用interface count: number; } function addSecond(first: object | NumberObject, second: object | NumberObject) { if (first instanceof NumberObject \u0026\u0026 second instanceof NumberObject) { return first.count + second.count; } return 0; } 调用类型1或者类型2中的方法或者属性：(类型3 as 类型1或者类型2).method()。 ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:20:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"17. Enum 枚举类型 自定义枚举类型的变量，enum name = {value1, value2, value3}。 enum Status { OFFLINE, ONLINE, // 同理，如果ONLINE=4,则返回的值为0，4，5。 DELETED } // 枚举类型属性值获取正反向都可以使用，Status.OFFLINE等同于Status[0]。 // 等价于以下代码 const Status { OFFLINE: 0, ONLINE: 1, DELETED: 2 } ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:21:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"18. 函数泛型 函数的泛型：泛指的类型（generic） function join(first: string | number, second: string | number) { return `${first}${second}`; } join('1', 1); // 数字和字符都行 function join(first: string, second: string) { return `${first}${second}`; } join('1', '1'); // 只能为字符 // 函数的泛型：泛指的类型（generic） // 定义如下： function join\u003cABC\u003e(first: ABC, second: ABC) { function join\u003cABC\u003e(first: ABC, second: ABC): ABC { //返回值也为ABC类型。 return `${first}${second}`; } join\u003cstring\u003e('1', '1'); // 只能为字符,等同于上面的代码。 join\u003cstring, number\u003e('1', 1); // 数字和字符都行,等同于上面的代码。 join\u003cnumber\u003e\u003e(1, 1); // 只能为数字。 function map\u003cABC\u003e(params: ABC) { //如果ABC改为ABC的数组：params: ABC[]或者params: Arry\u003cABC\u003e，下面代码也需要更改。 return params; } map\u003cstring\u003e('123'); // 改为：map\u003cstring\u003e(['123', '456']); ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:22:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"18. 类中的泛型以及泛型类型 interface Item { name: string; } class DataManager\u003cT\u003e { class DataManager\u003cT extends Item\u003e { // interface constructor(private data: T[]) { } getItem(index: number): T { getItem(index: number): string { // interface return this.data[index]; } } // const data = new DataManager\u003cstring\u003e(['1']); // data.getItem(0); const data = new DataManager([{ name: \"dell\"; }]); // interface ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:23:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"19. 命名空间 namespace 项目环境配置搭建： 1.先初始化工程目录，npm init -y 生成package.json，tsc -init 生成tsconfig.json。 2.在工程（项目）目录下创建src,dist文件夹，在src下新建page.ts文件。 3.修改tsconfig.json文件，\"rootDir\": \"./src\",;\"outDir\": \"./dist\",。 4.在工程（项目）目录下新建index.html文件，内容如下： 5.修改page.ts如下，控制台输入：tsc -w，让其自动监听编译。 6.page.ts自定义一个Home的命名空间，将所有的类放在里面。将需要使用的类导出（export），在浏览器控制台输入Home.导出的类名就会有输出。 7.在src下新建components.ts文件，用于命名空间管理。内容如下： // index.html \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cscript src=\"./dist/page.js\"\u003e\u003c/script\u003e // 引入编译生成的js文件 \u003c/head\u003e \u003cbody\u003e \u003cscript\u003e new Home.Page(); // 对应ts文件中的export的类。 \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e // page.ts namespace Home{ class Header { constructor() { const elem = document.body.createElement('div'); elem.innerText = 'This is a Header'; document.body.appendChild(elem); } } class Content { constructor() { const elem = document.body.createElement('div'); elem.innerText = 'This is a Content'; document.body.appendChild(elem); } } class Footer { constructor() { const elem = document.body.createElement('div'); elem.innerText = 'This is a Footer'; document.body.appendChild(elem); } } export class page { constructor() { new Header(); new Content(); new Footer(); } } } 加入components.ts文件后，需要修改的内容如下： // index.html \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cscript src=\"./dist/page.js\"\u003e\u003c/script\u003e // 引入编译生成的page.js文件，如果觉得引入的js文件过多，可以修改`tsconfig.json`文件中的：\"outFile\": \"./build/page.js\",\"module\": \"amd\",；将page.js引入，就会包涵components.js中的内容。 //\u003cscript src=\"./dist/components.js\"\u003e\u003c/script\u003e // 引入编译生成的components.js文件，可以通过上面的方式注释掉。 \u003c/head\u003e \u003cbody\u003e \u003cscript\u003e new Home.Page(); // 对应ts文件中的export的类。 \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e // page.ts // 引用components.ts文件，注意：///这种引用格式必须。 /// \u003creference path='./components.ts' /\u003e namespace Home{ export class page { user: Component.User = { name: 'dell', }; constructor() { new Components.Header(); new Components.Content(); new Components.Footer(); } } } // components.ts namespace Components { export namespace SubComponents { export class Test { } } export interface User { name: string; } export class Header { constructor() { const elem = document.body.createElement('div'); elem.innerText = 'This is a Header'; document.body.appendChild(elem); } } export class Content { constructor() { const elem = document.body.createElement('div'); elem.innerText = 'This is a Content'; document.body.appendChild(elem); } } export class Footer { constructor() { const elem = document.body.createElement('div'); elem.innerText = 'This is a Footer'; document.body.appendChild(elem); } } } ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:24:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"20. import对应的模块化-缺代码，代替/// 语句 // index.html \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.js\"\u003e\u003c/script\u003e // 兼容ts配置项中：module为amd。 \u003cscript src=\"./dist/page.js\"\u003e\u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cscript\u003e require(['page'], function(page) { new page.default(); }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e // page.ts import { Header, Content, Footer } from './components'; export default class page { constructor() { new Components.Header(); new Components.Content(); new Components.Footer(); } } // components.ts export class Header { constructor() { const elem = document.body.createElement('div'); elem.innerText = 'This is a Header'; document.body.appendChild(elem); } } export class Content { constructor() { const elem = document.body.createElement('div'); elem.innerText = 'This is a Content'; document.body.appendChild(elem); } } export class Footer { constructor() { const elem = document.body.createElement('div'); elem.innerText = 'This is a Footer'; document.body.appendChild(elem); } } ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:25:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"21. 使用 Parcel 打包 TS 代码 1.进入工程目录，初始化，输入：npm init -y;tsc –init。 2.修改tsconfig.json文件：“outdir”：\"./dist\"; “rootDir”:\"./src\"，工程目录下创建dist，src文件夹。 3.在src文件夹下面创建index.html,page.ts文件。内容参照上面的代码。 4.安装parcel第三方库，npm install parcel@next -D。 5.修改package.json文件中的scripts代码块：“scripts”: {“test”: “parcel ./src/index.html”} 6.运行指令：npm run test，parcel工具会自动将ts文件编译后的代码以本地服务器的方式返回呈现给我们。 ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:26:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"22. 描述文件中的全局类型 1.代码参照上面几节，src下面的index.html中引用Jquery.js文件。 2.在src下面创建jquery.d.ts文件，让ts理解Jquery。 3.通过模块化的方式引入Jquery，安装第三方库，npm install jquery –save。代替步骤一中的引用Jquery。 4.这种方式实现如下。 // index.html \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js\"\u003e\u003c/script\u003e \u003cscript src=\"./page.ts\"\u003e\u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003c/body\u003e \u003c/html\u003e // page.ts // 方式一： $(function() { $('body').html('\u003cdiv\u003e123\u003c/div\u003e'); // new $.fn.init(); }); // 方式二： import $ from 'jquery'; $(function() { $('body').html('\u003cdiv\u003e123\u003c/div\u003e'); // new $.fn.init(); }); // jquery.d.ts 类型定义文件。帮助ts文件理解引入的js文件或者类库。 // 方式一： declare var $: (param: () =\u003e void) =\u003e void; // 声明全局变量：$函数 // 函数重载 declare function $(readyFunc: () =\u003e void): void; // 声明全局函数：$函数 declare function $(selector: string): JqueryInstance; // 声明全局函数：$函数 declare function $(param: string): { html: (html: string) =\u003e {}; }; interface JqueryInstance { html: (html: string) =\u003e JqueryInstance; } // 使用了interface的语法实现函数的重载 interface Jquery { (readyFunc: () =\u003e void): void; $(selector: string): JqueryInstance; } declare var $: Jquery; // 实现$函数的子属性和方法调用。例如：new $.fn.init(); // 如何对对象，类进行类型定义，以及命名空间的嵌套。 declare namespace $ { namespace fn { class init {} } } // 方式二： declare module 'jquery' { interface Jquery { $(selector: string): JqueryInstance; } // 混合类型 function $(readyFunc: () =\u003e void): void; function $(selector: string): JqueryInstance; namespace $ { namespace fn { class init {} } } export = $; // 导出$,再引入$。 } ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:27:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"23. keyof语法的使用 泛型类型保护，npm start语句搭建环境。 新建src的page.ts文件，代码如下： interface Person { name: string; age: number; gender: string; } type T = 'name'; key: 'name'; Person['name']; class Teather { constructor(private info: Person) { } getInfo\u003cT extends keyof Person\u003e(key: T): Person[T] { return this.info[key]; } } ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:28:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"24. Express 基础项目结构搭建，使用 Express 框架开发数据爬取及展示接口。 代码见爬虫的最后一节。 安装npm相关的依赖，指令：npm install。 解决控制台首次输入npm run dev，index.js文件不存在，不同步会报错的问题：修改package.json文件为\"dev\": “tsc \u0026\u0026 concurrently npm:dev:*” 。 安装express模块，npm install express --save，安装express模块的类型注解文件帮助ts文件理解库中js文件，npm install @types/express -D。 修改index.js文件如下： 安装第三方库body-parser解决Express库中body类型未定义的情况： npm install body-parser --save 安装第三方库cookie-session开发登陆功能： npm install cookie-session --save，安装类型注解文件，npm install @types/cookie-session -D import bodyParser from 'body-parser'; import express from 'express'; // 导入路由 import router from './router'; const app = express(); //问题一： express库的类型定义文件.d.ts文件类型描述不准确 //问题二： 当我们使用中间件的时候，对req或者res做了修改之后，实际上类型并不能改变 app.use(bodyParser.urlencoded({ extended: false })); app.use(router); // 建立路由 # app.get('/', (req, res) =\u003e { # res.send('hello world'); # }); app.listen(7001, () =\u003e { console.log('sever is running.'); }); // 使用路由，创建router.ts文件建立路由，再去index.js文件导入路由。 import { Router, Request, Response } from 'express'; // 引入Crawler中的代码 import Crawler from './crawler'; const router = Router(); router.get('/', (req: Request, res: Response) =\u003e { new Crawler(); res.send('hello world'); }); export default router; ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:29:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"25. 类的装饰器 类的装饰器，本身就是一个函数， 装饰器通过 @ 符号来使用，只对类作出修改，调用一次，装饰器和类可以写在一行。 装饰器接受的参数是构造函数。 装饰器从下到上，从右到左顺序依次执行。 // 简单装饰器的定义 function testDecorator(flag: boolean) { if (flag) { return function(constuctor: any) { constructor.prototype.getName = () =\u003e { console.log('dell'); }; }; }else { return function(constuctor: any) {}; } } @testDecorator(true); class Test { } const test = new Test(); (test as any).getName(); // 复杂装饰器的定义 function testDecorator() { return function\u003cT extends new (...args: any[]) =\u003e any\u003e(constuctor: T) { return class extends constructor{ name = 'lee'; getName() { return this.name; } }; }; } const Test = testDecorator()(class { name: string; constructor(name:string) { this.name = name; } }) const test = new Test('dell'); console.log(test.getName()); // 类中的方法加装饰器 // 普通方法，target 对应的是类的 prototype（原型）。 // 静态方法，target 对应的是类的 构造函数（constructor）。 function getNameDecorator(target: any, key: string, descriptor: PropertyDescriptor) { console.log(target， key); descriptor.writable = false; // getName方法就不能修改 } class Test { name: string; constructor(name:string) { this.name = name; } @getNameDecorator getName() { static getName() { // 静态方法 this.name; } } const test = new Test('dell'); console.log(test.getName()); // 属性的装饰器 function nameDecorator(target: any, key: string): any { 现象一： const descriptor: PropertyDescriptor = { writable: false // 属性不可以修改 }; return descriptor; 现象二： target[key] = 'lee'; // 修改的并不是实例上的name，而是原型上的name。 } // name放在实例上 class Test { @nameDecorator name: 'dell'; } const test = new Test('dell'); test.name = 'dell lee'; // 属性可以修改 console.log(test.name); // 输出实例上的name console.log((test as any).__proto__name); // 输出原型上的name // 参数装饰器，原型，方法名，参数所在的位置 function paramDecorator(target: any, method: string, paramIndex: number) { } class Test { getInfo(name: string, @paramDecorator age: number) { console.log(name, age) } name: 'dell'; } const test = new Test(); test.getInfo('dell', 30) ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:30:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["TypeScript"],"content":"25. 初始化 React 项目 先卸载原有的create-react-app，避免对新的项目产生影响，指令：npm unistall create-react-app -g。 再重新安装create-react-app，指令：npx create-react-app my-app --template typescript --use-npm。npx远程下载最新的create-react-app，–use-npm使用npm安装，避免使用默认yarn方式安装。 加入(add)web前，后端项目目录,优化和简化typescript代码。 问题1：Error: EACCES: permission denied, access ‘/usr/lib/node_modules’ 解决：sudo chown -R $USER /usr/lib/node_modules 问题2：network request to https://registry.npmjs.org/typescript failed, reason: getaddrinfo ENOTFOUND registry.npmjs.org npm ERR! network This is a problem related to network connectivity. npm ERR! network In most cases you are behind a proxy or have bad network settings. 解决：查找registry.npmjs.org的DNS解析ip地址，添加到hosts文件中。 问题3：Error: EACCES: permission denied, symlink ‘../lib/node_modules/typescript/bin/tsserver’ -\u003e ‘/usr/bin/tsserver’ 解决： It's not recommended to use sudo with npm install, follow the steps from npmjs official docs instead :) Make a directory for global installations: mkdir ~/.npm-global Configure npm to use the new directory path: npm config set prefix '~/.npm-global' Open or create a ~/.profile file and add this line: export PATH=~/.npm-global/bin:$PATH Back on the command line, update your system variables: source ~/.profile Test: Download a package globally without using sudo. npm install -g typescript Source: https://docs.npmjs.com/getting-started/fixing-npm-permissions ","date":"2021-01-29","objectID":"/posts/TypeScript.html/:31:0","tags":["TypeScript"],"title":"TypeScript","uri":"/posts/TypeScript.html/"},{"categories":["wifi","network"],"content":"wifi network command","date":"2021-01-29","objectID":"/posts/wifi-network.html/","tags":["wifi","network"],"title":"wifi network","uri":"/posts/wifi-network.html/"},{"categories":["wifi","network"],"content":"Getting started ","date":"2021-01-29","objectID":"/posts/wifi-network.html/:1:0","tags":["wifi","network"],"title":"wifi network","uri":"/posts/wifi-network.html/"},{"categories":["wifi","network"],"content":"Wifi network 相关指令 描述 指令 获取当前位置网络wifi的SSID nmcli -t -f active,ssid dev wifi |cut -d\\: -f2 ","date":"2021-01-29","objectID":"/posts/wifi-network.html/:1:1","tags":["wifi","network"],"title":"wifi network","uri":"/posts/wifi-network.html/"},{"categories":["图片处理"],"content":"图片处理","date":"2021-01-29","objectID":"/posts/%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86.html/","tags":["图片处理"],"title":"图片处理","uri":"/posts/%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86.html/"},{"categories":["图片处理"],"content":"Getting started ","date":"2021-01-29","objectID":"/posts/%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86.html/:1:0","tags":["图片处理"],"title":"图片处理","uri":"/posts/%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86.html/"},{"categories":["图片处理"],"content":"linux 下图片格式装换 convert 1.jpg 2.png ","date":"2021-01-29","objectID":"/posts/%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86.html/:2:0","tags":["图片处理"],"title":"图片处理","uri":"/posts/%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86.html/"},{"categories":["图片处理"],"content":"GMIP 处理图像 输出自定义图片格式，export save as。 ","date":"2021-01-29","objectID":"/posts/%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86.html/:3:0","tags":["图片处理"],"title":"图片处理","uri":"/posts/%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86.html/"},{"categories":["弱电工程师"],"content":"弱电工程师","date":"2021-01-29","objectID":"/posts/%E5%BC%B1%E7%94%B5%E5%B7%A5%E7%A8%8B%E5%B8%88.html/","tags":["弱电工程师"],"title":"弱电工程师","uri":"/posts/%E5%BC%B1%E7%94%B5%E5%B7%A5%E7%A8%8B%E5%B8%88.html/"},{"categories":["弱电工程师"],"content":"Getting started ","date":"2021-01-29","objectID":"/posts/%E5%BC%B1%E7%94%B5%E5%B7%A5%E7%A8%8B%E5%B8%88.html/:1:0","tags":["弱电工程师"],"title":"弱电工程师","uri":"/posts/%E5%BC%B1%E7%94%B5%E5%B7%A5%E7%A8%8B%E5%B8%88.html/"},{"categories":["弱电工程师"],"content":"计算机网络相关面试题 1.`标准网络线的颜色排列顺序` 568B 橙白 橙 绿白 蓝 蓝白 绿 棕白 棕 568A 绿白 绿 橙白 蓝 蓝白 橙 棕白 棕 直通线一般都用 `A线序`或 `B线序` 交叉线`一端`是 `568A`， `另一端`是 `568B` 2..`按照数据访问速度排序 ：硬盘、 CPU、光驱、内存` CPU 内存 硬盘 光驱 3.`网卡 MAC 是由 6组什么组成的`? 有16进制数据组成，前三组表示厂商，有 IEEE来分配，并可以在细分，后三组表示该制造商所制造的某个 网络产品（如网卡）的系列号。 4.`ISO/OSI 7 层模型是什么？` 应用层，表示层，会话层，传输层，网络层，数据链路层，物理层 5.`C/S、B/S的含义？` C/S表示客户端 /服务器的模式 C 是client，S是server； B/S是基于浏览； 6.`RFC950定义了什么？` RFC950定义了 IP的策略（分配策略） ，应用等规范。 7.`综合布线包括什么？` 综合布线包括六大子系统： 建筑群连接子系统 设备连接子系统 干线（垂直）子系统 管理子系统 水平子系统 工作区子系统 8.`路由器和交换机属于几层设备？` 路由器属于三层设备，交换机（通常所指的）属于二层设备； 9.`计算机中的端口共有多少个？` TCP0-65535，UDP0-65535 也就是共有 65536*2=131072个端口 10.`什么是 Cache 什么是 Buffer ？区别是什么？` cache，直译是高速缓存存储器，有硬件来实现。起到设备间处理速度协调作 用。例如 CPU的L2，L1，内存的作用等。 buffer，直译是缓冲区，有软件在 RAM 中实现。起到加快响应速度的作用。例如： WEB缓存，各个应用软件中的缓存，队列。 共同点都是在 RAM 中实现，但实现的方式不一样。 11.`什么是MBR？` MBR：master boot record，主引导记录。引导 OS作用的。 12.`怎么样检测 TCP/IP 正常运行？` 快捷键：windows+r 运行cmd，然后输入 ping 127.0.0.1 13.手`动更新 DHCP 分配的 IP 地址是什么？` ipconfig /renew 14.`查看编辑本地策略的命令是什么？` gpedit.msc 15.`将FAT32转换为 NTFS分区的命令是什么？` convert x: /fs:ntfs x: 表示要转换的分区 16.`C类地址有多少 ip 地址？B 类地址有多少 ip 地址？` C类：256 个 IP 地址 B类：65536 个 IP 地址 17.`常用端口号 ` ftp 传输数据：20 ftp 建立连接：21 telnet 远程管理：23 smtp 邮件收发：25 DNS 域名解析：53 http 网页服务：80 pop3，邮局协议，主要用于接收邮件：110 18.`如果一台 PC 机不能上网 ,那么你会怎么解决呢？` 检查网卡连接； 检查 IP 地址设置是否正确，如果是动态获取地址，检查有没有获取到，获取的是否正确； 检查 PC 能否同本网络其它主机通讯； 检查 PC 能否与网关通讯； 检查 PC 的 DNS 设置是否正确； 检查能否和 DNS 通讯； 检查能否 PING 通服务器； 杀毒； 19.`IP协议的定义，在哪个层上面，主要有什么作用？ TCP与UDP呢？` IP协议是网络层的协议，它实现了自动路由功能，也就是寻径的功能。 TCP协议是传输层的协议，它向下屏蔽了IP协议不可靠传输的特性，向上提供一个可靠的点到点的传输； UDP也是传输层的协议，提供的是一种无连接的服务,主要考虑到很多应用不需要可靠的连接，但需要快速的传输，如局域网中的计算机传输文件一般使用UDP协议。 20.`TCP三次握手`： 第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。 第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。 第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。 21.`TCP四次挥手` 第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。 第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。 第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。 第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。 22.`为什么建立连接是三次握手，而关闭连接却是四次挥手呢？` 这是因为服务端在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。 23.`交换机和路由器分别的实现原理是什么？分别在哪个层次上面实现的？` 交换机用在局域网中，交换机通过记录局域网内各节点机器的MAC地址就可以实现传递报文,无需看报文中的IP地址。路由器识别不同网络的方法是通过识别不同网络的网络ID号(IP地址的高端部分)进行的，所以为了保证路由成功，每个网络都必须有一个唯一的网络编号。 路由器通过察看报文中IP地址来决定路径，向那个子网(下一跳)路由。也就是说交换机工作在数据链路层看MAC地址，路由器工作在网际层看IP地址。但是由于现在网络设备的发展，很多设备既有交换机的功能有由路由器的功能(交换式路由器)使得两者界限越来越模糊。 24.`交换和路由的区别？` 交换技术和路由技术的最大区别在于他们寻址的方式以及报文的转发方式上，交换技术是发生在2层也就是数据链路层上，是直接利用mac地址建立会话； 路由技术发生在网络层，需要通过ip地址建立路由表，然后进行数据通信。在报文的转发方式上，交换技术是使用先收再转，路由技术是采用边收边转。 路由器的基本功能是数据包的转发。 25.`什么是VLAN？` VLAN又称虚拟局域网，是指在网络层对局域网进行划分，一个VLAN组成一个逻辑子网，即一个独立的广播域，各子网自己产生的广播网络流量被限制在各子网内部，降低数据帧的碰撞率，它可以覆盖多个网络设备，允许处于不同地理位置的网络用户加入到一个逻辑子网中。 26.`VLAN的特点？` VLAN（虚拟局域网）的主要特点就是安全，信息只到达应该到达的地点。 27.`如何在CISCO交换机增加一个VLAN，又如何删除？` 因此，防止了大部分基于网络监听的入侵手段。通过虚拟网设置的访问控制，使在虚拟网外的网络节点不能直接访问虚拟网内节点。 28.在CISCO交换机中如何增加一个VLAN 1的配置呢？ Switch\u003eenable Switch#vlan database Switch(vlan)#vlan 1 Switch(vlan)#exit //以下设置vlan端口： Switch(config)#int e0/6 //设置端口6从属vlan 1 Switch1(config-if)#vlan-membership static 2 Switch#vlan database Switch(vlan)#no vlan 1 Switch(vlan)#exit Switch\u003eno int vlan 1t 29.`两台笔记本电脑连起来后ping不通，你觉得可能有哪些问题可能的原因大体有以下几个：` 网线不通； 某台笔记本上的tcp/ip协议安装的不完整； ip地址配置有问题（不在一个网段上）； 1台笔记本上有防火墙，把icmp端口给屏蔽了（端口号：139）。 注意：此问题需要从osi模型上入手，从物理层往上一层层排除。 30.`A和B网络互通，C和AB网络不通，该用什么顺序检查问题？` 由近及远的顺序进行测试，如果是有vpn的话，只要确定两端和本 地网络提供支持的公司之间的网络是连通的，其他的就交个那个公司来做了，如果是自己维护的基于ddn一类的点对点网络，那么找到路由表，从最近的路由器开始ping。 31.`简述计算机从加电到启动系统时主板的工作流程，按照屏幕显示顺序描述。` 加电自检---BIOS信息---显卡的参数--CPU的参数--内存的参数--硬盘的参数---光驱的参数---显示PCI等主板的其他的I/O等参数----（如果有RAID卡这步应该会显示","date":"2021-01-29","objectID":"/posts/%E5%BC%B1%E7%94%B5%E5%B7%A5%E7%A8%8B%E5%B8%88.html/:2:0","tags":["弱电工程师"],"title":"弱电工程师","uri":"/posts/%E5%BC%B1%E7%94%B5%E5%B7%A5%E7%A8%8B%E5%B8%88.html/"},{"categories":["硬件测试相关"],"content":"硬件测试相关","date":"2021-01-29","objectID":"/posts/%E7%A1%AC%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9B%B8%E5%85%B3.html/","tags":["硬件测试相关"],"title":"硬件测试相关","uri":"/posts/%E7%A1%AC%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9B%B8%E5%85%B3.html/"},{"categories":["硬件测试相关"],"content":"Getting started ","date":"2021-01-29","objectID":"/posts/%E7%A1%AC%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9B%B8%E5%85%B3.html/:1:0","tags":["硬件测试相关"],"title":"硬件测试相关","uri":"/posts/%E7%A1%AC%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9B%B8%E5%85%B3.html/"},{"categories":["硬件测试相关"],"content":"一. PCBA测试 1.ICT ICT是In-Circuit Tester的简写，它是一种利用电脑技术，在大批量生产的电子产品生产线上，测试电路板上元器件是否正确及其参数、电路便装配是否正确的测试仪器。由于它不是模拟测试电路的功能、性能，所以也叫其为电路板的静态测试。 ICT的结构由电脑{电脑部分就是一台普通的PC机[CPU, 主板, 显卡, 内存, 硬盘, 电源, 机箱, 机箱风扇, cpu风扇散热（水冷，风冷）]，用其windows操作系统完成与测试软件的接口和在显示器上显示、打印、统计等功能}, 测试电路{测试电路分控制电路和开关电路。控制电路是控制对相应的元器件测试其参数。电阻测试其阻值，电容测试其容量，电感测其电感量等。开关电路是接通需测试的相应元器件，由继电器或CMOS半导体开关组成。}、测试压板{当压板上的塑料棒压住电路板往下压一段距离时，针床上测试针受到压缩力而良好地使测试点与测试电路连接，也就是被测元器件接入与测试电路。}及针床{测试用针床是用于接通ICT和被测电路板的一块工装板。工装板上根据电路板上的每一测试点的位置安装了一根测试针，测试针是带弹性可伸缩的，被测电路板压在针床上时，测试针和针床以及连接电缆，把电路板上每一个测试点连接到测试电路上。}和显示器、机械传动{机械传动部分包括气动压板、行程开关等机构。ICT是用压缩空气通过汽缸将压板压下、升上的。行程开关是当压板下压到指定的位置时该开关断开气路，压板停止下压动作。}等部分组成。软件部分是Windows操作系统和ICT测试软件。 ICT的结构如下： ICT的结构 具体结构 详细介绍 电脑 CPU, 主板, 显卡, 内存, 硬盘, 电源, 机箱, 机箱风扇, cpu风扇散热（水冷，风冷， 显示器） 用于windows操作系统完成与测试软件的接口和在显示器上显示、打印、统计等功能 测试电路 控制电路， 开关电路 控制电路是控制对相应的元器件测试其参数， 开关电路是接通需测试的相应元器件。 机械传动 气缸， 气动压板， 行程开关， 光电感应器 ICT是用压缩空气通过汽缸将压板压下、升上的。行程开关是当压板下压到指定的位置时该开关断开气路，压板停止下压动作。 测试压板 压板 当压板上的塑料棒压住电路板往下压一段距离时，针床上测试针受到压缩力而良好地使测试点与测试电路连接，也就是被测元器件接入与测试电路。 针床 针床 用于接通ICT和被测电路板的一块工装板 ICT的特征如下： `最大测试点数`：表示设备最多能设多少个测试点。一般电阻、电容等元件只有两条引脚，每个元件只用两个测试点就够了。ICT有多个引脚，每条引脚都需要设一个测试点。元件越多，电路板越复杂，需要测试点越多。因此，测试仪需要足够多的测试点数。目前ICT的最大测试点数可达`2048`点，已足够用了。 `可测试的元器件种类`：测试开、短路，电阻、电容、电感、二极管， 三极管、稳压管、光耦、IC等多种元器件。 `测试速度`：测试一块电路板的最少时间。测试速度与电路板的复杂程度有关。 `测试范围`：电阻的测试范围：一般0.05Ω～40MΩ；电容的测试范围：一般1pF～40000μF；电感的测试范围：一般1μH～40H；测试电压一般为0～10V；测试电流一般为1μA～80mA；频率一般为1Hz～100KHz。 `电路板尺寸`：最大的电路板尺寸一般为460×350mm。 `电阻测试`：R=U/I。 `电容测试`：小电容的测试方法与电阻类似，不过是用交流信号，利用XC=U/I 同时，XC=1/(ωC) 而得C=I/(Uω)=I/(2πfU)F是测试频率，U、I是测试信号的电压和电流有效值。大容量的电容测试用DC方法，即用直流电压加在电容两端，充电流随时间或指数减少的规律，在测试时加一定的延时时间就可测出其容量。 `电感测试`：电感的测试方法和电容的测试类似，只用交流信号测试。 `二极管测试`：二极管正向测试时，加一正向电流在二极管上，二极管的正向压降为0.7V(硅材料管)，加一反向电流在二极管上，二极管压降会很大。 `三极管测试`：先测试bc极和be极之间的正向压降，这和二极管的测试方法相同。再测试三极管的放大作用：在be极加一基极电流，测试ce极之间的电压。例如：b、e极加1mA电流时，c、e之间的电压由原来2V降到0.5V，则三极管处于正常的放大工作状态。 `跳线测试`：跳线是跨接印制板做连线用的，只有通断两种情况。测试其电阻阻值就可以判断好坏。测试方法和测试电阻是相同的。 `IC测试`：一般地讲，对IC只测试其引脚是否会有连焊、虚焊的情况，至于IC内部性能如何是无法测试出来的。测试方法是将IC的各引脚对电源VCC引脚的正反向电压测试一遍，再将各引脚对IC接地端GND引脚的正反向电压测试一遍。与正常值进行比较，有不正常的可以判断该引脚连焊或虚焊。对数字IC，采用Vector（向量）测试。向量测试类似于真值表测量，激励输入向量，测量输出向量，通过实际逻辑功能测试判断器件的好坏。如:与非门的测试,对模拟IC的测试，可根据IC实际功能激励电压、电流，测量对应输出，当作功能块测试。 ICT測試不良及常見故障的分析方法如下： ICT測試不良 分析 原因 说明 开路不良 所谓开路不良就是指在某一个短路群中，各个测试点之间本来应该是短路，但却出现了某个测试点对其所在短路群的其它测试点是开路的。 (1)PCB Open；(2)零件造成的{A．立件与漏件；B．空焊；C．零件不良};(3)测试点有问题{A．探针未接触到；B．测试点氧化；C．测试点有东西挡住；D．测试点在防焊区} 在平常出现比较多的情况是立件于漏件，空焊，PCB Open和零件不良。对于立件和漏件可以通过目检查出；PCB Open只要细心查看两测试点之间的线路，看在测试点之间是否有断线的情况发生，零件不良造成的开路不良通常是由于电阻，电感等零件损坏而造成的其本体开路。如果将一块好的PCB板与之比较发现没有差异（通常比较的是电阻），则表明测试点有问题，需检查PCB板上的测试点是否有问题或检查治具上的测试针是否有问题。 短路不良 所谓短路不良是指存在于不同的短路群中的测试点在正常情况下应该是开路的，但却出现了短路的情况。 (1)零件短路（由于在零件两端存在有锡丝而造成短路）；(2)零零件不良，本体短路（通常是由于零件损坏了的缘故）;(3)PCB短路（存在比较多的情况是：出现短路不良的两个测试点的步线十分靠近，由于印刷的原因在某处出现了短路，尤其是在印有字迹的地方要特别注意，绝大部分多数的PCB短路都发生在这里。；（4）BGA短路（可能是BGA下方的锡球短路，也有可能是BGA本体短路），这比较麻烦，必须有90%以上的把握时才能拆BGA。 对于零件短路可以通过重新焊过该零件当可解决短路不良的情况，对于零件本体短路可以通过更换零件来加以解决；对于PCB短路应首先注意测试点之间的走线，在可能出现短路的地方（尤其是在有字迹遮住的地方）在没有找到其它原因的情况下最好用笔刀割一下，在进行这个操作的时候必须很小心，不要将步线刮断了而造成新的开路不良。如果是BGA内部短路而又必须拆下来的话，就应该先验证出是否为BGA零件不良，如果是零件不良则应该换上一个OK的BGA，注意一块PCBA板的BGA拆换次数不能超过3次，否则会因为PCB板局部受热次数过多而使PCB板发生变形。 零件不良 所谓零件不良是指在ICT测试时，显示“Open Fail”在零件不良打印报表中其量测值往往与该零件的标准值不一致，而存在一定的偏移，这种偏移有时很大，有时很小。 (A)M-V：9999.99 Dev：+999.9%{（1）空焊;（2）漏件；（3）PCB开路;（4）测试点有问题：a．针未接触到；b．测试点氧化；c．测试点有东西挡住；d．测试点在防焊区}；(B)如果测试值与标准值比较只是发生了较大的偏移，而不是量测值为无穷大的情况{（1）错件；（2）有内阻的被动组件的影响；（3）测试点有问题};(C)如果量测值与标准值比较只是发生了很小的偏移，这种情况多为零件误差引起的，但是为了准确起见，最好还是通过比较的方法看是否真的是由于误差的原因而造成的量测值偏移，如果由于误差的原因造成的话，需由工程人员作相应的程序调整。；（D）在进行了上面几步后就应该检查测试点（包括高测试点和低测试点）在检查测试点的过程中可能会发现{(1）PCB开路（大约占10% 的比例）；（2）测试点有为题：a．未接触到；b．测试点氧化；c．测试点有东西挡住；d．测试点在防焊区} A:对于测试点出现的问题首先应该查看测试点是否有氧化，测试点是否在防焊区，然后查看测试治具上对应的测试针是否为未接触到测试点或是由于测试点有东西挡住，至于其它的原因，在前面已有详细的阐述，这里便不再重复了。B:如果是电容错件，有两种方法进行量测：第一种方法是拆下来量测，但这种方法通常是用来量测大电容的，而且在量测之前必须知道它的容值，对于小电容无法准确量出，因为电容被焊接的关系，它的容值会发生改变；第二种方法是通过比较的方法直接在PCB板上进行量测，但必须注意所要比较PCB板应该是一块好的板子，并且注意到在量测时要保持测试笔的方向一致（即红、黑表笔所对应的电容两端应该一致）。这种方法也只能用来测量大电容。C:??。D：PCB开路应该进行分段量测；PCB短路有10%测不出，这可能是因为没有测试点或者是由于将10欧以下的电阻判断为短路了。在IC开路测试不良中，会出现电压值偏大的情况，出现这种情况的原因绝大部分部分在于PCB开路或存在有空焊。通过量测会发现，在电压偏大的两测试点之间的阻抗值偏大，为了查","date":"2021-01-29","objectID":"/posts/%E7%A1%AC%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9B%B8%E5%85%B3.html/:1:1","tags":["硬件测试相关"],"title":"硬件测试相关","uri":"/posts/%E7%A1%AC%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9B%B8%E5%85%B3.html/"},{"categories":["浏览器"],"content":"网页浏览器","date":"2021-01-29","objectID":"/posts/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8.html/","tags":["浏览器"],"title":"网页浏览器","uri":"/posts/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8.html/"},{"categories":["浏览器"],"content":"Getting started ","date":"2021-01-29","objectID":"/posts/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8.html/:1:0","tags":["浏览器"],"title":"网页浏览器","uri":"/posts/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8.html/"},{"categories":["浏览器"],"content":"火狐浏览器开启DNS-over-HTTPS（DoH）解决DNS污染 更新火狐浏览器至62以上版本（仅安卓、PC和Mac支持DoH功能），在浏览器地址栏输入about:config，点击“我了解此风险” 在新打开的页面顶部搜索框， 搜索network.trr 双击network.trr.mode，将值改为2（默认是 0；2 表示尝试使用 DoH，如果不行就退回到传统方式；5 表示任何情况下都不用 DoH 功能） 双击network.trr.uri，将值改为支持DoH的未污染服务器地址，可以输入一些公共的，如https://mozilla.cloudflare-dns.com/dns-query，也可以自己搭建。 通过以上步骤，你已经成功开启了火狐浏览器隐藏功能DoH，可以避免自己的DNS查询记录被监控收集和恶意篡改，不再受困于DNS污染而无法正常访问某些网站。 此外，你还可以在地址栏输入about:networking选择DNS选项，查看DNS查询状态。 ","date":"2021-01-29","objectID":"/posts/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8.html/:1:1","tags":["浏览器"],"title":"网页浏览器","uri":"/posts/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8.html/"},{"categories":["浏览器"],"content":"chrome浏览器开启DNS-over-HTTPS（DoH）解决DNS污染 Open Settings: In your address bar, type the following and hit Enter chrome://flags/#dns-over-https. It takes you to Secure DNS lookups Enable DNS over HTTPS: Click on Secure DNS lookups radio button to enable DoH. Configure Cloudflare DNS: Your browser infers the DNS over HTTPS provider you want based on your system DNS. To benefit from Cloudflare DoH, make sure your system is properly configured. ","date":"2021-01-29","objectID":"/posts/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8.html/:1:2","tags":["浏览器"],"title":"网页浏览器","uri":"/posts/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8.html/"},{"categories":["浏览器"],"content":"chromium浏览器开启DNS-over-HTTPS（DoH）解决DNS污染 /usr/bin/chromium %U –host-resolver-rules=“MAP * ~NOTFOUND , EXCLUDE 127.0.0.1” --enable-features=\"dns-over-https\u003cDoHTrial\" --force-fieldtrials=\"DoHTrial/Group1\" --force-fieldtrial-params=\"DoHTrial.Group1:server/https%3A%2F%2Fcloudflare-dns%2Ecom%2Fdns-query/method/POST my chrominum conf: /usr/bin/chromium %U --enable-features=\"dns-over-https\u003cDoHTrial\" --force-fieldtrials=\"DoHTrial/Group1\" --force-fieldtrial-params=\"DoHTrial.Group1:server/https%3A%2F%2Fcloudflare-dns%2Ecom%2Fdns-query/method/POST\" --proxy-server=\"socks5://127.0.0.1:7891\" --host-resolver-rules=\"MAP * ~NOTFOUND , EXCLUDE 127.0.0.1\" ","date":"2021-01-29","objectID":"/posts/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8.html/:1:3","tags":["浏览器"],"title":"网页浏览器","uri":"/posts/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8.html/"},{"categories":["浏览器"],"content":"浏览器插件： https-everywhere， swithyproxyomega, noscript, CanvasBlocker, Cookie-AutoDelete， adblockplus， WebRTC Leak Shield，Privacy Badger, Selenium IDE, WebRTC Network Limiter ","date":"2021-01-29","objectID":"/posts/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8.html/:1:4","tags":["浏览器"],"title":"网页浏览器","uri":"/posts/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8.html/"},{"categories":["软件测试"],"content":"软件测试","date":"2021-01-29","objectID":"/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95.html/","tags":["软件测试"],"title":"软件测试","uri":"/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95.html/"},{"categories":["软件测试"],"content":"Getting started ","date":"2021-01-29","objectID":"/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95.html/:1:0","tags":["软件测试"],"title":"软件测试","uri":"/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95.html/"},{"categories":["软件测试"],"content":"一. 黑白盒测试 1.优秀公司 1.垃圾公司 广州市铂桥信息科技有限公司：培训机构!打着招聘岗位的培训机构! ","date":"2021-01-29","objectID":"/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95.html/:1:1","tags":["软件测试"],"title":"软件测试","uri":"/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95.html/"},{"categories":["软件测试"],"content":"软件测试","date":"2021-01-29","objectID":"/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95.html/","tags":["软件测试"],"title":"软件测试","uri":"/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95.html/"},{"categories":["软件测试"],"content":"Getting started-包括面试题 ","date":"2021-01-29","objectID":"/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95.html/:1:0","tags":["软件测试"],"title":"软件测试","uri":"/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95.html/"},{"categories":["软件测试"],"content":"一. 黑白盒测试 1.黑盒测试和白盒测试 黑盒测试：已知产品的功能设计规格，可以进行测试证明每个实现了的功能是否符合要求。 白盒测试：已知产品的内部工作过程，可以进行测试证明每种内部操作是否符合设计规格要求，所有内部成分是否经过检查。 2.黑盒测试和白盒测试的区别 区别 黑盒测试 白盒测试 测试特点 测试功能 测试程序接口与结构 测试依据 需求规格说明书 软件程序 方法举例 等价类划分、边界值测试 逻辑覆盖 优点 能站在用户的立场上进行测试 对程序内部特定部位进行覆盖测试 缺点 不能测试程序内部特定部位，如程序有误，则无法发现 无法检验程序外部特性 注意 黑盒测试把程序看作一个不能打开的黑盒子，在完全不考虑程序内部结构和内部特性的情况下，针对“软件界面”和“软件功能”进行测试，只检查功能是否符合需求规格说明书能正常使用。因此黑盒测试又叫功能测试或数据驱动测试。首先了解产品需求，找出bug， 黑盒测试主要是为了发现以下错误： （1）是否有不正确或者遗漏了的功能； （2）在接口上，输入能否正确的接受？能否输出正确的结果？ （3）是否有数据结构错误或外部信息（例如数据库文件）访问错误？ （4）性能上是否能够满足要求？ （5）是否有初始化或终止性错误？ 黑盒的测试用例技术设计有三种： `边界值分析`、`等价类划分`、`错误推测法`。 白盒测试是对软件的过程性细节做细致的检查。这种方法是把测试对象看作一个打开的盒子，他允许测试人员利用程序内部的逻辑结构及有关信息，设计或选择测试用例，对程序所有逻辑路径进行测试。通过在不同点检查程序状态，确定实际状态是否与预期的状态一致。因此白盒测试又称为”结构测试“或”逻辑驱动测试“。白盒测试是按照程序内部的结构来测试程序，通过测试检验产品内部动作是否按照设计规格说明书的要求正常进行，检验程序中的每条通道是否都按照规定正常工作。 白盒测试主要是想对程序模块进行以下检查： （1）对程序模块的所有独立的执行路径至少测试一遍； （2）对所有的逻辑判定，取”真“与”假“的两种情况都能至少测一遍； （3）在循环的边界和运行的界限内执行循环体； （4）测试内部数据结构的有效性，等等； （5）`静态白盒测试`:即代码审查，正式审查和检验设计和程序代码； （6）`动态白盒测试`:利用查看代码功能和实现方式得到的信息来设计和执行测试，也叫结构测试； 白盒的测试用例技术包括`逻辑覆盖`和`基本路径测试`。 `逻辑覆盖`：是以程序内在逻辑结构为基础的测试用例设计技术，这一方法要求测试人员对程序的逻辑结构有清楚的了解。 `基本路径测试`：在程序控制流程图的基础上，通过分析控制构造的环路复杂性，导出基本可执行路径集合，从而设计测试用例。 ","date":"2021-01-29","objectID":"/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95.html/:1:1","tags":["软件测试"],"title":"软件测试","uri":"/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95.html/"},{"categories":["软件测试"],"content":"二. 测试用例设计方法 常见的测试用例设计方法1 常见的测试用例设计方法2 常见的测试用例设计方法3 1.等价类划分 `等价类`是指某个`输入域`的`子集合`.在该`子集合`中,各个`输入数据`对于揭露`程序中的错误`都是`等效的`.并合理地假定:`测试某等价类的代表值就等于对这一类其它值的测试`。 把输入数据合理地划分`等价类`，在每一个`等价类`中取一个`典型值`或`任意值`作为测试的`输入条件`，就**可以用少量的代表性的测试数据，取得更好的测试效果**。 `等级类划分`又分为：`有效等价类`和`无效等价类` 划分等价类的标准： 1)完备测试、避免冗余; 2)划分等价类重要的是：集合的划分，划分为互不相交的一组子集，而子集的并是整个集合; 3)并是整个集合：完备性; 4)子集互不相交：保证一种形式的无冗余性; 5)同一类中标识（选择）一个测试用例，同一等价类中，往往处理相同，相同处理映射到\"相同的执行路径\"。 ⚠️ 注意：软件不仅要能接收合理的数据，也要能经受意外的考验。因此在划分等价类的时候不仅要考虑合理的、有意义的输入数据构成的集合，还要考虑不合理的或无意义的输入数据所构成的集合。我们将前者称为有效等价类，它能验证需求是否实现，后者则为无效等价类，能检验是否会出现异常。无效等价类至少应有一个，也可能有多个，视具体情况而定。 划分等价类的方法 1)在输入条件规定了`取值范围或值的个数`的情况下,则可以确立`一`个`有效等价类`和`两`个`无效等价类`。如：输入值是学生成绩，范围是0～100； 2)在输入条件规定了输入值的集合或者规定了\"必须如何\"的条件的情况下,可确立一个`有效等价类`和一个`无效等价类`； 3)在输入条件是一个布尔值的情况下,可确定一个有效等价类和一个无效等价类。 4)在规定了输入数据的一组值（假定n个）,并且程序要对每一个输入值分别处理的情况下,可确立n个有效等价类和一个无效等价类。 **例：输入条件说明学历可为:专科、本科、硕士、博士四种之一，则分别取这四种这四个值作为四个有效等价类，另外把四种学历之外的任何学历作为无效等价类。** 5)在规定了输入数据必须遵守的规则的情况下,可确立一个有效等价类（符合规则）和若干个无效等价类（从不同角度违反规则）； 6)在确知已划分的等价类中各元素在程序处理中的方式不同的情况下,则应再将该等价类进一步的划分为更小的等价类。 EXAMPLE 需求：要求用户输入年份，年份限定在1980年~2020年，由4位数字表示。 使用等价类划分法，首先确定有效等价类：4位数字字符且年份为1990~2020，然后确定无效等价类：如输入的类型和长度不合理，年份超出范围等，具体如下表所示： 年份限定在1980年~2020年 \" 年份限定在1980年~2020年 设计测试用例 在确立了等价类后,可建立等价类表,列出所有划分出的等价类输入条件：有效等价类、无效等价类，然后从划分出的等价类中按以下三个原则设计测试用例： 1)为每一个等价类规定一个唯一的编号； 2)设计一个新的测试用例,使其尽可能多地覆盖尚未被覆盖地有效等价类,重复这一步，直到所有的有效等价类都被覆盖为止； 3)设计一个新的测试用例,使其仅覆盖一个尚未被覆盖的无效等价类,重复这一步，直到所有的无效等价类都被覆盖为止。 2.边界值分析法 是等价类划分的`补充`。`测试经验`得知，错误更容易发生在`边界值`。所以`设计用例`应`重点测试边界`情况，如正好等于，刚刚大于，稍微小于。从`过往的经验`来看，大量的错误发生在`输入或输出范围的边界`上，而`不是在输入输出范围的内部`。因此针对各种`边界情况设计测试用例`，有很大的概率可以查出更多的错误。**这种对输入或输出的边界值进行测试的方法就是边界值法**, 边界值法多用于对数据进行测试，在数据测试的时候，除了要关注边界值还要关注`默认值`，`空白`，`空值`，`零值`和`无`。除上述`常规数据`外，`非常规的数据`还要关注`非法值`、`错误值`、`不正确值`和`垃圾数据`，即所有可能的`无效等价类数据`，要特别说明的是，使用`边界值法`不仅只考虑`输入数据`，也应该考虑`输出数据`。 3.因果图分析法 因果图分析法是一种图解法分析输入的各种组合情况，从而设计测试用例的方法。它适合于检查程序输入条件的各种组合情况。 因果图法设计测试用例的步骤： 1、根据`程序规格说明书`描述的语义内容，分析并`确定“因”（即输入条件或输入条件的等价类）和“果”（即输出条件）`； 2、将“因”和“果”`表示成“因果图”`； 3、在`因果图`上使用`约束符号`来表明`约束条件`； 4、将得到的`因果图`转换成`判定表`； 5、根据`判定表`中`每一列`(无效情况除外)设计一个`测试用例` 4.判定表分析法 判定表是分析和表达``多逻辑条件下执行不同操作的情况的工具。组成：条件桩，动作桩，条件项，动作项。 判定表分析法设计测试用例的步骤： 1、`列出`所有`条件桩`和`动作桩`。 2、`添入``条件项`和`动作项`。 3、生成`初始判定表`。 4、`简化合并`相似`规则`，形成`简化判定表`。 6.错误推测法 根据实际经验或推测分析列出所有可能存在的和容易发生错误的情况，并有针对性的设计测试用例。在测试程序时，人们可以根据经验或直觉推测程序中可能存在的各种错误，从而有针对性地编写检查这些错误的测试用例的方法，这种方法被称为错误推断法。 例如: (1)类似模块曾出现的错误 (2)输入输出为0的情况 (3)上传表格无数据或有1条数据的情况 (4)sql查询条件有in的情况，条件为空的场合 7.场景分析法 指测试者根据用户场景模拟用户操作进行测试。 现在的软件几乎都是用事件触发来控制流程的，事件触发时的情景便形成了场景，而同一事件不同的触发顺序和处理结果就形成事件流。这种在软件设计方面的思想也可引入到软件测试中，可以比较生动地描绘出事件触发时的情景，有利于测试设用例场景用来描述流经用例的路径，从用例开始到结束遍历这条路径上所有基本流和备选流。 步骤： 1) 画出需要测试路径的`流程图`(一般选择工具Office Visio) 2) 分析`基本流`和`备选流`和`异常流`,`基本流`表示通过业务流程时输入都正确，能达到目标；`备选流`表示通过业务流程时输入错误（或者操作错误）导致流程存在反复，但是经过纠正后仍能达到能达到目标；`异常流`是指通过业务流程时输入错误（或者操作错误）产生异常终止流程 。 3) 根据基本流和备选流设计测试用例 8.整个信息结构: 整个信息结构 \" 整个信息结构 ","date":"2021-01-29","objectID":"/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95.html/:1:2","tags":["软件测试"],"title":"软件测试","uri":"/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95.html/"},{"categories":["软件测试"],"content":"二. 测试用例应该包含那些内容;要素? 1：用例编号 测试用例编号是由字母和数字组合而成的，用例的编号应该具有唯一性（每个测试用例的唯一编号），易识别性，有助于其和测试结果、错误报告等其他文档的链接。这样看到编号就可以知道是做的什么测试，测试的对象是什么，也方便维护。 2：测试模块 你现在这个测试用例所测的项目名，可以是测试用例所属的大类，被测需求，被测的模块，或者是被测的单元,讲述此测试用例的大模块。 3：用例的标题 测试标题是对测试用例的简单描述。用概括的语言描述该测试用例的测试点。每个测试用例的标题不能够重复，因为每个测试用例的测试点事不一样的,用简单的一句话来描述此测试用例。 4：测试级别 按照测试用例的重要性来给不同的测试用例分级别,重要级别分为高中低三等： 高：保证系统基本功能、重要特性、实际使用频率比较高的用例； 中：重要程度介于高和低之间的测试用例； 低：实际使用频率不高，对系统业务功能影响不大的模块或功能的测试用例。 5：测试目的和条件 描述设计此测试用例的目的是什么和执行此测试用例``之前需要做的准备。 6:测试输入 测试用例执行时，需要输入的外部信息, 测试人员执行测试所需的动作。 7：操作步骤 执行当前测试用例所要经过的操作步骤，需要给出每一步操作的详细描述，测试人员根据测试用例操作步骤，完成测试用例的执行 8：预期结果 在检查点上待测功能应有的正常反应、运作或显示。 ","date":"2021-01-29","objectID":"/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95.html/:1:3","tags":["软件测试"],"title":"软件测试","uri":"/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95.html/"},{"categories":["软件测试"],"content":"三. 做好测试用例的关键是什么？ 关键在于：深刻了解产品需求、业务流程、业务逻辑，熟练使用常见的编写测试用例的方法，做好用例评审，写用例之前可以征询相关人员的意见。 白盒测试用例设计的关键是以较少的用例覆盖尽可能多的内部程序逻辑结果。 黑盒法用例设计的关键同样也是以较少的用例覆盖模块输出和输入接口。不可能做到完全测试，以最少的用例在合理的时间内发现最多的问题。 ","date":"2021-01-29","objectID":"/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95.html/:1:4","tags":["软件测试"],"title":"软件测试","uri":"/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95.html/"},{"categories":["软件测试"],"content":"四. 所有面试题： 01、`您所熟悉的测试用例设计方法都有哪些？请分别以具体的例子来说明这些方法在测试用例设计工作中的应用。` 答：有黑盒和白盒两种测试种类，黑盒有等价类划分法，边界分析法，因果图法和错误猜测法。白盒有逻辑覆盖法，循环测试路径选择，基本路径测试。 例子：在一次输入多个条件的完整性查询中。利用等价类划分法则和边界分析法则，首先利用等价划分法，可以一个或多个结果是OK的测试用例，然后确认多个NG的测试用例，然后利用边界值分析法，可以对结果分别是OK和NG的测试用例进行扩展和补充。 02、`您认为做好测试用例设计工作的关键是什么？` 答：测试用例设计工作的关键是对可行的和不可行的都要考虑。 1，输入 2，详细的操作步骤 3，预期输出 4，实际输出。 03、`您在从事性能测试工作时，是否使用过一些测试工具？如果有，请试述该工具的工作原理，并以一个具体的工作中的例子描述该工具是如何在实际工作中应用的。` 答：有使用过LoadRunner，该工具能够录制测试人员的操作步骤，然后对这个操作步骤模拟出多个用户来播放出来。 1、Visural User Genertor 创建脚本，选择协议，录制操作，编辑操作。 2、中央控制器（Controller）调度虚拟用户，创建场景，选择脚本，建立虚拟用户，设计shedual，设置ip spoofer。 3、运行脚本。分析shedual。 4、分析测试结果。 04、`您认为性能测试工作的目的是什么？做好性能测试工作的关键是什么？` 答：性能测试工作的目的是检查系统是否满足在需求说明书中规定的性能，性能测试常常需要和强度测试结合起来，并常常要求同时进行软件和硬件的检测。 性能测试主要的关注对象是响应时间，吞吐量，占用内存大小（辅助存储区），处理精度等。 05、`在您以往的工作中，一条软件缺陷（或者叫Bug）记录都包含了哪些内容？如何提交高质量的软件缺陷（Bug）记录？` 答：检测时间，系统环境，硬件环境，严重程度，程式版本，确认人，功能模板，问题描述，详细操作步骤，是否会重现。 问题描述和详细操作步骤要尽可能详细。Bug应该尽量用书面语，对于严重程度比较高的缺陷要在相同环境下测试一遍。 在C\\S模式下，如果条件满足可以使用替换法来确认是client端的问题还是server端的问题。 06、`你对测试最大的兴趣在哪里？为什么？` 答：最大的兴趣就是具有挑战性。 因为我并不知道哪里会出现bug，在找到一个bug后会很高兴。并且测试需要很强的耐心和细心。我可以很容易的找到一些细节问题。 07、`测试活动中，如果发现需要文档不完善或者不准确，怎么处理？` 答：要及时的与项目经理进行沟通协调。要在邮件中详细的把不完善不准确的地方描述出来，并提出自己的意见。 08、`你认为做好测试计划工作的关键是什么？` 答：首先，要有一个明确的目标，详细的阅读需求文档说明。 其次，要对整个测试人员、测试时间、测试进度进行一个预估，并预先进行管理。 最后，要对整个测试流程设定一个规范，所有测试人员都按着规范做事，不能随心所欲的测试。 09、`软件配置管理工作开展的情况和认识？` 答：拿到一台裸机过后要安装客户需要的操作系统，并且安装一些所必须的软件。 10、`你觉得软件测试通过的标准应该是什么样的？` 答：测试用例完全执行，测试用例覆盖到所有的测试点，并且缺陷的密度达到客户的需求。 11、`软件测试的文档测试应当贯穿于软件生命周期的全过程，其中用户文档是文档测试的重点。那么软件系统的用户文档包括哪些？` 答：用户安装文档、用户配置文档、用户使用手册、联机指导等。 12、`简述软件系统中用户文档的测试要点？` 答：完整性：用户文档中功能的描述要完整的。不能让用户产生疑问。 一致性：用户文档中的功能描述要与实际软件中的功能一致。不能描述过盛。 易使用性：用户文档描述的内容要方便用户阅读并且能够让用户很清楚的知道如何操作。 图表：有的时候用图表描述会很明了。 13、`什么是系统瓶颈？` 答：系统瓶颈就是软件在一定的并发量、访问量下无法达到用户的需求。 比如说用户需要在10s内完成一个访问，但是每一次都要12s才能完成，这个就是性能瓶颈，有可能是程序本身的问题，也有可能和操作系统、软件相关。 14、`没有产品说明书和需求文档地情况下能够进行黑盒测试吗？` 答：可以。 这个情况下我们就要进行探索性测试，把软件当成用户需求，一步步进行测试。凭借经验判断功能正确与否，有的时候还可以与项目经理、开发人员一起进行交流沟通，从而进行更好的测试。 15、`为什么尽量不要让时间富裕的员工去做一些测试？` 首先，专业的测试人员是有一定的技能和耐心对软件一步一步进行测试。如果让时间充裕的员工去测试的话，他可能心思并不在测试上面。会很随意的、没有目标的进行测试。这样子的话测试并不完整，有的时候甚至很重要的bug都没法找出。所以还是需要专业的测试人员来进行测试的。 16、`完全测试程序是可能的吗？` 不可能 测试人员对程序进行测试，只能找出程序中的bug，但是并不能保证程序是没有bug的。 完全的测试要花费很多的人力财力，并且测试的数据量过大，很浪费时间。测试的结果还很多，有的都是类似的，没有必要进行相同的测试。所以完全测试是不可能的。 18、`软件测试的风险主要体现在哪里？` 主要体现在没法完全测试。有些问题可能隐藏在没有测到的地方。这样子就被忽略了。客户使用的时候并不熟悉软件是如何操作的。可能有的时候会误点点出问题。这样子的话我们就要承担很大的风险了。 发现的缺陷越多，说明软件缺陷越多吗？ 是的，通常如果发现一个缺陷的话，有的时候会发现很多类似的缺陷，因为由于开发人员的习惯，可能一个地方有错误，另外一个地方就会有相同的错误。 19、`所有的软件缺陷都能修复吗？所有的软件缺陷都要修复吗？` 从理论上来说所有的缺陷都是可以修复的，但是并不是所有的缺陷都要修复。 一些对于软件没有影响的、不影响使用的缺陷我们可以不用修复。因为修复些细小的缺陷也是需要花费很多时间。项目上面可能会因为时间问题而先忽略这些小缺陷。 20、`开发人员老是犯一些低级错误怎么解决？` 要在开发的前期就制定好一些编码规范，这样子可以减少很多因为个人习惯引起的错误。同时，测试人员在发现开发人员犯一些低级错误的时候不可以指责他们，要耐心的给他们指出错误所在。然后可以有开发人员自己进行测试，找出一些一眼看得出来是错误的地方。 21、`您在以往的测试工作中都曾经具体从事过哪些工作？其中最擅长哪部分工作？` 我一般都是做的Web测试，搭建测试环境，对于一个程序进行集成测试，系统测试，回归测试等。还要编写测试用例以及一些文档，用户使用手册，功能测试文档等等。最擅长的是功能测试。 22、`开发人员说不是bug时，你如何应付？` 首先把自己的理由告诉开发人员。在同开发人员沟通到底是不是bug，但是如果开发人员还是认为不是bug的话，就把这个问题提到项目经理处，同时附上自己的理由。有项目经理决定是否为bug。 23、`软件测试项目从什么时候开始为什么？` 一般软件测试越早展开越好，一般是从需要阶段就要进行软件测试。软件测试不仅是测试功能，对于需求文档一类的也要进行测试。越早的找出bug，就会减少后续开发人员修改程序的次数，并且可以降低成本，如果等整个软件开发的差不多了发现一个致命的错误的话，是需要花费很多时间和人力来重新修改的。如果在一开始就发现的话就不会出现这种情况了。 24、`你能不能说下你的3-5年的职业规划？` 首先，要巩固自己的测试基础知识，在基本知识扎实的情况下提高理解需求文档地能力。 其次，学习自动化测试工具，并将它运用到测试中。 然后，在测试技术达到一定程度后，要学会如何带领一个测试团队。 最后，争取在最快的时间内达到测试经理的水平。 25、`功能测试用例需要详细到什么程度才是合格的？` 测试用例覆盖到所有的测试点。 26、`一个缺陷测试报告的组成？` 缺陷编号、缺陷标题、缺陷描述、缺陷的优先级、缺陷的重要程度、缺陷所述的模块、缺陷所属的版本、缺陷所属的开发人员、输入数据、输出结果、缺陷分析等。 27、`测试用例通常包括哪些内容？` 用例编号、测试环境、用例标题、输入数据、预期结果等 28、`你都用什么测试方法？` 根据不同的系统和模块有不同的方法。主要是黑盒测试和白盒测试。 29、`软件的评审一般由哪些人员参加？其目的是什么？` 参加人员：客户、项目经理、开发人员、测试人员 目的：查看软件在未正式投入运行前是否还存在问题。对于不同软硬件平台能否正常运行，是否有与客户理解不一致的地方，同时可以对一些可以改进的地方再多加改进。 30、`什么是软件测试，软件测试的目的？` 软件测试是通过人工或者自动化的操作进行还没有商业化用途的程序，查看他们的功能是否满足客户需求。 目的：在最短时间内找出尽可能多的软件缺陷。 31、`什么是兼容性测试？` 兼容性测试是检查软件在不同软件平台，硬件平台上是否可以正常运行的测试。主要查看软件在不同操作系统、浏览器、数据库中是否运行正常。 32、`什么是软件测试？` 答：为了发现程序中的错误而执行程序的过程 33、`软件测试的对象有哪些？` 答：软件测试并不等于程序测试。软件测试应贯穿于软件定义与开发的整个期间。 需求分析、概要设计、详细设计以及程序编码等各阶段所得到的文档，包括需求规格说明、概要设计规格说明、详细设计规格说明以及源程序，都应成为软件测试的对象。 34、`当测试过程发生错误时，有哪几种解决办法？` 答：1）跳转到别的测试过程 2）调用一个能够清除错误的过程 3）退出过","date":"2021-01-29","objectID":"/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95.html/:1:5","tags":["软件测试"],"title":"软件测试","uri":"/posts/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95.html/"},{"categories":["面试相关问题"],"content":"面试相关问题","date":"2021-01-29","objectID":"/posts/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98.html/","tags":["面试相关问题"],"title":"面试相关问题","uri":"/posts/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98.html/"},{"categories":["面试相关问题"],"content":"Getting started ","date":"2021-01-29","objectID":"/posts/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98.html/:1:0","tags":["面试相关问题"],"title":"面试相关问题","uri":"/posts/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98.html/"},{"categories":["面试相关问题"],"content":"一. 面试相关问题和试题 A.试题 1.\u003e与\u003e\u003e的区别 \u003e 定向符[输出] 将字符写入到文本，并覆写原来的字符 \u003e\u003e 定向符[输出] 将字符写入到文本，并追加到字符末尾 \u003c 定向符[输入] 配合set /p 使用时，从指定的文件中获取字符串 赋值给变量 示例 [将1.txt中第1行内容赋值给变量 wind] set /p wind=\u003c1.txt 获取 1.txt 中的字符 for /f \"skip=1 tokens=2,3* delims=,\" %%i in (1.txt) do echo %%i 3.“IP地址/ 数字” 是什么意思？ 数字是子网掩码位（数），例如 192.168.5.12/21 ，说明子网掩码由21个1组成，即 子网掩码是：11111111 11111111 11111000 00000000 ，也就是255.255.248.0.  在一个网段中能够支持多少个主机使用呢？ 192.168.5.12/21 8*4-21=11 2^11-2 主机数为：2n 可用主机数为 : 2n-2  例如192.168.1.0/24能够支持多少个主机？ 2^8-2=254 所以能支持254个IP地址 4.pushd 和 popd 切换当前目录 指令 详解 c: \u0026 cd/ \u0026 md mp3 在 C:/ 建立 mp3 文件夹 md d:/mp4 在 D:/ 建立 mp4 文件夹 cd /d d:/mp4 更改当前目录为 d:/mp4 pushd c:/mp3 保存当前目录，并切换当前目录为 c:/mp3 popd 恢复当前目录为刚才保存的 d:/mp4 5.对当前目录里所有的txt文件执行 find 命令 for /r . %%i in (*.txt) do find \"abc\" %%i 6.DHCP：Dynamic Host Configuration Protocol 动态主机配置协议 主要作用是集中的管理、分配IP地址，使网络环境中的主机动态的获得IP地址、Gateway地址、DNS服务器地址等信息，并能够提升地址的使用率。  SQL Server是微软的一套数据库，可用于建立数据库逻辑,并将数据进行物理存放。该数据库包含所有管理、配置和报告数据。包含应用程序使用的所有表定义、索引、约束和数据库存储过程。 7.call start 1.调用结果不同:call多个进程变量互通。start只能把参数或变量传给被调用的批处理。 2.调用方式不同:start批处理中调用外部程序的命令，该外部程序在新窗口中运行，批处理程序继续往下执行，不理会外部程序的运行状况 CALL命令可以在批处理执行过程中调用另一个批处理，当另一个批处理执行完后，再继续执行原来的批处理 3.调用范围不同:CALL主要用来进行批处理的内部调用，start批处理中调用外部程序的命令。 8.网段 1.网络地址=IP地址\u0026子网掩码 2.广播地址=IP地址|（！子网掩码） 3.网段：网络地址相同的IP地址属于同一网段，即同一子网。 4.网关：同一网段（子网）间终端可直接通信，如终端A和终端B；不在同一网段（子网）的终端不能直接通信，需要通过网关才能通信，如终端A和终端C。 IP地址、子网掩码、网络地址、广播地址、网段、网关的关系 类别 终端A 终端B 终端C IP地址 192.168.1.10 192.168.1.23 192.168.1.40 子网掩码 255.255.255.224 255.255.255.224 255.255.255.224 网络地址 192.168.1.0 192.168.1.0 192.168.1.32 广播地址 192.168.1.31 192.168.1.31 192.168.1.63 网段 192.168.1.0~192.168.1.31 192.168.1.0~192.168.1.31 192.168.1.31~192.168.1.63 网关 192.168.1.1 192.168.1.1 192.168.1.32  IP地址类别 IP地址类别 \" IP地址类别 9.进制转换 二、八、十、十六进制之间关系的结构图： 二、八、十、十六进制之间关系的结构图 \" 二、八、十、十六进制之间关系的结构图 注意：在数字后面加上不同的字母来表示不同的进位制。B（Binary)表示二进制，O（Octal）表示八进制，D（Decimal）或不加表示十进制，H（Hexadecimal）表示十六进制。例如：(101011)B=(53)O=(43)D=(2B)H (一) （二、八、十六进制） → （十进制）  A.二进制 → 十进制 方法：二进制数从低位到高位（即从右往左）计算，第0位的权值是2的0次方，第1位的权值是2的1次方，第2位的权值是2的2次方，依次递增下去，把最后的结果相加的值就是十进制的值了。 例：将二进制的(101011)B转换为十进制的步骤如下： 1. 第0位 1 x 2^0 = 1； 2. 第1位 1 x 2^1 = 2； 3. 第2位 0 x 2^2 = 0； 4. 第3位 1 x 2^3 = 8； 5. 第4位 0 x 2^4 = 0； 6. 第5位 1 x 2^5 = 32； 7. 读数，把结果值相加，1+2+0+8+0+32=43，即(101011)B=(43)D。  B.八进制 → 十进制 方法：八进制数从低位到高位（即从右往左）计算，第0位的权值是8的0次方，第1位的权值是8的1次方，第2位的权值是8的2次方，依次递增下去，把最后的结果相加的值就是十进制的值了。八进制就是逢8进1，八进制数采用 0～7这八数来表达一个数。 例：将八进制的(53)O转换为十进制的步骤如下： 1. 第0位 3 x 8^0 = 3； 2. 第1位 5 x 8^1 = 40； 3. 读数，把结果值相加，3+40=43，即(53)O=(43)D。  B.十六进制 → 十进制 方法：十六进制数从低位到高位（即从右往左）计算，第0位的权值是16的0次方，第1位的权值是16的1次方，第2位的权值是16的2次方，依次递增下去，把最后的结果相加的值就是十进制的值了。十六进制就是逢16进1，十六进制的16个数为0123456789ABCDEF。 例：将十六进制的(2B)H转换为十进制的步骤如下： 1. 第0位 B x 16^0 = 11； 2. 第1位 2 x 16^1 = 32； 3. 读数，把结果值相加，11+32=43，即(2B)H=(43)D (二) （十进制） → （二、八、十六进制）  A.十进制 → 二进制 方法：除2取余法，即每次将整数部分除以2，余数为该位权上的数，而商继续除以2，余数又为上一个位权上的数，这个步骤一直持续下去，直到商为0为止，最后读数时候，从最后一个余数读起，一直到最前面的一个余数。 例：将十进制的(43)D转换为二进制的步骤如下： 1. 将商43除以2，商21余数为1； 2. 将商21除以2，商10余数为1； 3. 将商10除以2，商5余数为0； 4. 将商5除以2，商2余数为1； 5. 将商2除以2，商1余数为0； 6. 将商1除以2，商0余数为1； 7. 读数，因为最后一位是经过多次除以2才得到的，因此它是最高位，读数字从最后的余数向前读，101011，即(43)D=(101011)B。  B.十进制 → 八进制 方法1：除8取余法，即每次将整数部分除以8，余数为该位权上的数，而商继续除以8，余数又为上一个位权上的数，这个步骤一直持续下去，直到商为0为止，最后读数时候，从最后一个余数起，一直到最前面的一个余数。方法2：使用间接法，先将十进制转换成二进制，然后将二进制又转换成八进制； 例：将十进制的(796)D转换为八进制的步骤如下： 1. 将商796除以8，商99余数为4； 2. 将商99除以8，商12余数为3； 3. 将商12除以8，商1余数为4； 4. 将商1除以8，商0余数为1； 5. 读数，因为最后一位是经过多次除以8才得到的，因此它是最高位，读数字从最后的余数向前读，1434，即(796)D=(1434)O。  C.十进制 → 十六进制 方法1：除16取余法，即每次将整数部分除以16，余数为该位权上的数，而商继续除以16，余数又为上一个位权上的数，这个步骤一直持续下去，直到商为0为止，最后读数时候，从最后一个余数起，一直到最前面的一个余数。方法2：使用间接法，先将十进制转换成二进制，然后将二进制又转换成十六进制； 将十进制的(796)D转换为十六进制的步骤如下： 1. 将商796除以16，商49余数为12，对应十六进制的C； 2. 将商49除以16，商3余数为1； 3. 将商3除以16，商0余数为3； 4. 读数，因为最后一位是经过多次除以16才得到的，因此它是最高位，读数字从最后的余数向前读，31C，即(796)D=(31C)H。 (三) （二进制） ↔ （八、十六进制）  A.二进制 → 八进制 方法：取三合一法，即从二进制的小数点为分界点，向左（向右）每三位取成一位，接着将这三位二进制按权相加，然后，按顺序进行排列，小数点的位置不变，得到的数字就是我们所求的八进制数。如果向左（向右）取三位后，取到最高（最低）位时候，如果无法凑足三位，可以在小数点最左边（最右边），即整数的最高位（最低位）添0，凑足三位。 例：将二进制的(11010111.0100111)B转换为八进制的步骤如下： 1. 小数点前111 = 7； 2. 010 = 2； 3. 11补全为011，011 = 3； 4. 小数点后010 = 2； 5. 011 = 3","date":"2021-01-29","objectID":"/posts/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98.html/:1:1","tags":["面试相关问题"],"title":"面试相关问题","uri":"/posts/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98.html/"},{"categories":null,"content":"  laokong4628.github.io This is a concise, elegant and efficient notebook, convenient for learning, recording, query notes. The website is based on LoveIt theme and Hugo。 Hugo Theme LoveIt \" Hugo Theme LoveIt ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"About Me","uri":"/about/"},{"categories":null,"content":"博客链接 雨临Lewis的博客 不想当写手的码农不是好咸鱼_(xз」∠)_ 阳光派Plus’Blog 聪明的妖怪已经录下了唐僧的紧箍咒 北落师门 会者定离，一期一祈 BBing's Blog 自由 分享 合作 Emil’s blog 这是一个分享IT技术的小站 木子の博客 积水成河，积土成山！ cyc2018 面试宝典！ ","date":"2019-08-02","objectID":"/friends/:1:0","tags":null,"title":"Friends","uri":"/friends/"},{"categories":null,"content":"【十年之约】 【十年之约】 一个人的寂寞，一群人的狂欢 ","date":"2019-08-02","objectID":"/friends/:2:0","tags":null,"title":"Friends","uri":"/friends/"},{"categories":null,"content":"Qweather weather \u003cdiv id=\"he-plugin-standard\"\u003e\u003c/div\u003e ","date":"0001-01-01","objectID":"/weather/:1:0","tags":null,"title":"Weather","uri":"/weather/"}]